[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d CaloFit"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-W11-4/main[image:https://travis-ci.org/se-edu/addressbook-level3.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* CaloFit is a calories tracker application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* Our application targets audience who wishes to track their calories gained from day-to-day meals."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* Not only does it tracks your meal, our application includes various useful features. E.g. Setting your own calories intake, getting recommendation for your daily meal, notifications on meals that you have missed and more!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* The AddressBook-Level3 project was created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "MauriceTXS": 6,
      "-": 25
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "mainClassName \u003d \u0027calofit.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "application {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    applicationDefaultJvmArgs \u003d [ \"-Djdk.gtk.version\u003d2\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u002711.0.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    testImplementation group: \u0027org.mockito\u0027, name: \u0027mockito-core\u0027, version: \u00273.1.0\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    archiveName \u003d \u0027calofit.jar\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "iltep64": 7,
      "MauriceTXS": 1,
      "-": 153,
      "FelixNWJ": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "CaloFit was developed by the AY1920S1-CS2103T-W11-4 team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003d\u003d\u003d Damith C. Rajapakse"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::damithc.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "{empty}[http://www.comp.nus.edu.sg/~damithch[Homepage]] +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "[https://github.com/damithc[Github]] +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "[\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003d\u003d\u003d Maurice"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "image::mauricetxs.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "{empty}[http://github.com/MauriceTXS[Github]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Role: Chief Executive Officer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003d\u003d\u003d Felix"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "image::felixnwj.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "{empty}[http://github.com/FelixNWJ[Github]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Role: Chief Operating Officer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Data"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003d\u003d\u003d Ryan"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "image::iltep64.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "{empty}[http://github.com/iltep64[Github]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Role: Chief Technical Officer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003d\u003d\u003d Pin Sern"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "image::fangpinsern.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "{empty}[http://github.com/fangpinsern[Github]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Role: Intern +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Responsibilities: Database and DevOps"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 19,
      "-": 34,
      "FelixNWJ": 4
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-W11-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* *Email us* : You can also reach us at `weneedanewemail@gmail.com`"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DevGuideFeatureImplementations/AddFeatureGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003d\u003d\u003d Add feature"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "The `add` feature uses the Model to check if the dish is already in the database."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "If the dish is already in the database, the meal will be added to the meal log only."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "If the dish the user wants to add is not in the database,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "then the dish will be added to both the meal log and the dish database so that the user"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "can conveniently add it the next time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "There are a few cases to take note:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* If the dish is in the dish database:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "** The user inserts the calorie information that is the same as the one in the dish database"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "*** The dish will be added to the meal log only."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "** The user inserts the calorie information different from the calorie in the dish database"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "*** This will create a new dish all together as there are differences in the calorie"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "*** The new dish will be added to both the meal log as well as the dish database"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "** The user does not insert the calorie information"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "*** The program will look through the dish database and get the calorie information from that dish."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* If the dish is not in the dish database"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "** The user inserts the calorie information"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "*** A new dish is created with that name and calorie information"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "*** The dish will then be added to both the dish database as well as the meal log."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "** The user does not insert the calorie information"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "*** The program sets the calorie information to 700 by default."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "*** The dish will then be added to both the dish database as well as the meal log"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "The following sequence diagram shows how the `add` operation works when calorie information is included:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "image::AddSequenceDiagram.png[]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "To detect whether the calorie tag is used in the user input, we use an UNKNOWN_CALORIE in the Calorie class."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "This will trigger either search for the dish in the dish database or create a new dish and input it into the dish database."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "The input by the user and the dish in the dish database is considered equal only if both the name and the calorie information are the same."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Addition of tags are supported. However, they are not crucial to the implementation of the add function as tags are not considered when deciding equality of dishes."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 44
    }
  },
  {
    "path": "docs/DevGuideFeatureImplementations/budgetbar.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003d\u003d\u003d Budget Bar display"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "The budget bar display provides a graphic overview of meals consumed on the current day,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "comparing against the total calorie budget set by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "The budget bar feature is implemented via the `BudgetBar` class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "It is a JavaFx UI component, which wraps around `MealLog` and `CalorieBudget`."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "`MealLog` provides an observable list of meals eaten today,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "while `CalorieBudget` provides the currently set user budget."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "Using helper code from `ObservableUtil` and `ObservableListUtil`,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "we compute several derived properties:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "* Total calories consumed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "* Percentage of budget consumed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "From there, we again construct further observable/reactive values representing:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "* Bar info text color"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "** Transitions from green to red, when more budget is consumed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "* Bar info text"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "** If budget has been set, shows `\u003cTotal Consumed\u003e / \u003cBudget\u003e`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "** If budget has not been set, only shows `\u003cTotal Consumed\u003e`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "* Meal segments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "** Each meal is displayed as a proportionally-sized segment in the whole bar."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "* Position of warning/danger markers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "The following activity diagram shows the reactive update dependencies."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "image::BudgetMealUpdate.png[]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Base UI component to display meal segments."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "* **Alternative 1 (current choice):**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "  Use ControlsFx\u0027s `SegmentedBar` class to handle display of bar segments."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "*** No need to reimplement JavaFx `setLayout` logic"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "*** Better performance than `GridPane`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "*** Dependency on external library"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "*** Have to create a separate `BufferSegment` class to represent gap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "  Use JavaFx\u0027s `GridPane` to lay out bar segments, and `ColumnConstraints` to appropriately set column widths."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "*** No external library (other than JavaFx) needed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "*** Poor performance to due `Observable` machinery and `GridPane` layout"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "* Explanation of choice:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "  Simpler implementation and better performance outweighs the cost of using an external library."
      }
    ],
    "authorContributionMap": {
      "iltep64": 53
    }
  },
  {
    "path": "docs/DevGuideFeatureImplementations/report.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "// tag::report[]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d\u003d\u003d [Proposed] Report feature"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "The Report feature is implemented through a `ReportCommand` that extends from the abstract `Command` class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "It returns `CommandResult` object that has the boolean \"isReport\" set to True."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "The `MainApp` Ui component will check the `CommandResult` for the \"isReport\" boolean and create a new `ReportWindow` through the `MainApp#handleReport()` method."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "The `ReportWindow` object takes in a `Statistics` object that is created by calling `Logic#getStatistics()` which subsequently calls `Model#getStatistics()`."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Additionally, the following operation is also implemented:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* `Model#getStatistics()` -- gets the statistics of the current object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Given below is an example usage scenario and how the Report feature behaves at each step."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Step 1. The user starts up CaloFit for the first time. The `ModelManager` will contain a `MealLog` that has an empty list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "If the user enters \"report\" in the Command Line Input with a `MealLog` that has no `Meal` entered this month, a `CommandException` will be thrown since there are no `Meal` to gather statistics pertaining to this month."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Step 2. The user has added a `Meal` into the `MealLog` through the `add` feature."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Step 3. The user enters \"report\" in the Command Line Input to generate the report of CaloFit. The `ReportCommand` created will return a `CommandResult` object with \"isReport\" set to True. When the `MainWindow` checks this boolean, it calls `MainWindow#handleReport()` that creates the `ReportWindow`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "The following sequence diagram shows how the \"report\" command works."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "image::ReportCommand.png[]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "The following sequence diagram shows how the `ReportWindow` is generated."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "image::ReportWindow.png[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: When the `Statistics` object is saved."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* **Alternative 1 (current choice):** Only when a \"report\" command is entered."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** Pros: Less processes carried out for each type of command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** Cons: At any point in using CaloFit, the statistics are likely not updated to the most recent command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* **Alternative 2:** Every command saves a new updated `Statistics` object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** Pros: Logging of statistics can be accurate, and statistics are always updated."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** Cons: Unnecessary as user does not need to see the statistics other than through a \"report\" command and results in every command having to do more work and interact with the `Model` more, possibly creating more bugs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* **Explanation of Choice:** Since the user only needs to see the updated statistics when a \"report\" command is executed, we only need to generate a new `Statistics` object with the updated values for that command, hence **Alternative 1** is chosen to avoid adding unnecessary complexity to each command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store the statistics in CaloFit."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* **Alternative 1 (current choice):** Wrap the values in a `Statistics` object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** Pros: Neater code and easier to understand, since all statistic-related values are stored in the `Statistics` object and are not implemented in the `Model`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** Cons: Additional class to maintain and test for dependencies."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* **Alternative 2:** Store the values as a list in the `Model`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** Pros: The statistics can be updated easily through the `Model` itself by updating the elements in the list. Accessing the statistics to display is easier as well."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** Cons: Burdens the `Model` with a responsibility that is largely irrelevant to its current ones, which is to keep track of the Objects that make up the CaloFit model."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* **Explanation of Choice:** To try and enforce Single Responsibility Principle as much as possible and avoid adding irrelavant functionality to `Model`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "// end::report[]"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 53
    }
  },
  {
    "path": "docs/DevGuideFeatureImplementations/suggest.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "// tag::suggest[]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d [Proposed] Suggest feature"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "The suggest mechanism is implemented through a `SuggestCommand` that extends from the abstract `Command` class. It interacts with the object that implements the `Model` interface by updating it with dishes that are within the calories budget. The calories budget is obtained from `Model#getRemainingCalories()`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Additionally, it implements the following operation:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* `Model#getRemainingCalories` -- gets the current allowed calories budget."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "This operation is exposed in the `Model` interface as `Model#getRemainingCalories()`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Given below is an example usage scenario and how the suggest mechanism behaves at each step."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Step 1. The user starts up CaloFit for the first time. The `DishDatabase` will be loaded with the initial data by calling `MainApp#loadDishDatabase`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "If the DishDatabase is empty, or the daily calorie budget have exceeded the set amount, or there are no dishes that is within the amount, nothing will be display."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Step 2. The user enters `\"suggest\"` in the Command Line Input to invoke the `SuggestCommand` command which will run `SuggestCommand#execute()`. `Model#getRemainingCalories()` will be executed to get the remaining calories, which will provide `#Model#updateFilteredDishList` with the calories budget to update the list accordingly."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Step 3. The success message will be return, while printing the updated dish list on CaloFit."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "The following sequence diagram shows how the suggest operation works:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "image::SuggestCommand.png[]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How suggest executes"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* **Alternative 1 (current choice):** Update dish list with calorie budget"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Pros: Neater code, easier to maintain and uses lesser memory."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Cons: Unable to get history of suggest list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* **Alternative 2:** Create a new list for every `SuggestCommand`."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Pros: Easier to understand and customise if require data for method."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Cons: Unnecessary memory wastage for list created and not used."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* **Explanation of Choice:** Since we only need to show the user the current meal suggest, there are no usage for the past suggest result."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the suggest command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* **Alternative 1 (current choice):** Stores the value in a dish list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Pros: Commonly used, thus easier to understand and easier to deal with. It can also be easily updated."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Cons: Would constantly require `Model` with a responsibility that is not relevant to it\u0027s current."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* **Alternative 2:** Wrap the values in a `Suggest` object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Pros: Neater and easier to maintain, since all suggest-related values are stored in the `Suggest` object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Cons: Additional class to maintain, harder for newcomers to understand code with too many classes."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "// end::suggest[]"
      }
    ],
    "authorContributionMap": {
      "MauriceTXS": 50
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003d CaloFit - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W11-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "By: `Team CaloFit (AY1920S1-CS2103T-W11-4)`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `DishListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ".  `Logic` uses the `CommandParser` class to parse the user command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a meal)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* stores the DishDatabase data and MealLog data."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cMeal\u003e` and `ObservableList\u003cDish\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `ModelManager`, which `Dish` can reference. This would allow `ModelManager` to only require one `Tag` object per unique `Tag`, instead of each `Dish` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* can save the DishDatabase data in json format and read it back."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Classes used by multiple components are in the `seedu.calofit.commons` package."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d Add feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Addition though flags (e.g add n/Chicken c/200 t/dry)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "The `add` feature is implemented through the `AddCommand` class that extends the abstract `Command` class."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "It interacts with other objects through the `Model` interface to manipulate the meal log and dish database to add meals."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "The addition of meals is done through `Model#addMeal()` which would add the meal from the meal log list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "The `add` feature uses the Model to check if the dish is already in the database."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "If the dish is already in the database, the meal will be added to the meal log only through the `Model#addMeal()` method."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "If the dish the user wants to add is not in the database,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "then the dish will be added to both the meal log and the dish database through the `Model#addMeal()` and"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "`Model#addDish()` methods respectively."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "There are a few cases to take note:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* If the dish name is in the dish database:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** The user inserts the calorie information that is the same as the one in the dish database"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "*** The dish will be added to the meal log only."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** The user inserts the calorie information different from the calorie in the dish database"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "*** This will create a new dish all together as there are differences in the calorie"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "*** The new dish will be added to both the meal log as well as the dish database"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** The user does not insert the calorie information"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "*** The program will look through the dish database and get the calorie information from that dish."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* If the dish name is not in the dish database"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** The user inserts the calorie information"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "*** A new dish is created with that name and calorie information"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "*** The dish will then be added to both the dish database as well as the meal log."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** The user does not insert the calorie information"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "*** The program sets the calorie information to 700 by default."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "*** The dish will then be added to both the dish database as well as the meal log"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "The following sequence diagram shows how the `add` operation works when calorie information is included:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "image::AddSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "To detect whether the calorie tag is used in the user input, we use an UNKNOWN_CALORIE in the Calorie class."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "This will trigger either search for the dish in the dish database or create a new dish and input it into the dish database."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "The input by the user and the dish in the dish database is considered equal only if both the name and the calorie information are the same."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Addition of tags are supported. However, they are not crucial to the implementation of the add"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "function as tags are not considered when deciding equality of dishes."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Addition though indexes in suggested/find meal list (e.g add 1 2 3)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "The `add` feature also supports the addition of meals through indexes in the suggested meal list."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "This is done to improve the user experience as they do not have to always enter the long commands."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "This feature is also implemented through the `AddCommand` class that extends the abstract `Command` class."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "The `add` command in this case takes in a list of numbers pass to it through the `AddCommandParser`. The checking of valid"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "indexes is done by the `AddCommandParser`. Once the list is passed to the `AddCommand`, it calls `Model#getFilteredDishlist()`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "which returns the filtered dish list. The add command will then loop through"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "the list of indexes and get the respective dishes from the filtered dish list."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "We cannot add the meal immediately to the meal log as the filtered dish list would change when the calorie count changes. Hence the"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "meals are first added to separate a `toBeAddedMealList` and once all the indexes are added to that list,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "`MealLog#addListOfMeals(toBeAddedMealList)` is called to add all the meals in to the meal log at once."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: What is considered the same meal"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* **Alternative 1 (Current choice):** Compare name and calorie only"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "** Pros: More precise compared to just comparing names."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "** Cons: Complications when adding meals."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* **Alternative 2:** Compare name only"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "** Pros: Easy comparison. Reduces complications when adding meals."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "** Cons: High collision."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* **Explanation of choice:** As a calorie counter, the calories is an important"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "part of the meal. Hence we need to consider it when comparing meals. Certain meals"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "with the same name may not have the same amount of calories. Hence we decided to go"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "with alternative 1."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003d\u003d\u003d Delete feature"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "The `delete` feature is implemented through the `DeleteCommand` class that extends the abstract `Command` class."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "It interacts with other objects through the `Model` interface to manipulate the meal log and remove meals."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "The `delete` command allows for removal of multiple dishes with a single command."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "The `delete` command takes in a `listOfIndex` passed to it by the `DeleteCommandParser`. The checking of valid integers"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "is done by the `DeleteCommandParser`. Once the listOfIndex is passed to the `DeleteCommand`, it sorts the list from largest index"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "to smallest index using the `Collections.sort(listOfIndex, Comparator.reverseOrder())`. The `DeleteCommand` then loops through"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "the sorted list and checks if the index is within the size of the meal log. If the index is valid, `DeleteCommand` will"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "remove the respective meal from the meal log."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "The removal of meals is done through the `Model#removeMeal(meal)` which would remove the meal from the meal log list."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "The following sequence diagram shows how the `delete` operation works when index 1 is deleted:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Below is the activity diagram that summarises the scenario when \"delete 1\" is called by the user."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "image::DeleteActivityDiagram.png[]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How is the meal removed"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* **Alternative 1 (Current Choice):** Removed after the listOfIndex is sorted."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "** Pros: Prevent the reordering of the meal log causing the larger indexes to correspond to a different meal or"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "out of bounds. (e.g delete 1 2 for a meal log with 2 meals. If we delete 1 first, the meal log will change to having 1 meal."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "The meal previously at index 2 is now at index 1. When doing delete 2, the meal at index 2 is now out of bounds as the meal log"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "only has 1 meal.)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "** Cons: The command may take some time when handling large amounts of input. This is due to the sorting required."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* **Alternative 2:** Loop through the indexes in the `DeleteCommandParser` and create a new `DeleteCommand` for every index."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "** Pros: Simple morphing of previous delete method."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "** Cons: Have to change other parts of the model breaking abstraction."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* ** Explanation of Choice:** The command is for the deletion of meals for that day. A person on average consumes 3 - 4 meals a day."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Hence on average, the most meals to be deleted is 4. Thus the sorting time would not be too significant. Also,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d Budget Bar display"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "The budget bar display provides a graphic overview of meals consumed on the current day,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "comparing against the total calorie budget set by the user."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "The budget bar feature is implemented via the `BudgetBar` class."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "It is a JavaFx UI component, which wraps around `MealLog` and `CalorieBudget`."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "`MealLog` provides an observable list of meals eaten today,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "while `CalorieBudget` provides the currently set user budget."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Using helper code from `ObservableUtil` and `ObservableListUtil`,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "we compute several derived properties:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* Total calories consumed"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* Percentage of budget consumed"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "From there, we again construct further observable/reactive values representing:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* Bar info text color"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Transitions from green to red, when more budget is consumed"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* Bar info text"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** If budget has been set, shows `\u003cTotal Consumed\u003e / \u003cBudget\u003e`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** If budget has not been set, only shows `\u003cTotal Consumed\u003e`."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* Meal segments"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Each meal is displayed as a proportionally-sized segment in the whole bar."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* Position of warning/danger markers"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "The following activity diagram shows the reactive update dependencies."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "image::BudgetMealUpdate.png[]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Base UI component to display meal segments."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* **Alternative 1 (current choice):**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Use ControlsFx\u0027s `SegmentedBar` class to handle display of bar segments."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "*** No need to reimplement JavaFx `setLayout` logic"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "*** Better performance than `GridPane`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "*** Dependency on external library"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "*** Have to create a separate `BufferSegment` class to represent gap."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Use JavaFx\u0027s `GridPane` to lay out bar segments, and `ColumnConstraints` to appropriately set column widths."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "*** No external library (other than JavaFx) needed"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "*** Poor performance to due `Observable` machinery and `GridPane` layout"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* Explanation of choice:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Simpler implementation and better performance outweighs the cost of using an external library."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "// tag::suggest[]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d Suggest feature"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "The suggest feature displays the suggested automatically to the user accordingly to the remaining calorie budget."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "The suggest mechanism is toggled when the application starts up. It will always display the suggested meals for the user in the right pane. The feature can be can be toggled back by typing the \"suggest\" command. Through a `SuggestCommand` that extends from the abstract `Command` class. It interacts with the object that implements the `Model` interface by updating it with dishes that are within the calories budget. The calories budget is obtained from `Model#getRemainingCalories()`."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Additionally, it implements the following operation:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* `Model#getRemainingCalories` -- gets the current allowed calories budget."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "This operation is exposed in the `Model` interface as `Model#getRemainingCalories()`."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Given below is an example usage scenario and how the suggest mechanism behaves at each step."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Step 1. The user starts up CaloFit for the first time. The `DishDatabase` will be loaded with the initial data by calling `MainApp#loadDishDatabase`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "If the DishDatabase is empty, or the daily calorie budget have exceeded the set amount, or there are no dishes that is within the amount, nothing will be display."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Step 2. The user enters `\"suggest\"` in the Command Line Input to invoke the `SuggestCommand` command which will run `SuggestCommand#execute()`. `Model#getRemainingCalories()` will be executed to get the remaining calories, which will provide `#Model#updateFilteredDishList` with the calories budget to update the list accordingly."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Step 3. The success message will be return, while printing the updated dish list on CaloFit."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "The following sequence diagram shows how the suggest operation works:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "image::SuggestCommand.png[]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How suggest executes"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* **Alternative 1 (current choice):** Update dish list with calorie budget"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Pros: Neater code, easier to maintain and uses lesser memory."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Cons: Unable to get history of suggest list."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* **Alternative 2:** Create a new list for every `SuggestCommand`."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Pros: Easier to understand and customise if require data for method."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Cons: Unnecessary memory wastage for list created and not used."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* **Explanation of Choice:** Since we only need to show the user the current meal suggest, there are no usage for the past suggest result."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the suggest command"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* **Alternative 1 (current choice):** Stores the value in a dish list."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Pros: Commonly used, thus easier to understand and easier to deal with. It can also be easily updated."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Cons: Would constantly require `Model` with a responsibility that is not relevant to it\u0027s current."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* **Alternative 2:** Wrap the values in a `Suggest` object"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Pros: Neater and easier to maintain, since all suggest-related values are stored in the `Suggest` object."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Cons: Additional class to maintain, harder for newcomers to understand code with too many classes."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "// end::suggest[]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "// tag::report[]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d Report feature"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "The Report feature is implemented through a `ReportCommand` that extends from the abstract `Command` class. +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "It returns a `CommandResult` object that has the boolean \"isReport\" set to True when `ReportCommand#execute(Model)` is called. +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "The `MainWindow` Ui component will check the `CommandResult` for the \"isReport\" boolean and create a new `ReportWindow` through the `MainWindow#handleReport()` method. +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "The `ReportWindow` object takes in a `Statistics` object that is created by calling `Logic#getStatistics()` which subsequently calls `Model#getStatistics()`. The `Model` then returns the `Statistics` object that is created based on the `CalorieBudget` and `MealLog` in the `Model`. +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Additionally, the following operations are implemented in `Statistics`:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* `Statistics#generateStatistics(ObservableList\u003cMeal\u003e, CalorieBudget)` -- gets the statistics of the current object. Maximum, Minimum and Average calorie intake per day of the current month are calculated internally in this method."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "While the above method takes in an `ObservableList\u003cMeal\u003e` instead of a `MealLog`, the list is generated from the `MealLog` and passed as the argument to avoid unnecessary interaction between the `MealLog` and `Statistics` classes. +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Therefore, even though `MealLog` is not taken in as a parameter, `Statistics` still depeneds on `MealLog` to get the data for generating the report."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* `Statistics#getCalorieExceedCount(CalorieBudget, ObservableList\u003cMeal\u003e)` -- gets the number of days where calorie intake exceeded the calorie budget for that day."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* `Statistics#getMostConsumedDishes(ObservableList\u003cMeal\u003e)` -- gets the list of dishes which are consumed the most in the current month."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* `Statistics#getFoodChartSeries(ObservableList\u003cMeal\u003e)` -- gets the series containing the dishes eaten this month and their respective quantities."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* `Statistics#getCalorieChartSeries(ObservableList\u003cMeal)` -- gets the series that representing the amount of calories taken by the user over the past month."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Given below is a Class Diagram that shows how the ReportCommand interacts with other components of CaloFit."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "image::ReportClassDiagram.png[]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Given below is an example usage scenario and how the Report feature behaves at each step."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Step 1. The user starts up CaloFit for the first time. The `ModelManager` will contain a `MealLog` that has an empty list."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "If the user enters \"report\" in the Command Line Input with a `MealLog` that has no `Meal` entered this month, a `CommandException` will be thrown since there are no `Meal` to gather statistics pertaining to this month."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Step 2. The user has added a `Meal` into the `MealLog` through the `add` feature."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Step 3. The user enters \"report\" in the Command Line Input to generate the report of CaloFit. The `ReportCommand` created will return a `CommandResult` object with \"isReport\" set to True. When the `MainWindow` checks this boolean, it calls `MainWindow#handleReport()` that creates the `ReportWindow`."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "The following activity diagram summarises the above usage scenario."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "image::ReportCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "The following sequence diagram shows how the \"report\" command works."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "image::ReportCommand.png[]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "The parameters of the constructor of `CommandResult` in the above diagram are as follows, from left to right: +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "String message -- the message to be displayed to the user in the GUI. +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "boolean showHelp: indicates if the `HelpWindow` should be generated. +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "boolean showReport: indicates if the `ReportWindow` should be generated. +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "boolean isExit: indicates if the application should exit along with any other windows that are being shown. +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Hence, only showReport is set to true to indicate that a `ReportWindow` should be created, while the rest of the booleans are set to false."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "The following sequence diagram shows how the `ReportWindow` is generated."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "image::ReportWindow.png[]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: When the `Statistics` object is created."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* **Alternative 1 (current choice):** Only when a \"report\" command is entered."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Pros: Less processes carried out for each type of command."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** Cons: At any point in using CaloFit, the statistics are not updated since the object is only created when the \"report\" command is entered."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* **Alternative 2:** Every command creates a new updated `Statistics` object."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Pros: Logging of statistics can be accurate, and statistics are always updated."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Cons: Unnecessary as user does not need to see the statistics other than through a \"report\" command and results in every command having to do more work and interact with the `Model` more, possibly creating more bugs."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* **Explanation of Choice:** Since the user only needs to see the updated statistics when a \"report\" command is executed, we only need to generate a new `Statistics` object with the updated values for that command, hence **Alternative 1** is chosen to avoid adding unnecessary complexity to each command."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store the statistics in CaloFit."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* **Alternative 1 (current choice):** Wrap the values in a `Statistics` object."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Pros: Neater code and easier to understand, since all statistic-related values are stored in the `Statistics` object and are not implemented in the `Model`."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Cons: Additional class to maintain and test for dependencies."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* **Alternative 2:** Store the values as a list in the `Model`."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Pros: The statistics can be updated easily through the `Model` itself by updating the elements in the list. Accessing the statistics to display is easier as well."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "** Cons: Burdens the `Model` with a responsibility that is largely irrelevant to its current ones, which is to keep track of the Objects that make up the CaloFit model."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "* **Explanation of Choice:** To try and enforce Single Responsibility Principle as much as possible and avoid adding irrelavant functionality to `Model`."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "// end::report[]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003d\u003d\u003d Target User Profile"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "iltep64"
        },
        "content": "* Health-conscious people watching their diet"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "iltep64"
        },
        "content": "* Prefer desktop applications over mobile apps"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "iltep64"
        },
        "content": "* Comfortable enough to work with text command-based interfaces"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003d\u003d\u003d Value Proposition"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "iltep64"
        },
        "content": "The app is able to help the user keep track of their calorie consumption. This way, they can ensure that they keep to their own diet plans."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "iltep64"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"4*\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|\u0026#11088;\u0026#11088;\u0026#11088;"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|new user"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|see usage instructions"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|refer to instructions when I forget how to use the App."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|\u0026#11088;\u0026#11088;\u0026#11088;"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|user"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|create a new meal entry"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|keep track of what I ate today."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|\u0026#11088;\u0026#11088;\u0026#11088;"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|user"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|see how many calories I have left in today\u0027s budget"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|know what I can eat later, and stay in budget."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|\u0026#11088;\u0026#11088;\u0026#11088;"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|user"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|be alerted if I missed a meal"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|be reminded to stick to my meal plans."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|\u0026#11088;\u0026#11088;\u0026#11088;"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|user"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|change my daily calorie budget"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|better reflect my new lifestyle requirements."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|\u0026#11088;\u0026#11088;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|user"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|modify my previous meal entries"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|fix missing or inaccurate information."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|\u0026#11088;\u0026#11088;"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|user"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|delete my previous meal entries"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|undo mistakenly added meal entries."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|\u0026#11088;\u0026#11088;"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|user"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|generate a summary of meals over the past month"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|review my overall progress in keeping to my meal plan."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|\u0026#11088;\u0026#11088;"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|user"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|view meal suggestions that fit in my remaining budget."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|figure out what I can eat while keeping to my plan."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|\u0026#11088;"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|user"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|create a new meal entry based of a meal I commonly eat"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "iltep64"
        },
        "content": "|keep track of a meal I eat often."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "iltep64"
        },
        "content": "// [discrete]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003d\u003d\u003d Use Case: Add meal entry"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "iltep64"
        },
        "content": "1.\tUser enters meal information."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "iltep64"
        },
        "content": "2.\tSystem adds entry into database."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "iltep64"
        },
        "content": "3.\tSystem shows updated calorie budget for the day."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "iltep64"
        },
        "content": "* 1a.\tThe given meal entry has insufficient information (calories, meal name, etc.)"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "iltep64"
        },
        "content": "** 1a1.\tCaloFit shows an error message."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "iltep64"
        },
        "content": "Use case restarts at step 1."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003d\u003d Non-functional Requirements"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "iltep64"
        },
        "content": ".\tShould work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "iltep64"
        },
        "content": ".\tShould be able to hold up to 1000 meal entries without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ".\tA user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "iltep64"
        },
        "content": "Windows, Linux, macOS"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "iltep64"
        },
        "content": "[[meal-entry]] Meal entry::"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "iltep64"
        },
        "content": "An entry representing a eaten meal."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "iltep64"
        },
        "content": "Contains meal name, calories, and date/time consumed."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "[[meal-db]] Meal database::"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "iltep64"
        },
        "content": "////"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iltep64": 77,
      "fangpinsern": 84,
      "MauriceTXS": 160,
      "-": 313,
      "FelixNWJ": 38
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d CaloFit - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ":imagesDir: images/UserGuideImages"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W11-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "By: `Team AY1920S1-CS2103T-W11-4`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "CaloFit is suitable for those who prefer to track their calories gained from day-to-day meals. CaloFit is primarily uses a Command Line Interface(CLI) while still displaying the results through a Graphical User Interface(GUI). You can set your daily calorie target and CaloFit will do its best to help you stay on track."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Coming in v1.4 when the first jar file will be released."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/MEAL_NAME`, `MEAL_NAME` is a parameter which can be used as `add n/Carbonara`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* Items in square brackets are optional e.g `add n/MEAL_NAME [c/CALORIES]` can be used as `add n/Carbonara c/430` or as `add n/Carbonara`."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d\u003d\u003d Adding a meal: `add`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Adds a meal that the user ate to be tracked by CaloFit. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "There are 2 formats that can be used: +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Format 1: `add n/MEAL_NAME [c/CALORIES] [t/TAGS]` +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Inputting calories of the meal is optional. +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "If the meal is a dish stored in CaloFit, the calories will be taken from CaloFit. If not, a default value of 700 will be added for you, +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Tags are completely optional and there is no default tag. You could also have more than 1 tag. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Format 2: `add NUMBER_IN_SUGGESTED_MEAL_LIST [NUMBER_IN_SUGGESTED_MEAL_LIST] ...` +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "NUMBER_IN_SUGGESTED_MEAL_LIST is the number that corresponds to the meal in suggested list on the right side of the application."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "You can also add multiple meals at one go using the indexes. This can be done by separating the numbers with a space."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "e.g. `add 1 2 3`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "MEAL_NAME can only be a maximum of 30 characters to ensure it displays correctly for you."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Examples usage: +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "It is lunchtime and you are about to go have some Mushroom Soup."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "You would like to add the meal into CaloFit to record it down. What do you do?"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "If `format 1` is your preferred choice, you could do the following:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* Type `add n/Mushroom Soup` into the command bar and press the `enter` key."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "image::AddCommandInitialFormat1.png[]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* If calofit has the information for the meal (Mushroom Soup in this case),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "it will grab the relevant information and update the meal log accordingly."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "The meal that is added will be shown in the result window."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "image::AddCommandAddedFormat1.png[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* If CaloFit does not have the information, and the information is not provided,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "the default calorie information will be 700 calories"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "If `format 2` is your prefered choice, you could do the following:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* Type `find mushroom soup` into the command bar and press the `enter` key."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "image::AddCommandFind1Command.png[]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* If the meal exist in our meal database, it will show up under the suggested"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "meals header."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "image::AddCommandSearchResult.png[]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* Afterwards, enter the command `add 1` to the command bar and press the `enter` key."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "image::AddCommandAdd1.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* The meal \"Mushroom Soup\" will then be added to the consumed meals."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "image::AddCommandAdd1Success.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Commands below are come other example commands:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* `add n/Spaghetti c/480 t/tasty` - Adds a meal named Spaghetti of 480 calories with the tag \"tasty\"."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* `add n/Chicken Rice c/500` - Adds a meal named Chicken Rice of 500 calories."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* `add n/Mushroom Soup` - Adds a meal named Mushroom Soup of 700 calories by default."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* `add 1` - Adds the first meal shown under the suggested meal section."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* `add 1 2 3` - Adds the first and second meal shown under the suggested meal section."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d\u003d\u003d Editing previous meal entry : `edit`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Edits a meal that the user previously ate today. +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Format: `edit MEAL_NUMBER [n/NAME] [c/CALORIES] [t/TAGS]` +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "The input of at least 1 field (either NAME, CALORIES or TAGS) is required."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "A mix of the different fields is possible as well."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* `edit 1 n/Wanton Noodle c/1000`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* `edit 2 n/Chicken Rice`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* `edit 3 c/500`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* `edit 4 t/tasty`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d\u003d\u003d Deleting previous meal entry : `delete`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Deletes a meal that the user previously ate today. +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "The meal will be removed from the consumed meal section +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "and the calorie tracking bar."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Format: `delete MEAL_NUMBER [MEAL_NUMBER] ...`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Example usage: +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "You thought you were going to have Mushroom Soup for lunch when you were queuing."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "So you decided add Mushroom Soup to the meal log using the add command."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "However, while queuing, your boss called you saying that there is an emergency and"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "wants you back in the office immediately. You abandon the queue and go back to the office."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Since you did not consume the meal, you would want to remove it from the meal log."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "What do you do?"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* Type `delete 1` into the command bar and press the `enter` key."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "image::DeleteCommandDelete1.png[]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* When the meal is successfully deleted, a message will appear in the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "result box and the meal will be removed"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "image::DeleteCommandDelete1Success.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\"1\" can be changed to any number in the consumed meal section. However,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "in this example, Mushroom Soup is located at index 1."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Commands below are come other example commands:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* `delete 1` - deletes the first meal in the consumed meal section."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* `delete 1 2 3` - bulk deleting of meals 1, 2 and 3 in the consumed meal section."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003d\u003d\u003d Find meals in the meal database: `find`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Searches for meals contains the words you have input.+"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "The search results will be shown under the \"Suggested Meals\" section of the application. +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "To toggle it back to suggest mode after use, just enter the `suggest` command."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Format: `find MEAL_WORD`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "You would like to know the amount of calories in an \"Apple Pie\" which"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "you know exist in the CaloFit database. However, you"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "do not want to scroll through the suggested list just to find it."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "What do you do?"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* Type `find apple pie` into the command bar and press the `enter` key."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "image::FindCommandFindApplePie.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* The apple pie result will show under the suggested meals section with its"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "relevant calorie information."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "image::FindCommandFindApplePieSuccess.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003d\u003d\u003d Suggesting Meal options: `suggest`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Suggest possible meals based on user calorie intake budget. +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "The available meals will be shown under the \"Suggested Meals\" section of the application. +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "The suggest feature can be toggled back by typing the \"suggest\" command. +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Format: `suggest`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d\u003d\u003d Setting calorie intake budget: `set`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Set user calorie intake budget for today. +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Format: `set CALORIES`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* `set 2500`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d\u003d\u003d Generating a Report: `report`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "To create your report that displays your progress over this month: +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "1. Type the word \"report\" in the command box. A picture is shown below highlighting the command box."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "image::UserGuideReportStep1.png[]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "2. Press \"Enter\" on your keyboard. A separate window which is the report will appear in the center of your screen."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "image::UserGuideReportStep2.png[]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "The report displays:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "1. Your Maximum, Minimum and Average calorie intake per day of the current month."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Average value is rounded down."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "2. The number of days where calorie intake exceeded calorie budget of the month."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "3. Your list of most consumed dishes of the month."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "4. Your calorie intake per day over the entire month."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "5. The quantity of each type of dish consumed in that month."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Below is a picture of the report showing where each type of information mentioned above can be found."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "image::UserGuideReportStep3.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Format: `report`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003d\u003d\u003d Notification that a meal is missed"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "A notification will automatically be displayed every 10 minutes if a meal is missed."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Notification will be prompted: +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "-After 10am for breakfast +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "-After 2pm for lunch +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "-After 8pm for dinner"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d\u003d\u003d Shows an overview of commands usable in CaloFit: `help`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Displays all the commands that are usable in CaloFit, including examples of how to use them. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* *Add* `add n/MEAL_NAME [c/CALORIES]` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "e.g. `add n/duck rice c/360`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* *Add* `add NUMBER_IN_SUGGESTED_MEAL_LIST` +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "e.g. `add 1`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* *Edit* : `edit MEAL_NUMBER [n/MEAL_NAME] [c/CALORIES]` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "e.g. `edit 1 n/duck noodle c/250`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* *Delete* : `delete MEAL_NUMBER` +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* *Set* : `set CALORIES` +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "e.g. `set 2600`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* *Suggest* : `suggest` +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "e.g. `suggest`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* *Report* : `report` +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "e.g. `report`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "* *Help* : `help` +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "e.g. `help`"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 111,
      "MauriceTXS": 11,
      "FelixNWJ": 48,
      "-": 81
    }
  },
  {
    "path": "docs/diagrams/AddSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "participant \":CommandParser\" as CommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "participant \"a:AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "participant \"Meal\" as Meal LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "[-\u003e LogicManager : execute(\"add n/dish c/700\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "LogicManager -\u003e CommandParser : parseCommand(\"add n/dish c/700\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "activate CommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "CommandParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "AddCommandParser --\u003e CommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "CommandParser -\u003e AddCommandParser : parse(\"n/dish c/700\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "AddCommandParser -\u003e AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "AddCommand --\u003e AddCommandParser : a"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "AddCommandParser --\u003e CommandParser : a"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "AddCommandParser -[hidden]-\u003e CommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "CommandParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "deactivate CommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "LogicManager -\u003e AddCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "create Meal"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "AddCommand -\u003e Meal: Meal(dish, timestamp)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "activate Meal"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Meal --\u003e AddCommand: meal"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "deactivate Meal"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "alt meal in dish database"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "AddCommand -\u003e Model : addMeal(meal)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "else"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "AddCommand -\u003e Model : addMeal(meal)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "AddCommand -\u003e Model : addDish(dish)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "end"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "AddCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "CommandResult --\u003e AddCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "AddCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 91
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteDish(m)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveDishDataBase(dishDataBase)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "FelixNWJ": 2
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "ModelManager *-right-\u003e \"1\" UniqueDishList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "ModelManager *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "UniqueTagList -[hidden]down- UniqueDishList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "UniqueDishList o-right-\u003e Dish"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Dish o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Dish *--\u003e Name"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Dish *--\u003e Calorie"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "FelixNWJ": 7
    }
  },
  {
    "path": "docs/diagrams/BudgetMealUpdate.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "object \"budget\" as budget"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "object \"todayMeals:ObservableList\u003cMeal\u003e\" as todayMeals"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "Package BudgetBar \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "object totalConsumed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "todayMeals --\u003e totalConsumed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "object budgetPercent"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "totalConsumed -left-\u003e budgetPercent"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "budget --\u003e budgetPercent"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "object infoText"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "totalConsumed --\u003e infoText"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "budget --\u003e infoText"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "object barColor"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "budgetPercent --\u003e barColor"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "object mealBars"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "todayMeals --\u003e mealBars"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "Package UI \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "object infoNode"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "infoText --\u003e infoNode"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "barColor --\u003e infoNode"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "object mealSegments"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "mealBars -down-\u003e mealSegments"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "object budgetMark"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "totalConsumed --\u003e budgetMark"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "budget --\u003e budgetMark"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "object budgetExtraMark"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "totalConsumed --\u003e budgetExtraMark"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "budget --\u003e budgetExtraMark"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "iltep64": 51
    }
  },
  {
    "path": "docs/diagrams/DeleteActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ":User executes \"delete 1\" command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "if () then ([1 is a valid meal index])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    :Meal at index 1 is removed;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    :Meal log is updated;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    :Error message shown to user;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 16
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "participant \":CommandParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "DeleteCommand -\u003e Model : removeMeal()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 1,
      "-": 67,
      "FelixNWJ": 1
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Interface ReadOnlyDishDatabase \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class ReadOnlyDishDatabase"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class CalorieBudget"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Package Dish {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class DishDatabase"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class Dish"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class Calorie"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class UniqueDishList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Package Meal {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class Meal"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class MealLog"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Package Util {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class Statistics"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class TimeStamp"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "DishDatabase .up.|\u003e ReadOnlyDishDatabase"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "ModelManager o--\u003e \"1\" DishDatabase"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "ModelManager o--\u003e \"1\" MealLog"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "ModelManager o-right-\u003e \"1\" CalorieBudget"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "ModelManager o--\u003e \"1\" Statistics"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "DishDatabase *--\u003e \"1\" UniqueDishList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "UniqueDishList o--\u003e \"*\" Dish"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "MealLog o--\u003e \"*\" Meal"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Dish *--\u003e \"1\" Name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Dish *--\u003e \"1\" Calorie"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Dish *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Meal *--\u003e \"1\" Dish"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Meal *--\u003e \"1\" TimeStamp"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Name -[hidden]right-\u003e Calorie"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Calorie -[hidden]right-\u003e Tag"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "DishDatabase -[hidden]right-\u003e MealLog"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Tag -[hidden]right-\u003e TimeStamp"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "ModelManager --\u003e\"1\" Dish : filtered list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "FelixNWJ": 37
    }
  },
  {
    "path": "docs/diagrams/ReportClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "skinparam arrowColor COMMAND_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "skinparam classBackgroundColor COMMAND_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Package Model {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class CalorieBudget"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class MealLog"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Package Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class ReportCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "CLass CommandResult"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Package Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class ReportWindow"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Package Util {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class Statistics"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "ReportWindow .right.\u003e Statistics : gets values from \u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Statistics .up.\u003e MealLog : gets data from \u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Statistics .up.\u003e CalorieBudget : gets data from \u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "ReportCommand -\u003e CommandResult : returns a \u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "CommandResult -\u003e ReportWindow : creates a \u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "ReportWindow -[hidden]up-\u003e ReportCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 35
    }
  },
  {
    "path": "docs/diagrams/ReportCommand.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Participant \":Ui\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Participant \":CommandParser\" as parser PARSER_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Participant \"reportCommand:Command\" as command COMMAND_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Participant \"result:CommandResult\" as result RESULT_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"report\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"report\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "logic -[LOGIC_COLOR]\u003e parser : parseCommand(\"report\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "activate parser PARSER_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "create command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "parser -[PARSER_COLOR]\u003e command : ReportCommand()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "activate command COMMAND_COLOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "command -[COMMAND_COLOR]-\u003e parser : reportCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "deactivate command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "parser -[PARSER_COLOR]-\u003e logic : reportCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "deactivate parser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "logic -[LOGIC_COLOR]\u003e command : execute(model)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "activate command COMMAND_COLOR"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "create result"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "command -[COMMAND_COLOR]\u003e result : CommandResult(message, false, true, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "activate result RESULT_COLOR"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "result -[RESULT_COLOR]-\u003e command : result"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "deactivate result"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "command -[COMMAND_COLOR]-\u003e logic : result"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "deactivate command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "destroy command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "logic -[LOGIC_COLOR]-\u003e ui : result"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "ref over ui: generate ReportWindow."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 49
    }
  },
  {
    "path": "docs/diagrams/ReportCommandActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ":User executes \"report\" command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "if () then ([0 meals taken this month])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    :Error message shown to user;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    :Statistics are generated based on data in CaloFit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    :Report is shown to user based on the statistics generated;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 16
    }
  },
  {
    "path": "docs/diagrams/ReportWindow.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "mainframe **sd** generate ReportWindow"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Participant \":Ui\" as ui UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Participant \"reportWindow:ReportWindow\" as report UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Participant \"statistics:Statistics\" as statistics STATISTICS_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "ui -[UI_COLOR]\u003e ui : handleReport()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "activate ui UI_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "ui -[UI_COLOR_T1]\u003e logic : getStatistics()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : getStatistics()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "create statistics"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "model -[MODEL_COLOR]\u003e statistics : Statistics.generateStatistics(ObservableList\u003cMeal\u003e, CalorieBudget)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "activate statistics STATISTICS_COLOR"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "statistics -[STATISTICS_COLOR]-\u003e model : statistics"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "deactivate statistics"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic : statistics"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "logic -[LOGIC_COLOR]-\u003e ui : statistics"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "create report"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "ui -[UI_COLOR_T1]\u003e report : ReportWindow(statistics)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "activate report UI_COLOR"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "report -[UI_COLOR]-\u003e ui : reportWindow"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "deactivate report"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 44
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Interface DishDatabaseStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class JsonDishDatabaseStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "StorageManager o--\u003e DishDatabaseStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "JsonDishDatabaseStorage .left.|\u003e DishDatabaseStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "JsonDishDatabaseStorage .down.\u003e JsonSerializableDishDatabaseStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "JsonSerializableDishDatabaseStorage .right.\u003e JsonSerializableDish"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "JsonSerializableDish .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "FelixNWJ": 7
    }
  },
  {
    "path": "docs/diagrams/SuggestCommand.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Participant \":Ui\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Participant \":CommandParser\" as parser PARSER_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Participant \"suggestCommand:Command\" as command COMMAND_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Participant \":CalorieBudget\" as caloriebudget CALORIE_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "Participant \":MealLog\" as meallog MEALLOG_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"report\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"suggest\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "logic -[LOGIC_COLOR]\u003e parser : parseCommand(\"suggest\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "activate parser PARSER_COLOR"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "parser -[PARSER_COLOR]\u003e command : SuggestCommand()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "activate command COMMAND_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "command -[COMMAND_COLOR]-\u003e parser : suggestCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "deactivate command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "parser -[PARSER_COLOR]-\u003e logic : suggestCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "deactivate parser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "logic -[LOGIC_COLOR]\u003e command : execute(model)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "activate command COMMAND_COLOR"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "command -[COMMAND_COLOR]\u003e model : getRemainingCalories()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "model -[MODEL_COLOR]\u003e caloriebudget : budget.getCurrentBudget()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "activate caloriebudget CALORIE_COLOR"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "caloriebudget -[CALORIE_COLOR]\u003e model : remainingBudget"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "deactivate caloriebudget"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "loop number of dishes times"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "model -[MODEL_COLOR]\u003e meallog : getDish().getCalories().getValue()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "activate meallog MEALLOG_COLOR"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "meallog -[MEALLOG_COLOR]\u003e model : c"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "model -[MODEL_COLOR]\u003e model : deduct c from remainingBudget"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "deactivate meallog MEALLOG_COLOR"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "end"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "model -[MODEL_COLOR]\u003e command : remainingCalories"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "command -[COMMAND_COLOR]\u003e command : updateFilteredDishList()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "command -[COMMAND_COLOR]\u003e logic : filteredDishList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "logic -[LOGIC_COLOR]\u003e ui : filteredDishList"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "ui -[UI_COLOR]\u003e user : filteredDishList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "MauriceTXS": 64
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class BudgetBar"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class DishListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class MealListPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class DishCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class MealCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Class ReportWindow"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "MainWindow --\u003e ReportWindow"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "MainWindow *-down-\u003e DishListPanel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "MainWindow *-down-\u003e MealListPanel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "MainWindow *-down-\u003e BudgetBar"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "DishListPanel -down-\u003e DishCard"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "MealListPanel -down-\u003e MealCard"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "DishListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "MealListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "DishCard --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "MealCard --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "ReportWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "DishCard ..\u003e Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "MealCard ..\u003e Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "BudgetBar ..\u003e Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "DishListPanel -[hidden]left- MealListPanel"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "HelpWindow -[hidden]right- ReportWindow"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "BudgetBar -[hidden]right- MealListPanel"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "FelixNWJ": 23
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "!define PARSER_COLOR #Olive"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "!define COMMAND_COLOR #Coral"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "!define RESULT_COLOR #Purple"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "!define STATISTICS_COLOR #Silver"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "!define STATISTICS_COLOR_T2 #SlateGrey"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "!define CALORIE_COLOR #Purple"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "!define MEALLOG_COLOR #Silver"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "MauriceTXS": 5,
      "-": 75,
      "FelixNWJ": 9
    }
  },
  {
    "path": "docs/team/felixnwj.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d Felix Ng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d\u003d PROJECT: CaloFit"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "My team of 4 software engineering students and I were tasked with enhancing a basic desktop addressbook application(AddressBook - Level 3) for our Software Engineering project. We chose to morph"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "it into a calorie tracker cum food database system called CaloFit. This enhanced application allows health-conscious people or those who are aiming for a diet to set their calorie budget for the day; manage the meals that they take; find dishes based on keywords or their remaining calorie budget; and get data about their calorie intake progress through a report."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "CaloFit is a desktop application for tracking the calories that the user has taken from his or her meals over the course of using the application. +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "The user interacts with CaloFit using a Command Line Interface(CLI) that is represented by a box near the top of the application screen. This is where the user can type in their commands and press \"Enter\" on their keyboards to execute them. +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "It has a Graphical User Interface(GUI) created with JavaFX. The GUI is the main display that the user sees upon starting up CaloFit."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "This is what our project looks like as shown in Figure 1 below:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "image::PPPMain.png[]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Figure 1: The GUI for CaloFit."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "My role was to design and write the codes for the `report` feature. The following sections"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "illustrate these enhancements in more detail, as well as the relevant documentation I have added to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "the user and developer guides in relation to these enhancements."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "Note the following symbols and formatting used in this document:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "This symbol indicates important information."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "`report` A grey highlight(called a mark-up) indicates that this is a command that can be inputted into the command line and executed by the application."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "team project."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* *Major enhancement*: added *the ability to generate a Report*."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** What it does: creates a Report that displays the statistics calculated from the user\u0027s meal history for that particualar month."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** Justification: This feature gives purpose to the application as the user should be someone who wants to keep track of their calorie intake. By implementing this feature, the user is able to know their calorie intake for the month, as well as other statistics generated from it, whenever they want."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** Highlights: As virtually any form of statistical data can be generated from a user\u0027s meal history, the scope of the data calculated and shown to the user is not exhaustive. The statistics chosen to be calculated are decided based on the user stories and use cases that our team has considered and is linked here."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** Credits: {Calculation of statistics}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* *Minor enhancement*: added *automatic saving of the meal history of the user as a JavaScript Objection Notation(JSON) file*."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** What it does: The user\u0027s meal entries into CaloFit will be saved into a JSON file, allowing the user\u0027s meal history to be loaded upon starting up CaloFit."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** Justification: This small feature is crucial as we need to ensure that the user\u0027s meal log is saved in order to track his or her progress since he or she started using CaloFit."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** Credits: The methods and structure of converting a Class into a JSON file was taken from the original AddressBook-Level 3 and refactored for the purpose mentioned above."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dfelixnwj\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dFelixNWJ\u0026tabRepo\u003dAY1920S1-CS2103T-W11-4%2Fmain%5Bmaster%5D[Functional code]]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "*** Managed releases `v1.2.1`, `v1.3` and `v1.4` (3 releases) on GitHub."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "*** Overall project leader, scheduled meeting timings and summarised each meeting afterwards for dissemination to group members."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (https://github.com/FelixNWJ/ped/issues[List of bugs reported])"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "*** Set up Travis Continuous Integration for my Individual project and helped the team integrate it into the Team project."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "|_Given below are sections I contributed to the User Guide as we had to update the original AddressBook-Level3 User Guide with instructions for the enhancements that we had added. The following is an excerpt from our *CaloFit User Guide*, showing additions that I have made for the `report` feature. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "include::../UserGuide.adoc[tag\u003dreport]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide for the `report` feature. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dreport]"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 77
    }
  },
  {
    "path": "src/main/java/calofit/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 3,
      "-": 62
    }
  },
  {
    "path": "src/main/java/calofit/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/calofit/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.Timer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.Version;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.LogicManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.DishDatabase;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.ReadOnlyDishDatabase;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.meal.MealLog;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.ReadOnlyMealLog;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.storage.DishDatabaseStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.storage.JsonDishDatabaseStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.storage.JsonMealLogStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.storage.MealLogStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.storage.Storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.storage.StorageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.ui.Ui;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.ui.UiManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static final Duration TIME_UPDATE_PERIOD \u003d Duration.ofSeconds(10);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Timer timer \u003d new Timer(Platform::runLater);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private SimpleObjectProperty\u003cLocalDateTime\u003e nowProperty \u003d new SimpleObjectProperty\u003c\u003e(LocalDateTime.now());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing DishDatabase ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        DishDatabaseStorage dishDatabaseStorage \u003d new JsonDishDatabaseStorage(userPrefs.getDishDatabaseFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        MealLogStorage mealLogStorage \u003d new JsonMealLogStorage(userPrefs.getMealLogFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        storage \u003d new StorageManager(dishDatabaseStorage, mealLogStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        timer.registerPeriodic(TIME_UPDATE_PERIOD, () -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            nowProperty.set(LocalDateTime.now());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        model.nowProperty().bind(nowProperty);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ui \u003d new UiManager(logic, timer);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Read the current dish database from its saved file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param storage Storage handler object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param userPrefs User preference object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Dish database loaded from file, or a new instance if file is missing or invalid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private ReadOnlyDishDatabase loadDishDatabase(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Optional\u003cReadOnlyDishDatabase\u003e dishDatabaseOptional;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ReadOnlyDishDatabase initialData;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            dishDatabaseOptional \u003d storage.readDishDatabase();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            if (!dishDatabaseOptional.isPresent()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample DishDatabase\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return dishDatabaseOptional.orElseGet(SampleDataUtil::getSampleDishDatabase);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty DishDatabase\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return new DishDatabase();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty DishDatabase\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return new DishDatabase();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Loads the meal log from its saved file."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param storage Storage handler object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param userPrefs User preference object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Meal loaded from file, or a new instance if file is missing or invalidn"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private ReadOnlyMealLog loadMealLog(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Optional\u003cReadOnlyMealLog\u003e mealLogOptional;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        ReadOnlyMealLog initialData;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            mealLogOptional \u003d storage.readMealLog();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            if (!mealLogOptional.isPresent()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a empty MealLog\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return mealLogOptional.orElseGet(SampleDataUtil::getNewMealLog);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty MealLog\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return new MealLog();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty MealLog\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return new MealLog();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s dish database and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The data from the sample dish database will be used instead if {@code storage}\u0027s dish database is not found,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * or an empty dish database will be used instead if errors occur when reading {@code storage}\u0027s dish database."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ReadOnlyDishDatabase dishDb \u003d loadDishDatabase(storage, userPrefs);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        ReadOnlyMealLog mealLog \u003d loadMealLog(storage, userPrefs);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return new ModelManager(mealLog, dishDb, userPrefs);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty DishDatabase\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        logger.info(\"Starting DishDatabase \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Dish database ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 87,
      "MauriceTXS": 1,
      "-": 126,
      "FelixNWJ": 24
    }
  },
  {
    "path": "src/main/java/calofit/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/calofit/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/calofit/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final String LOG_FILE \u003d \"calofit.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/calofit/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static final String MESSAGE_INVALID_MEAL_DISPLAYED_INDEX \u003d \"The meal index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static final String MESSAGE_INVALID_MEAL_INDEX \u003d \"%d is an invalid index. \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            + \"Please make sure all indexes are valid.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //public static final String MESSAGE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static final String MESSAGE_DISHES_LISTED_OVERVIEW \u003d \"%1$d meals listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "fangpinsern": 5,
      "-": 10
    }
  },
  {
    "path": "src/main/java/calofit/commons/core/Timer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.concurrent.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.concurrent.ScheduledThreadPoolExecutor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Wraps a {@link java.util.Timer}, to run tasks on an arbitrary {@link Executor}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * This is based off a monotonic clock, and so is not affected by system time changes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class Timer {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private ScheduledThreadPoolExecutor exec \u003d new ScheduledThreadPoolExecutor(1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final Executor threadExecutor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Timer(Executor threadExecutor) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.threadExecutor \u003d threadExecutor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Schedule a periodic task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param period Task period"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param task Task function"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void registerPeriodic(Duration period, Runnable task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        exec.scheduleAtFixedRate(() -\u003e threadExecutor.execute(task),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            period.toMillis(), period.toMillis(), TimeUnit.MILLISECONDS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 30
    }
  },
  {
    "path": "src/main/java/calofit/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/calofit/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/calofit/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/calofit/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param message should have relevant information about the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 19,
      "FelixNWJ": 1
    }
  },
  {
    "path": "src/main/java/calofit/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.MainApp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/java/calofit/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/calofit/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/calofit/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/calofit/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/calofit/commons/util/ObservableListUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.binding.DoubleBinding;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.ObservableListBase;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.transformation.TransformationList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Utility class for working with JavaFx Observables."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class ObservableListUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Constructs an ObservableList of the results of applying the given function to the given list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * No values are stored or cached, and the function will be called (and backing list accessed)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * every time the returned list is accessed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param source Source list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param mapper Mapping function"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cT\u003e Target type"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cS\u003e Source type"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return ObservableList of mapped values"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static \u003cT, S\u003e ObservableList\u003cT\u003e lazyMap(ObservableList\u003c? extends S\u003e source,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                                                   ObservableValue\u003c? extends Function\u003c? super S, ? extends T\u003e\u003e mapper) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return new MappedList\u003c\u003e(source, mapper);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static \u003cT, S\u003e ObservableList\u003cT\u003e lazyMap(ObservableList\u003c? extends S\u003e source,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                                                   Function\u003c? super S, ? extends T\u003e mapper) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return new MappedList\u003c\u003e(source, new SimpleObjectProperty\u003c\u003e(mapper));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Represents an list updater function, given a source value and previously cached value."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cT\u003e Target type"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cS\u003e Source type"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public interface Updater\u003cT, S\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * Given a value in the source list and its index, produce a mapped value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * The previous cached value is given to support reuse, or null if no cached value existed previously."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * @param index List index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * @param source Source value"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * @param target Previous cached value (or null if none)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * @return New cached value"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        T update(int index, S source, T target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Constructs an ObservableList from a source list and a mapper function, both observable."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The returned list will update in response to changes in either the list or mapper."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The results will be cached to avoid re-evaluation."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param source Source list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param mapper Mapping function"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cT\u003e Target type"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cS\u003e Source type"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Mapped list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static \u003cT, S\u003e ObservableList\u003cT\u003e map(ObservableList\u003c? extends S\u003e source,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                                               ObservableValue\u003c? extends Function\u003c? super S, ? extends T\u003e\u003e mapper) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ObservableValue\u003cUpdater\u003cT, ? super S\u003e\u003e updater \u003d Bindings.createObjectBinding(() -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            Function\u003c? super S, ? extends T\u003e mapFunc \u003d mapper.getValue();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return (index, sourceVal, target) -\u003e mapFunc.apply(sourceVal);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }, mapper);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return new BoundList\u003c\u003e(source, updater);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Constructs an ObservableList from a source list and a mapper function, both observable."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The returned list will update in response to changes in either the list or mapper."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The results will be cached to avoid re-evaluation."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param source Source list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param mapper Mapping function"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cT\u003e Target type"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cS\u003e Source type"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Mapped list"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static \u003cT, S\u003e ObservableList\u003cT\u003e map(ObservableList\u003c? extends S\u003e source,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                                               Function\u003c? super S, ? extends T\u003e mapper) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Updater\u003cT, ? super S\u003e updater \u003d (index, sourceVal, target) -\u003e mapper.apply(sourceVal);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return new BoundList\u003c\u003e(source, updater);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Constructs an ObservableList from a source list and a mapper function, both observable."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The mapping function will be provided both the source value and index."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The returned list will update in response to changes in either the list or mapper."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The results will be cached to avoid re-evaluation."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param source Source list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param mapper Mapping function"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cT\u003e Target type"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cS\u003e Source type"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Mapped list"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static \u003cT, S\u003e ObservableList\u003cT\u003e mapWithIndex("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ObservableList\u003c? extends S\u003e source,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ObservableValue\u003c? extends BiFunction\u003cInteger, ? super S, ? extends T\u003e\u003e mapper) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ObservableValue\u003cUpdater\u003cT, ? super S\u003e\u003e updater \u003d Bindings.createObjectBinding(() -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            BiFunction\u003cInteger, ? super S, ? extends T\u003e mapFunc \u003d mapper.getValue();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return (index, sourceVal, target) -\u003e mapFunc.apply(index, sourceVal);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }, mapper);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return new BoundList\u003c\u003e(source, updater);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Constructs an ObservableList from an observable source list and a mapper function."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The mapping function will be provided both the source value and index."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The returned list will update in response to changes in the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The results will be cached to avoid re-evaluation."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param source Source list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param mapper Mapping function"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cT\u003e Target type"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cS\u003e Source type"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Mapped list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static \u003cT, S\u003e ObservableList\u003cT\u003e mapWithIndex("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ObservableList\u003c? extends S\u003e source,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        BiFunction\u003cInteger, ? super S, ? extends T\u003e mapper) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Updater\u003cT, ? super S\u003e updater \u003d (index, sourceVal, target) -\u003e mapper.apply(index, sourceVal);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return new BoundList\u003c\u003e(source, updater);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Constructs an ObservableList from an observable source list and an updater function."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The mapping function will be provided the source value and index, and the previously cached value."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The returned list will update in response to changes in the list and updater."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The results will be cached to avoid re-evaluation."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param source Source list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param updater Updater function"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cE\u003e Target type"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cF\u003e Source type"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Mapped list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static \u003cE, F\u003e ObservableList\u003cE\u003e mapUpdate("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ObservableList\u003c? extends F\u003e source,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ObservableValue\u003c? extends Updater\u003cE, ? super F\u003e\u003e updater) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return new BoundList\u003cE, F\u003e(source, updater);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Represents a mapped observable list, without no value caching."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cT\u003e Mapped element type"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cS\u003e Source element type"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static class MappedList\u003cT, S\u003e extends TransformationList\u003cT, S\u003e {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private ObjectProperty\u003cFunction\u003c? super S, ? extends T\u003e\u003e mapper;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private MappedList(ObservableList\u003c? extends S\u003e source,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                           ObservableValue\u003c? extends Function\u003c? super S, ? extends T\u003e\u003e mapper) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            super(source);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            this.mapper \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            this.mapper.bind(mapper);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            this.mapper.addListener(observable -\u003e onMapperChanged());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * Handles firing a whole-list update when the mapper changes."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private void onMapperChanged() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            fireChange(new ListChangeListener.Change\u003cT\u003e(ObservableListUtil.MappedList.this) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                private boolean ready \u003d true;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                public boolean next() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    boolean wasReady \u003d ready;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    ready \u003d false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    return wasReady;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                public void reset() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    ready \u003d true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                public int getFrom() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    return 0;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                public boolean wasUpdated() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                public int getTo() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    return size();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                public List\u003cT\u003e getRemoved() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    throw new IllegalStateException();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                protected int[] getPermutation() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    throw new IllegalStateException();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            });"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        protected void sourceChanged(ListChangeListener.Change\u003c? extends S\u003e c) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            Function\u003c? super S, ? extends T\u003e func \u003d mapper.get();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            fireChange(new WrappedChange\u003cS, T\u003e(this, c) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                protected T transformValue(S source) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    return func.apply(source);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            });"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public int getSourceIndex(int index) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public int getViewIndex(int index) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public T get(int i) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            //Re-evaluate function every time we call get()."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return mapper.get().apply(getSource().get(i));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public int size() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return getSource().size();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public ObjectProperty\u003cFunction\u003c? super S, ? extends T\u003e\u003e mapperProperty() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return mapper;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Represents a mapped list, wrapping a source list and caching the mapped values."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cT\u003e Mapped element type"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cS\u003e Source element type"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static class BoundList\u003cT, S\u003e extends TransformationList\u003cT, S\u003e {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private List\u003cT\u003e cachedValues;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private ObjectProperty\u003cObservableListUtil.Updater\u003cT, ? super S\u003e\u003e updater \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private BoundList(ObservableList\u003c? extends S\u003e source,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                          ObservableValue\u003c? extends ObservableListUtil.Updater\u003cT, ? super S\u003e\u003e updaterValue) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            this(source, updaterValue.getValue());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            this.updater.bind(updaterValue);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private BoundList(ObservableList\u003c? extends S\u003e source,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                          ObservableListUtil.Updater\u003cT, ? super S\u003e updater) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            super(source);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            this.updater.set(updater);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            this.updater.addListener(this::onUpdaterChanged);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            this.cachedValues \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            for (int i \u003d 0; i \u003c source.size(); i++) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                cachedValues.add(updater.update(i, source.get(i), null));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * Handles firing whole-list update changes when the updater function changes."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * @param unused"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private void onUpdaterChanged(Observable unused) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            ObservableListUtil.Updater\u003cT, ? super S\u003e func \u003d updater.get();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            List\u003c? extends S\u003e source \u003d getSource();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            for (int i \u003d 0; i \u003c cachedValues.size(); i++) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                T nextValue \u003d func.update(i, source.get(i), cachedValues.get(i));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                cachedValues.set(i, nextValue);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        protected void sourceChanged(ListChangeListener.Change\u003c? extends S\u003e c) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            //Here, we try to reuse the original cachedValues list as much as we can."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            //We avoid allocating a target list, unless we encounter an add/remove operation."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            //Hence, either we are in the middle of the source list, and have a fresh target,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            //or we have went past the end and are adding items, so target \u003d\u003d source."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            List\u003cT\u003e target \u003d null;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            int changeEnd \u003d 0;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            int elementDelta \u003d 0;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            ObservableListUtil.Updater\u003cT, ? super S\u003e func \u003d updater.get();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            List\u003c? extends S\u003e source \u003d getSource();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            beginChange();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            while (c.next()) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                if (target !\u003d null \u0026\u0026 target.size() \u003c cachedValues.size()) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    //Target list exists, and we skipped ahead to c.getFrom() in the original"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    //so we catch up and add the unchanged elements."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    target.addAll(cachedValues.subList(target.size(), c.getFrom()));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                changeEnd \u003d c.getTo();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                if (c.wasPermutated()) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    if (target !\u003d null) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        //Add directly to target, in permuted order."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        IntStream.range(c.getFrom(), c.getTo())"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                            .map(c::getPermutation)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                            .mapToObj(cachedValues::get)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                            .forEachOrdered(target::add);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        //Copy out the sublist, then put it back in permuted order."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        List\u003cT\u003e temp \u003d new ArrayList\u003c\u003e(cachedValues.subList(c.getFrom(), c.getTo()));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        for (int i \u003d c.getFrom(); i \u003c c.getTo(); i++) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                            int nextIndex \u003d c.getPermutation(i);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                            cachedValues.set(nextIndex, temp.get(i));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    //Manually regenerate the permutation indices array."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    //Original change value does not expose underlying array for reuse."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    int[] perm \u003d IntStream.range(c.getFrom(), c.getTo())"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        .map(c::getPermutation)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        .toArray();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    nextPermutation(c.getFrom(), c.getTo(), perm);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                } else if (c.wasUpdated()) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    for (int i \u003d c.getFrom(); i \u003c c.getTo(); i++) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        T current \u003d cachedValues.get(i);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        T next \u003d func.update(i, source.get(i), current);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        if (target !\u003d null) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                            target.add(next);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        nextUpdate(i);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    if (target \u003d\u003d null) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        if (c.getFrom() \u003e\u003d cachedValues.size()) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                            //We can directly reuse cachedValues, as we\u0027ve went past the end."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                            target \u003d cachedValues;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                            //Modification in middle of previous list, we need to allocate a fresh copy."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                            target \u003d new ArrayList\u003c\u003e(cachedValues.subList(0, c.getFrom()));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    if (c.wasRemoved()) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        //Here, c.getFrom() \u003c cachedValues.size()."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        //This means we aren\u0027t reusing cachedValues as target."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        List\u003cT\u003e changed \u003d cachedValues.subList(c.getFrom(), c.getFrom() + c.getRemovedSize());"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        nextRemove(c.getFrom(), new ArrayList\u003c\u003e(changed));"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        elementDelta +\u003d c.getRemovedSize();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    if (c.wasAdded()) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        //Here, we add to the target, no matter if it\u0027s the copy or the original."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        int pos \u003d c.getFrom();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        for (S sourceValue : c.getAddedSubList()) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                            //Use updater function to generate fresh value"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                            T nextValue \u003d func.update(pos, sourceValue, null);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                            target.add(nextValue);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                            pos++;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        nextAdd(c.getFrom(), c.getTo());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        elementDelta -\u003d c.getAddedSize();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            if (target !\u003d null) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                //If we copied the list, update our current cache to point to the copy."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                //Still safe if we didn\u0027t copy but added to end, as then cachedValues \u003d\u003d target."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                if (target !\u003d cachedValues) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    int validCachedSuffix \u003d changeEnd + elementDelta;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    if (validCachedSuffix \u003c cachedValues.size()) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        target.addAll(cachedValues.subList(validCachedSuffix, cachedValues.size()));"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                this.cachedValues \u003d target;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            endChange();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public int getSourceIndex(int index) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public int getViewIndex(int index) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public T get(int i) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return cachedValues.get(i);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public int size() {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return cachedValues.size();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Represents a concatenated pair of observable lists."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cE\u003e Element type"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static class ConcatList\u003cE\u003e extends ObservableListBase\u003cE\u003e {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private final ObservableList\u003c? extends E\u003e left;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private final ObservableList\u003c? extends E\u003e right;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private ConcatList(ObservableList\u003c? extends E\u003e left, ObservableList\u003c? extends E\u003e right) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            this.left \u003d left;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            this.right \u003d right;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            left.addListener((ListChangeListener\u003c? super E\u003e) c -\u003e this.onChanged(0, c));"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            right.addListener((ListChangeListener\u003c? super E\u003e) c -\u003e this.onChanged(left.size(), c));"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * Handles change events on the sublists."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * @param offset Offset of the target list"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * @param change Change event for the list"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         */"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private void onChanged(int offset, ListChangeListener.Change\u003c? extends E\u003e change) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            fireChange(new WrappedChange\u003cE, E\u003e(this, change) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                protected E transformValue(E source) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    return source;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                protected int transformIndex(int source) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    return source + offset;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            });"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public E get(int i) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            if (i \u003c left.size()) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                return left.get(i);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                return right.get(i - left.size());"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public int size() {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return left.size() + right.size();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static \u003cE\u003e ObservableList\u003cE\u003e concat(ObservableList\u003c? extends E\u003e left, ObservableList\u003c? extends E\u003e right) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return new ConcatList\u003c\u003e(left, right);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Wrapper for a {@link ListChangeListener.Change} in the source list."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cS\u003e Source element type"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cT\u003e Target element type"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private abstract static class WrappedChange\u003cS, T\u003e extends ListChangeListener.Change\u003cT\u003e {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private final ListChangeListener.Change\u003c? extends S\u003e c;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private List\u003cT\u003e cachedRemovals;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private int[] cachedPermutation;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public WrappedChange(ObservableList\u003cT\u003e source, ListChangeListener.Change\u003c? extends S\u003e c) {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            super(source);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            this.c \u003d c;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public boolean next() {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            this.cachedPermutation \u003d null;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            this.cachedRemovals \u003d null;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return c.next();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public void reset() {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            c.reset();"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public int getFrom() {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return transformIndex(c.getFrom());"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public int getTo() {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return transformIndex(c.getTo());"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public boolean wasUpdated() {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return c.wasUpdated();"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public List\u003cT\u003e getRemoved() {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            if (cachedRemovals \u003d\u003d null) {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                cachedRemovals \u003d c.getRemoved().stream()"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    .map(this::transformValue)"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    .collect(Collectors.toUnmodifiableList());"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return cachedRemovals;"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        protected abstract T transformValue(S source);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        protected int transformIndex(int source) {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return source;"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public boolean wasPermutated() {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return c.wasPermutated();"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        protected int[] getPermutation() {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            if (cachedPermutation \u003d\u003d null) {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                cachedPermutation \u003d new int[getTo() - getFrom()];"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                for (int i \u003d getFrom(); i \u003c getTo(); i++) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    cachedPermutation[i - getTo()] \u003d transformIndex(c.getPermutation(i));"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return cachedPermutation;"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Computes the sum of an observable list of doubles."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * This method will watch for list updates and update the sum accordingly."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param values List of values to sum"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Sum of values"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static DoubleBinding sum(ObservableList\u003cDouble\u003e values) {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Bindings.createDoubleBinding(() -\u003e {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            double total \u003d 0;"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            for (double val : values) {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                total +\u003d val;"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return total;"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }, values);"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 558
    }
  },
  {
    "path": "src/main/java/calofit/commons/util/ObservableUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.function.DoubleBinaryOperator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.function.DoubleFunction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.function.DoubleUnaryOperator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.function.ToDoubleFunction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.binding.DoubleExpression;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.binding.ObjectBinding;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.value.ObservableDoubleValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Utility class for working with JavaFx Observables."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class ObservableUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Given an observable value, compute an observable result using the function."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param source Source value"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param op Mapper function"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cS\u003e Source type"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cT\u003e Target type"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Observable result value"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static \u003cS, T\u003e ObjectBinding\u003cT\u003e map(ObservableValue\u003cS\u003e source, Function\u003c? super S, ? extends T\u003e op) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Bindings.createObjectBinding(() -\u003e op.apply(source.getValue()), source);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Given an observable value, compute an observable result using the function."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Unlike {@link ObservableUtil#map(ObservableValue, Function)},"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * this does not update the mapped expression if the source value remains equals."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param source Source value"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param op Mapper function"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cS\u003e Source type"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cT\u003e Target type"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Observable result value"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static \u003cS, T\u003e ObjectBinding\u003cT\u003e cachingMap(ObservableValue\u003cS\u003e source, Function\u003c? super S, ? extends T\u003e op) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return new ObjectBinding\u003cT\u003e() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            private T value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            private boolean evaluated \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                source.addListener((observable, oldSource, newSource) -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    T nextValue \u003d op.apply(newSource);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    if (!evaluated || !Objects.equals(value, nextValue)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        value \u003d nextValue;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        invalidate();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            protected T computeValue() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                if (!evaluated) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    value \u003d op.apply(source.getValue());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    evaluated \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        };"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Given an observable double value, compute an observable double result."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param expression Source value"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param op Mapper function"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Observable result"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static DoubleExpression mapDouble(ObservableDoubleValue expression, DoubleUnaryOperator op) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Bindings.createDoubleBinding(() -\u003e op.applyAsDouble(expression.get()), expression);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Given an observable double value, compute an observable result."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param expression Source value"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param op Mapper function"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param \u003cT\u003e Target type"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Observable result"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static \u003cT\u003e ObjectBinding\u003cT\u003e mapToObject(ObservableDoubleValue expression, DoubleFunction\u003cT\u003e op) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Bindings.createObjectBinding(() -\u003e op.apply(expression.get()), expression);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Given two observable values, compute an observable result."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param left First source value"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param right Second source value"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param op Mapper function"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Observable result"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static DoubleExpression liftA2(ObservableDoubleValue left, ObservableDoubleValue right,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                                          DoubleBinaryOperator op) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Bindings.createDoubleBinding(() -\u003e op.applyAsDouble(left.get(), right.get()), left, right);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Represents a function that takes 3 doubles and returns a double."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public interface DoubleTernaryOperator {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        double apply(double a, double b, double c);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Computes an observable value, given the values of 3 other observable values."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param a First value"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param b Second value"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param c Third value"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param op Function computing the result from the values of the observables."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Observable value representing the result"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static DoubleExpression liftA3(ObservableDoubleValue a, ObservableDoubleValue b, ObservableDoubleValue c,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                                          DoubleTernaryOperator op) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Bindings.createDoubleBinding(() -\u003e op.apply(a.get(), b.get(), c.get()), a, b, c);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static \u003cT\u003e DoubleExpression mapToDouble(ObservableValue\u003cT\u003e expression, ToDoubleFunction\u003cT\u003e op) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Bindings.createDoubleBinding(() -\u003e op.applyAsDouble(expression.getValue()), expression);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 123
    }
  },
  {
    "path": "src/main/java/calofit/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/calofit/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.ReadOnlyDishDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.meal.Meal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.util.Statistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns the DishDatabase."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @see Model#getDishDatabase()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    ReadOnlyDishDatabase getDishDatabase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of dishes */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    ObservableList\u003cDish\u003e getFilteredDishList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns the user prefs\u0027 dish database file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    Path getDishDatbaseFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns a list of meals that has been consumed today."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    ObservableList\u003cMeal\u003e getTodayMealList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns the {@code Statistics} object that wraps around the data in CaloFit to be displayed to the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    Statistics getStatistics();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns the {@code Model} that the {@code Logic} is operating on."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    Model getModel();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 25,
      "FelixNWJ": 12,
      "-": 31
    }
  },
  {
    "path": "src/main/java/calofit/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.ReadOnlyDishDatabase;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.meal.Meal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.util.Statistics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final CommandParser commandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Command command \u003d commandParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            storage.saveDishDatabase(model.getDishDatabase());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            storage.saveMealLog(model.getMealLog());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public ReadOnlyDishDatabase getDishDatabase() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return model.getDishDatabase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public ObservableList\u003cDish\u003e getFilteredDishList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return model.getFilteredDishList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public ObservableList\u003cMeal\u003e getTodayMealList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return model.getTodayMealList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Path getDishDatbaseFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return model.getDishDatabaseFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return model.getStatistics();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 40,
      "FelixNWJ": 7,
      "-": 50
    }
  },
  {
    "path": "src/main/java/calofit/logic/NotificationHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "package calofit.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import calofit.model.util.Notification;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": " * Notification Helper."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "public class NotificationHelper {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"notification\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public static final String MESSAGE_BREAKFAST \u003d \"Looks like you have missed your breakfast,\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        + \" please take some time out to eat your breakfast!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public static final String MESSAGE_LUNCH \u003d \"Looks like you have missed your lunch,\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        + \" please take some time out to eat your lunch!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public static final String MESSAGE_DINNER \u003d \"Looks like you have missed your dinner,\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        + \" please take some time out to eat your dinner!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "     * Check the meals for period of the day"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "     * @param model Model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "     * @return Optional String"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public static Optional\u003cString\u003e execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        Notification notification \u003d new Notification();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        if (model.getMealLog().getTodayMeals().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            if (!notification.eatenBreakfast()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "                return Optional.of(MESSAGE_BREAKFAST);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            int lastIndex \u003d model.getMealLog().getTodayMeals().size() - 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            if (!notification.eatenLunch(model.getMealLog().getTodayMeals().get("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "                lastIndex).getTimestamp())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "                return Optional.of(MESSAGE_LUNCH);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "                if (!notification.eatenDinner(model.getMealLog().getTodayMeals().get("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "                    lastIndex).getTimestamp())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "                    return Optional.of(MESSAGE_DINNER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MauriceTXS": 50
    }
  },
  {
    "path": "src/main/java/calofit/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static calofit.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import calofit.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import calofit.model.dish.Calorie;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import calofit.model.dish.exceptions.DuplicateDishException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import calofit.model.meal.Meal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import calofit.model.meal.MealLog;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import calofit.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import calofit.model.util.Timestamp;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Adds a dish to the dish database."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a meals to the meal list below. \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            + \"[\" + PREFIX_CALORIES + \"CALORIES] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            + \"OR \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            + \"INDEX (must be a positive integer between 1 and 2 billion that is in the suggested meal list) \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            + \"Example: \\n\" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            + PREFIX_NAME + \"Carbonara \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            + PREFIX_CALORIES + \"300 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            + PREFIX_TAG + \"salty \\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            + \"OR \\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New meal added to meal log: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEAL \u003d \"This dish already exists in the dish database\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static final String MESSAGE_MEAL_NOT_IN_DATABASE \u003d \"This dish is not in our database. \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            + \"Please update the calories using the c/ \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            + \"calories set to 700 by default\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static final int DEFAULT_MEAL_CALORIE \u003d 700;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Dish toAdd;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private int dishNumber;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private boolean isNumber \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private LinkedList\u003cInteger\u003e dishIntList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private boolean isList \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Dish}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public AddCommand(Dish dish) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        requireNonNull(dish);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        toAdd \u003d dish;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public AddCommand() {}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public AddCommand(int dishNumber) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        requireNonNull(dishNumber);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.dishNumber \u003d dishNumber;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.isNumber \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public AddCommand(LinkedList\u003cInteger\u003e dishIntList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        requireNonNull(dishIntList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.dishIntList \u003d dishIntList;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.isList \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        MealLog mealLog \u003d model.getMealLog();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        if (isList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            String addedDishesToString \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            LinkedList\u003cMeal\u003e toBeAddedMealList \u003d new LinkedList\u003cMeal\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            for (int i \u003d 0; i \u003c dishIntList.size(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                int dishInt \u003d dishIntList.get(i);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                if (dishInt \u003c\u003d 0 || dishInt \u003e model.getFilteredDishList().size()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    throw new CommandException(String.format(Messages.MESSAGE_INVALID_MEAL_INDEX, dishInt));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    Dish wantToAdd \u003d model.getFilteredDishList().get(dishInt - 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    Meal toAddMeal \u003d new Meal(wantToAdd, new Timestamp(LocalDateTime.now()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    toBeAddedMealList.add(toAddMeal);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    //mealLog.addMeal(toAddMeal);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    addedDishesToString \u003d addedDishesToString + \"\\n\" + (i + 1) + \". \" + wantToAdd.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            mealLog.addListOfMeals(toBeAddedMealList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, addedDishesToString));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            Dish wantToAdd \u003d toAdd;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            if (model.hasDish(wantToAdd)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                Meal toAddMeal \u003d new Meal(wantToAdd, new Timestamp(LocalDateTime.now()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                mealLog.addMeal(toAddMeal);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, wantToAdd));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                if (model.hasDishName(wantToAdd.getName())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        \u0026\u0026 !wantToAdd.getCalories().equals(Calorie.UNKNOWN_CALORIE)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    //case where the dishname is in the dishDB and the calorie tag is used"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    model.addDish(wantToAdd);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    Meal toAddMeal \u003d new Meal(wantToAdd, new Timestamp(LocalDateTime.now()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    mealLog.addMeal(toAddMeal);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                } else if (model.hasDishName(wantToAdd.getName())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        \u0026\u0026 wantToAdd.getCalories().equals(Calorie.UNKNOWN_CALORIE)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    // Case where the dish name is in the dishDB and the calorie tag is not used"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    Set\u003cTag\u003e newTag \u003d wantToAdd.getTags();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    wantToAdd \u003d model.getDishByName(toAdd.getName());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        model.addDish(wantToAdd);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    } catch (DuplicateDishException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        System.out.println(\"There is a duplicate dish\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    Set\u003cTag\u003e combineNewAndOldTags \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    combineNewAndOldTags.addAll(wantToAdd.getTags());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    combineNewAndOldTags.addAll(newTag);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    Dish newDish \u003d new Dish(wantToAdd.getName(), wantToAdd.getCalories(), combineNewAndOldTags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    wantToAdd \u003d newDish;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    Meal toAddMeal \u003d new Meal(newDish, new Timestamp(LocalDateTime.now()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    mealLog.addMeal(toAddMeal);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                } else if (!model.hasDishName(wantToAdd.getName())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                        \u0026\u0026 wantToAdd.getCalories().equals(Calorie.UNKNOWN_CALORIE)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    // If the meal is not in the dishDB and does not have a calorie tag,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    // the dish will be added to the dishDB with a default calorie of 700"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    // and added to the meal log with a default value of 700 as well"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    Dish mealNonNegativeCal \u003d new Dish(wantToAdd.getName(), new Calorie(DEFAULT_MEAL_CALORIE),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                            wantToAdd.getTags());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    wantToAdd \u003d mealNonNegativeCal;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    model.addDish(mealNonNegativeCal);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    Meal toAddMeal \u003d new Meal(mealNonNegativeCal, new Timestamp(LocalDateTime.now()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    mealLog.addMeal(toAddMeal);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    model.addDish(wantToAdd);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    Meal toAddMeal \u003d new Meal(wantToAdd, new Timestamp(LocalDateTime.now()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    mealLog.addMeal(toAddMeal);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //model.addDish(toAdd);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, wantToAdd));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 15,
      "fangpinsern": 121,
      "-": 32,
      "FelixNWJ": 2
    }
  },
  {
    "path": "src/main/java/calofit/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/calofit/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**Report should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private final boolean showReport;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private final boolean isExit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean showReport, boolean isExit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.showReport \u003d showReport;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public boolean isShowReport() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return showReport;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \u0026\u0026 showReport \u003d\u003d otherCommandResult.showReport"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \u0026\u0026 isExit \u003d\u003d otherCommandResult.isExit;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, showReport, isExit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 65,
      "FelixNWJ": 14
    }
  },
  {
    "path": "src/main/java/calofit/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//import calofit.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import calofit.model.meal.Meal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Deletes a dish identified using it\u0027s displayed index from the dish database."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            + \": Deletes the dish identified by the index number used in the displayed dish list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            + \"Parameters: INDEX(S) (must be a positive integer between 1 and 2 billion that is in the meal list)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static final String MESSAGE_DELETE_MEAL_SUCCESS \u003d \"Deleted Meal: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private List\u003cInteger\u003e listOfIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private boolean isList \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public DeleteCommand(List\u003cInteger\u003e listOfIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.listOfIndex \u003d listOfIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        this.isList \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        ObservableList\u003cMeal\u003e lastShownList \u003d model.getMealLog().getTodayMeals();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        String listOfMealToDeleteToString \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        int indexCounter \u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Collections.sort(listOfIndex, Comparator.reverseOrder());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        for (int lastIndex : listOfIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            if (lastIndex \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                throw new CommandException(String.format(Messages.MESSAGE_INVALID_MEAL_INDEX, lastIndex + 1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            Meal mealToDelete \u003d lastShownList.get(lastIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            model.removeMeal(mealToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            listOfMealToDeleteToString \u003d listOfMealToDeleteToString + \"\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    + indexCounter + \". \" + mealToDelete.getDish();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            indexCounter++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MEAL_SUCCESS, listOfMealToDeleteToString));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //    if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //        throw new CommandException(Messages.MESSAGE_INVALID_MEAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //    Meal mealToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //    model.getMealLog().removeMeal(mealToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //    return new CommandResult(String.format(MESSAGE_DELETE_MEAL_SUCCESS, mealToDelete.getDish().getName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                \u0026\u0026 listOfIndex.equals(((DeleteCommand) other).listOfIndex)); // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 9,
      "fangpinsern": 46,
      "-": 28
    }
  },
  {
    "path": "src/main/java/calofit/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static calofit.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import static calofit.model.Model.PREDICATE_SHOW_DEFAULT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.dish.Calorie;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import calofit.model.meal.Meal;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Edits the details of an existing dish in the dish database."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the dish identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            + \"by the index number used in the displayed dish list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            + \"[\" + PREFIX_CALORIES + \"CALORIES] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static final String MESSAGE_EDIT_MEAL_SUCCESS \u003d \"Edited Meal: from %1$s to %2$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static final String MESSAGE_EDIT_TAGS_SUCCESS \u003d \"Tags have been updated!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEAL \u003d \"This dish already exists in the dish database.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final EditDishDescriptor editDishDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param index of the dish in the filtered dish list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param editDishDescriptor details to edit the dish with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public EditCommand(Index index, EditDishDescriptor editDishDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        requireNonNull(editDishDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.editDishDescriptor \u003d new EditDishDescriptor(editDishDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        ObservableList\u003cMeal\u003e lastShownList \u003d model.getMealLog().getTodayMeals();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Meal mealToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Dish dishPointer \u003d mealToEdit.getDish();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        // Original Information. If may be changed down the line"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Name updatedName \u003d dishPointer.getName();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Calorie updatedCalories \u003d dishPointer.getCalories();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        updatedTags.addAll(dishPointer.getTags());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        boolean isTagsEmpty \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        if (editDishDescriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            if (!editDishDescriptor.getTags().get().isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                updatedTags.addAll(editDishDescriptor.getTags().get());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                isTagsEmpty \u003d true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                updatedTags \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        // Directly update the meal to the one in the dish db"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        boolean isDishUpdated \u003d false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Dish updatedDish \u003d dishPointer;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        if (editDishDescriptor.getName().isPresent()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                \u0026\u0026 editDishDescriptor.getCalories().isPresent()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                \u0026\u0026 editDishDescriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            updatedName \u003d editDishDescriptor.getName().get();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            updatedCalories \u003d editDishDescriptor.getCalories().get();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            updatedTags \u003d editDishDescriptor.getTags().get();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            updatedDish \u003d new Dish(updatedName, updatedCalories, updatedTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            isDishUpdated \u003d true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        } else if (editDishDescriptor.getName().isPresent()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                \u0026\u0026 editDishDescriptor.getCalories().isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            // Check if both name tags and calorie tags are used."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            updatedName \u003d editDishDescriptor.getName().get();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            updatedCalories \u003d editDishDescriptor.getCalories().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //if (model.hasDish(new Dish(updatedName, updatedCalories))) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    updatedDish \u003d model.getDish(new Dish(updatedName, updatedCalories));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    isDishUpdated \u003d true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        } else if (editDishDescriptor.getName().isPresent()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            // Check if only name tag is used"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            updatedName \u003d editDishDescriptor.getName().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            // Check if name is present in the dishDB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            // If not present, do not do anything"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //if (model.hasDishName(updatedName)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    updatedDish \u003d model.getDishByName(updatedName);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    updatedTags \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    updatedTags.addAll(updatedDish.getTags());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    if (isTagsEmpty) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //        updatedTags \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    } else if (editDishDescriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //        updatedTags.addAll(editDishDescriptor.getTags().get());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    updatedCalories \u003d updatedDish.getCalories();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    updatedName \u003d updatedDish.getName();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    updatedDish \u003d new Dish(updatedName, updatedCalories, updatedTags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    isDishUpdated \u003d true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        } else if (editDishDescriptor.getCalories().isPresent()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            // Check if only calorie tag is used"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            updatedCalories \u003d editDishDescriptor.getCalories().get();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //if (model.hasDish(new Dish(updatedName, updatedCalories))) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    updatedDish \u003d model.getDish(new Dish(updatedName, updatedCalories));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    updatedTags \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    updatedTags.addAll(updatedDish.getTags());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    if (isTagsEmpty) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //        updatedTags \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    } else if (editDishDescriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //        updatedTags.addAll(editDishDescriptor.getTags().get());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    updatedCalories \u003d updatedDish.getCalories();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    updatedName \u003d updatedDish.getName();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    updatedDish \u003d new Dish(updatedName, updatedCalories, updatedTags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //    isDishUpdated \u003d true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            //}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Dish editedDish;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        if (isDishUpdated) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            editedDish \u003d updatedDish;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            editedDish \u003d new Dish(updatedName, updatedCalories, updatedTags);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Meal editedMeal \u003d new Meal(editedDish, mealToEdit.getTimestamp());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        if (!model.hasDish(editedDish)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            model.addDish(editedDish);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        model.getMealLog().setMeal(mealToEdit, editedMeal);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        model.setDishFilterPredicate(PREDICATE_SHOW_DEFAULT);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MEAL_SUCCESS, mealToEdit, editedMeal));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Creates and returns a {@code Dish} with the details of {@code dishToEdit}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * edited with {@code editDishDescriptor}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static Dish createEditedDish(Dish dishToEdit, EditDishDescriptor editDishDescriptor) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assert dishToEdit !\u003d null;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Name updatedName;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Calorie updatedCalories;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Set\u003cTag\u003e updatedTags;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Optional\u003cName\u003e updatedNameOptional \u003d editDishDescriptor.getName();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        if (updatedNameOptional.isPresent()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            updatedName \u003d updatedNameOptional.get();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            updatedCalories \u003d editDishDescriptor.getCalories().orElse(dishToEdit.getCalories());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            updatedTags \u003d editDishDescriptor.getTags().orElse(dishToEdit.getTags());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            updatedName \u003d dishToEdit.getName();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            updatedCalories \u003d editDishDescriptor.getCalories().orElse(dishToEdit.getCalories());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            updatedTags \u003d editDishDescriptor.getTags().orElse(dishToEdit.getTags());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new Dish(updatedName, updatedCalories, updatedTags);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                \u0026\u0026 editDishDescriptor.equals(e.editDishDescriptor);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Stores the details to edit the dish with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * corresponding field value of the dish."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static class EditDishDescriptor {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        private Calorie calories;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public EditDishDescriptor() {}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public EditDishDescriptor(EditDishDescriptor toCopy) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            setCalories(toCopy.calories);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, calories, tags);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        public void setCalories(Calorie calories) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            this.calories \u003d calories;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        public Optional\u003cCalorie\u003e getCalories() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return Optional.ofNullable(calories);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            if (!(other instanceof EditDishDescriptor)) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            EditDishDescriptor e \u003d (EditDishDescriptor) other;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    \u0026\u0026 getCalories().equals(e.getCalories())"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 43,
      "fangpinsern": 117,
      "MauriceTXS": 2,
      "-": 121,
      "FelixNWJ": 16
    }
  },
  {
    "path": "src/main/java/calofit/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Dish database as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 3,
      "-": 15,
      "FelixNWJ": 1
    }
  },
  {
    "path": "src/main/java/calofit/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Finds and lists all persons in dish database whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all dishes whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" mushroom\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        model.setDishFilterPredicate(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                String.format(Messages.MESSAGE_DISHES_LISTED_OVERVIEW, model.getFilteredDishList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 7,
      "MauriceTXS": 1,
      "-": 33,
      "FelixNWJ": 1
    }
  },
  {
    "path": "src/main/java/calofit/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 2,
      "-": 18,
      "FelixNWJ": 1
    }
  },
  {
    "path": "src/main/java/calofit/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import static calofit.model.Model.PREDICATE_SHOW_DEFAULT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Lists all persons in the dish database to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all dishes\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        model.setDishFilterPredicate(PREDICATE_SHOW_DEFAULT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 6,
      "MauriceTXS": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/calofit/logic/commands/ReportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Generates a statistical report containing various data."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class ReportCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"report\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Report has been generated\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            \"You currently have no meals in CaloFit for this month. Get Started! :)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns a {@code CommandResult} that indicates that a report is to be generated by the {@code Ui} of CaloFit."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * This indication is done through the boolean showReport."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param model is the {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the CommandResult of the ReportCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws CommandException if there are no meals in the MealLog in the current month."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if (model.getMealLog().getCurrentMonthMeals().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, true, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 36
    }
  },
  {
    "path": "src/main/java/calofit/logic/commands/SetBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Calorie;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Sets the current calorie budget value."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class SetBudgetCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Calorie budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public SetBudgetCommand(Calorie calories) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.budget \u003d calories;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        model.getCalorieBudget().setCurrentBudget(budget.getValue());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return new CommandResult(String.format(\"Budget set to %d!\", budget.getValue()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        SetBudgetCommand that \u003d (SetBudgetCommand) o;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Objects.equals(budget, that.budget);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Objects.hash(budget);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 41
    }
  },
  {
    "path": "src/main/java/calofit/logic/commands/SuggestCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": " * Suggest meal for user according to calorie budget left."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "public class SuggestCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"suggest\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The suggest feature has been toggled.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        int remain \u003d model.getRemainingCalories();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        model.setDishFilterPredicate(null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MauriceTXS": 23
    }
  },
  {
    "path": "src/main/java/calofit/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/calofit/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static calofit.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.dish.Calorie;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CALORIES, PREFIX_TAG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            String[] argsArr \u003d args.split(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            LinkedList\u003cInteger\u003e dishIntList \u003d new LinkedList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            if (argsArr.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            for (int i \u003d 1; i \u003c argsArr.length; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                // Check if are they all numbers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                int dishNumber \u003d Integer.parseInt(argsArr[i]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                dishIntList.add(dishNumber);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            return new AddCommand(dishIntList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            System.out.println(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    || argMultimap.getAllValues(PREFIX_NAME).size() !\u003d 1"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    || argMultimap.getAllValues(PREFIX_CALORIES).size() \u003e 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            Calorie calories;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            if (argMultimap.getValue(PREFIX_CALORIES).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                calories \u003d ParserUtil.parseCalorie(argMultimap.getValue(PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                calories \u003d Calorie.UNKNOWN_CALORIE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            Dish dish \u003d new Dish(name, calories, tagList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return new AddCommand(dish);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 15,
      "fangpinsern": 29,
      "-": 30,
      "FelixNWJ": 4
    }
  },
  {
    "path": "src/main/java/calofit/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Check that all prefixes are amongst the given prefixes, and throws an {@link ParseException} otherwise."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The {@value messageProducer} function is given the set of unknown tags,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * and should produce the message returned in the error."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param messageProducer Error message producer"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param prefixes Allowed prefixes"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @throws ParseException Thrown if any unknown prefixes are detected."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void checkAllowedPrefixes(Function\u003c? super Set\u003cPrefix\u003e, ? extends String\u003e messageProducer,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                                     Prefix... prefixes) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Set\u003cPrefix\u003e allowed \u003d Stream.of(prefixes).collect(Collectors.toCollection(HashSet::new));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Set\u003cPrefix\u003e parsed \u003d new HashSet\u003c\u003e(argMultimap.keySet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        parsed.removeAll(allowed);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (getPreamble().isBlank()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            parsed.remove(new Prefix(\"\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (!parsed.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                messageProducer.apply(parsed)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 32,
      "-": 59
    }
  },
  {
    "path": "src/main/java/calofit/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * respective argument values. All prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static ArgumentMultimap tokenizeAny(String argsString) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Pattern argPat \u003d Pattern.compile(\"\\\\w+/\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Matcher matcher \u003d argPat.matcher(argsString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ArgumentMultimap map \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        String curPrefix \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        boolean hasNextArg;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        int cur \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            hasNextArg \u003d matcher.find();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            int end \u003d hasNextArg ? matcher.start() : argsString.length();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            String argValue \u003d argsString.substring(cur, end).trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            System.out.println(curPrefix + \": \" + argValue);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            map.put(new Prefix(curPrefix), argValue);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            if (hasNextArg) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                curPrefix \u003d matcher.group(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                cur \u003d matcher.end();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        } while (hasNextArg);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 33,
      "-": 147
    }
  },
  {
    "path": "src/main/java/calofit/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Prefix PREFIX_CALORIES \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 11,
      "FelixNWJ": 1
    }
  },
  {
    "path": "src/main/java/calofit/logic/parser/CommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import calofit.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        case ReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return new ReportCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        case SuggestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            return new SuggestCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        case \"set\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return new SetBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 16,
      "MauriceTXS": 4,
      "-": 59,
      "FelixNWJ": 4
    }
  },
  {
    "path": "src/main/java/calofit/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            args.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            String[] argsArr \u003d args.split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            Set\u003cInteger\u003e setOfArgs \u003d new HashSet\u003cInteger\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            for (int i \u003d 1; i \u003c argsArr.length; i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(argsArr[i]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                setOfArgs.add(index.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            return new DeleteCommand(new ArrayList\u003c\u003e(setOfArgs));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 5,
      "fangpinsern": 12,
      "-": 22
    }
  },
  {
    "path": "src/main/java/calofit/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static calofit.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CALORIES, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        EditCommand.EditDishDescriptor editDishDescriptor \u003d new EditCommand.EditDishDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            editDishDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CALORIES).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            editDishDescriptor.setCalories(ParserUtil.parseCalorie(argMultimap.getValue(PREFIX_CALORIES).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editDishDescriptor::setTags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (!editDishDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return new EditCommand(index, editDishDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 13,
      "-": 56,
      "FelixNWJ": 4
    }
  },
  {
    "path": "src/main/java/calofit/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/calofit/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/calofit/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.dish.Calorie;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer or too large.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Parses {@code name} which is a string into a {@code Name}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param name is the description that we want to convert into a {@code Name} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid or greater than 30 characters in length."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if (trimmedName.length() \u003e 30) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new ParseException(Name.LENGTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Parses a {@code String name} into a {@code Calorie}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static Calorie parseCalorie(String calories) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        requireNonNull(calories);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String trimmedCalorie \u003d calories.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        if (!Calorie.isValidCalorie(trimmedCalorie)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            throw new ParseException(Calorie.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        int value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            value \u003d Integer.parseInt(trimmedCalorie);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            throw new ParseException(Calorie.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return new Calorie(value);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 12,
      "fangpinsern": 5,
      "-": 76,
      "FelixNWJ": 10
    }
  },
  {
    "path": "src/main/java/calofit/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/calofit/logic/parser/SetBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.SetBudgetCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Calorie;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Parses input arguments and creates a new {@link SetBudgetCommand} object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class SetBudgetCommandParser implements Parser\u003cSetBudgetCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static final String MISSING_CALORIE_FIELD \u003d \"Missing calorie field!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public SetBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            throw new ParseException(MISSING_CALORIE_FIELD);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Calorie calories \u003d ParserUtil.parseCalorie(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return new SetBudgetCommand(calories);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 24
    }
  },
  {
    "path": "src/main/java/calofit/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/calofit/model/CalorieBudget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.NavigableMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.OptionalInt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.SortedMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.binding.DoubleExpression;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Represents a historical record of calorie budget settings."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class CalorieBudget {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private NavigableMap\u003cLocalDate, Integer\u003e budgetHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private ObservableMap\u003cLocalDate, Integer\u003e observableHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private DoubleExpression currentBudget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private SimpleObjectProperty\u003cLocalDate\u003e todayProperty \u003d new SimpleObjectProperty\u003c\u003e(LocalDate.now());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Construct an empty {@link CalorieBudget}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public CalorieBudget() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.budgetHistory \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.observableHistory \u003d FXCollections.observableMap(budgetHistory);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.currentBudget \u003d Bindings.createDoubleBinding(() -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            budgetHistory.isEmpty()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                ? Double.POSITIVE_INFINITY"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                : (double) budgetHistory.floorEntry(todayProperty.get()).getValue(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            observableHistory, todayProperty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Utility method to extract an {@link OptionalInt} from a map entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param entry Map entry to extract from."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Value, or {@link OptionalInt::empty} if null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private OptionalInt toOptional(Map.Entry\u003cLocalDate, Integer\u003e entry) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (entry \u003d\u003d null || entry.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return OptionalInt.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return OptionalInt.of(entry.getValue());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Get the current budget set by the user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Budget set by the user, or {@link OptionalInt::empty} if unset."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public OptionalInt getCurrentBudget() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return toOptional(budgetHistory.lastEntry());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Get the budget set by the user, set at the given date."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Budget set by the user, or {@link OptionalInt::empty} if unset."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public OptionalInt getBudgetAt(LocalDate date) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return toOptional(budgetHistory.floorEntry(date));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Sets a new budget value, taking effect from today onwards."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param budget New budget value"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setCurrentBudget(int budget) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        observableHistory.put(LocalDate.now(), budget);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Provides a map of the budget history set by the user in the current month."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a SortedMap of budgets set in the current month."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public SortedMap\u003cLocalDate, Integer\u003e getCurrentMonthBudgetHistory() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        LocalDate today \u003d todayProperty.get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        int lastDate \u003d today.lengthOfMonth();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return this.budgetHistory.subMap(today.withDayOfMonth(1), today.withDayOfMonth(lastDate));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public DoubleExpression currentBudget() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return currentBudget;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public ObjectProperty\u003cLocalDate\u003e todayProperty() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return todayProperty;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 86,
      "FelixNWJ": 9
    }
  },
  {
    "path": "src/main/java/calofit/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import calofit.model.dish.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.ReadOnlyDishDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.meal.Meal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.MealLog;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.util.Statistics;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    Predicate\u003cDish\u003e PREDICATE_SHOW_DEFAULT \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns the user prefs\u0027 dish database file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    Path getDishDatabaseFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Sets the user prefs\u0027 dish database file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    void setDishDatabaseFilePath(Path dishDatabaseFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Replaces dish database data with the data in {@code dishDatabase}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    void setDishDatabase(ReadOnlyDishDatabase dishDatabase);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /** Returns the DishDatabase */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    ReadOnlyDishDatabase getDishDatabase();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns true if a dish with the same identity as {@code dish} exists in the dish database."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    boolean hasDish(Dish dish);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    Dish getDish(Dish dish);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Deletes the given dish."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The dish must exist in the dish database."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    void deleteDish(Dish target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Adds the given dish."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * {@code dish} must not already exist in the dish database."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    void addDish(Dish dish);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Replaces the given dish {@code target} with {@code editedDish}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * {@code target} must exist in the dish database."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The dish identity of {@code editedDish} must not be the same as another existing dish in the dish database."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    void setDish(Dish target, Dish editedDish);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /** Returns an unmodifiable view of the filtered dish list */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    ObservableList\u003cDish\u003e getFilteredDishList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Updates the filter of the filtered dish list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "     * If null, resets to the default predicate."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    void setDishFilterPredicate(Predicate\u003cDish\u003e predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns an unmodifiable view of the filtered Meal List."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    ObservableList\u003cMeal\u003e getTodayMealList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    void addMeal(Meal meal);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    void removeMeal(Meal meal);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    void setMeal(Meal target, Meal editedMeal);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns the {@code MealLog} that wraps around the list of meals input by the user."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    MealLog getMealLog();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns the {@code Statistics} object that wraps around the data in CaloFit to be displayed to the user."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    Statistics getStatistics();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns the Dish by checking with the Dish Database."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param dishName is the name of the dish to be searched."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @return the Dish stored in the database if found or null if not found."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    Dish getDishByName(Name dishName);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Checks if the Dish is in the Dish Database."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param dish is the Dish to be checked."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a boolean representing whether the Dish is found in the database."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    boolean hasDishName(Name dish);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Gets the CalorieBudget that wraps around the calorie budget history of CaloFit."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the CalorieBudget wrapper object."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    CalorieBudget getCalorieBudget();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Gets the remaining calories that the user has left for the day."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the remaining calories."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    int getRemainingCalories();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    ObjectProperty\u003cLocalDateTime\u003e nowProperty();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 44,
      "fangpinsern": 13,
      "MauriceTXS": 5,
      "FelixNWJ": 31,
      "-": 53
    }
  },
  {
    "path": "src/main/java/calofit/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import javafx.beans.binding.DoubleExpression;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import javafx.beans.binding.ObjectExpression;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import calofit.commons.util.ObservableUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.DishDatabase;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import calofit.model.dish.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.ReadOnlyDishDatabase;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.meal.Meal;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.meal.MealLog;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.ReadOnlyMealLog;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.util.Statistics;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Represents the in-memory model of the dish database data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final DishDatabase dishDatabase;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final MealLog mealLog;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final FilteredList\u003cDish\u003e filteredDishes;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final CalorieBudget budget;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    private ObjectExpression\u003cPredicate\u003cDish\u003e\u003e suggestedDishFilter;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private ObjectProperty\u003cLocalDateTime\u003e nowProperty \u003d new SimpleObjectProperty\u003c\u003e(LocalDateTime.now());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Initializes a ModelManager with the given dishDatabase and userPrefs."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public ModelManager(ReadOnlyMealLog mealLog, ReadOnlyDishDatabase dishDatabase, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CollectionUtil.requireAllNonNull(dishDatabase, userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        logger.fine(\"Initializing with dish database: \" + dishDatabase + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.dishDatabase \u003d new DishDatabase(dishDatabase);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.mealLog \u003d new MealLog(mealLog);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.filteredDishes \u003d new FilteredList\u003c\u003e(this.dishDatabase.getDishList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.budget \u003d new CalorieBudget();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        DoubleExpression remainingCalories \u003d budget.currentBudget().subtract(this.mealLog.getTodayCalories());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        suggestedDishFilter \u003d ObservableUtil.mapToObject(remainingCalories,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            remain -\u003e dish -\u003e dish.getCalories().getValue() \u003c\u003d remain);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        filteredDishes.predicateProperty().bind(suggestedDishFilter);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ObjectExpression\u003cLocalDate\u003e todayExp \u003d ObservableUtil.cachingMap(nowProperty, LocalDateTime::toLocalDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.mealLog.todayProperty().bind(todayExp);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.budget.todayProperty().bind(todayExp);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this(new MealLog(), new DishDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public ModelManager(ReadOnlyDishDatabase dishDatabase, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this(new MealLog(), dishDatabase, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Path getDishDatabaseFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return userPrefs.getDishDatabaseFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDishDatabaseFilePath(Path dishDatabaseFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        requireNonNull(dishDatabaseFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        userPrefs.setDishDatabaseFilePath(dishDatabaseFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DishDatabase \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDishDatabase(ReadOnlyDishDatabase dishDatabase) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.dishDatabase.resetData(dishDatabase);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public ReadOnlyDishDatabase getDishDatabase() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return dishDatabase;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public boolean hasDish(Dish dish) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        requireNonNull(dish);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return dishDatabase.hasDish(dish);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public Dish getDish(Dish dish) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return dishDatabase.getDish(dish);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public boolean hasDishName(Name dishName) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        requireNonNull(dishName);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return dishDatabase.hasDishName(dishName);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public Dish getDishByName(Name dishName) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return dishDatabase.getDishByName(dishName);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void deleteDish(Dish target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        dishDatabase.removeDish(target);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void addDish(Dish dish) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        dishDatabase.addDish(dish);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        setDishFilterPredicate(PREDICATE_SHOW_DEFAULT);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDish(Dish target, Dish editedDish) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedDish);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        dishDatabase.setDish(target, editedDish);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Dish List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Dish} backed by the internal list of"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * {@code dishDatabase}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public ObservableList\u003cDish\u003e getFilteredDishList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return filteredDishes;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public void setDishFilterPredicate(Predicate\u003cDish\u003e predicate) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        if (filteredDishes.predicateProperty().isBound()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            filteredDishes.predicateProperty().unbind();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        if (predicate \u003d\u003d null) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            filteredDishes.predicateProperty().bind(suggestedDishFilter);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            filteredDishes.setPredicate(predicate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public ObservableList\u003cMeal\u003e getTodayMealList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return this.mealLog.getTodayMeals();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return Statistics.generateStatistics("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                this.mealLog.getCurrentMonthMeals(), this.getCalorieBudget());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return dishDatabase.equals(other.dishDatabase)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                // \u0026\u0026 mealLog.equals(other.mealLog);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                \u0026\u0026 filteredDishes.equals(other.filteredDishes);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void addMeal(Meal meal) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.mealLog.addMeal(meal);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public void removeMeal(Meal meal) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        mealLog.removeMeal(meal);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public void setMeal(Meal target, Meal editedMeal) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedMeal);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        mealLog.setMeal(target, editedMeal);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public MealLog getMealLog() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.mealLog;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public CalorieBudget getCalorieBudget() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return this.budget;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public int getRemainingCalories() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        int remainingBudget \u003d budget.getCurrentBudget().orElse(0);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        for (Meal meal : mealLog.getTodayMeals()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            remainingBudget -\u003d meal.getDish().getCalories().getValue();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        return remainingBudget;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public ObjectProperty\u003cLocalDateTime\u003e nowProperty() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return nowProperty;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 91,
      "fangpinsern": 31,
      "MauriceTXS": 28,
      "-": 95,
      "FelixNWJ": 16
    }
  },
  {
    "path": "src/main/java/calofit/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    Path getDishDatabaseFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    Path getMealLogFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 3,
      "-": 13,
      "FelixNWJ": 1
    }
  },
  {
    "path": "src/main/java/calofit/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Path dishDatabaseFilePath \u003d Paths.get(\"data\" , \"dishDb.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private Path mealLogFilePath \u003d Paths.get(\"data\", \"mealLog.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        setDishDatabaseFilePath(newUserPrefs.getDishDatabaseFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        setMealLogFilePath(newUserPrefs.getMealLogFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Path getDishDatabaseFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return dishDatabaseFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDishDatabaseFilePath(Path dishDatabaseFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        requireNonNull(dishDatabaseFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.dishDatabaseFilePath \u003d dishDatabaseFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Path getMealLogFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return mealLogFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void setMealLogFilePath(Path mealLogFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        requireNonNull(mealLogFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.mealLogFilePath \u003d mealLogFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \u0026\u0026 dishDatabaseFilePath.equals(o.dishDatabaseFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \u0026\u0026 mealLogFilePath.equals(o.mealLogFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return Objects.hash(guiSettings, dishDatabaseFilePath, mealLogFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        sb.append(\"\\nLocal dish database data file location : \" + dishDatabaseFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        sb.append(\"\\nLocal mealLog data file location : \" + mealLogFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 9,
      "-": 77,
      "FelixNWJ": 14
    }
  },
  {
    "path": "src/main/java/calofit/model/dish/Calorie.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package calofit.model.dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import calofit.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//import calofit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents a Dish\u0027s calorie value in the dish database."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class Calorie {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            \"Calories should only be positive integers between 0 and 2 billion\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static final Calorie UNKNOWN_CALORIE \u003d new Calorie(-1, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public final int calories;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Constructs a {@code Calorie}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param calorieValue a valid calorie value."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Calorie(int calorieValue) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        AppUtil.checkArgument(calorieValue \u003e\u003d 0, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        calories \u003d calorieValue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Private unsafe constructor that does not validate."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Used to construct \"fake\" calorie values."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Calorie(int calorieValue, boolean secret) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        calories \u003d calorieValue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param test a string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @return true if calorie value is valid"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static boolean isValidCalorie(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            int value \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            return value \u003e\u003d 0 \u0026\u0026 value \u003c\u003d 2000000000"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    \u0026\u0026 !test.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //return StringUtil.isNonZeroUnsignedInteger(test);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Integer.toString(calories);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                || (other instanceof Calorie // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                \u0026\u0026 calories \u003d\u003d ((Calorie) other).calories); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Integer.hashCode(calories);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return this.calories;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 36,
      "iltep64": 9,
      "FelixNWJ": 31
    }
  },
  {
    "path": "src/main/java/calofit/model/dish/Dish.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Represents a Dish in the dish database."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class Dish {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private final Calorie calories;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Dish(Name name, Calorie calories, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        requireAllNonNull(name, tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Constructor for a Dish without Tag."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param name is the name of the dish."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Dish(Name name, Calorie calories) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this(name, calories, new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Calorie getCalories() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.calories;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Returns true if both dishes of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * This defines a weaker notion of equality between two dishes."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public boolean isSameDish(Dish otherDish) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (otherDish \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        //return otherDish !\u003d null \u0026\u0026 otherDish.getName().equals(getName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return otherDish !\u003d null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                \u0026\u0026 otherDish.getName().toLowerCase().equals(getName().toLowerCase())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \u0026\u0026 otherDish.getCalories().equals(getCalories());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Returns true if both dishes have the same name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * This defines a weaker notion of equality between two dishes."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public boolean isSameDishName(Dish otherDish) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        if (otherDish \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return otherDish !\u003d null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                \u0026\u0026 otherDish.getName().toLowerCase().equals(getName().toLowerCase());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Returns true if both dishes have the same identity and data fields."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * This defines a stronger notion of equality between two dishes."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (!(other instanceof Dish)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Dish otherDish \u003d (Dish) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return otherDish.getName().toLowerCase().equals(getName().toLowerCase())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \u0026\u0026 otherDish.getCalories().equals(getCalories())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                \u0026\u0026 otherDish.getTags().equals(getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Objects.hash(name, tags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .append(\" Calories: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .append(getCalories().toString())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 14,
      "fangpinsern": 22,
      "-": 70,
      "FelixNWJ": 21
    }
  },
  {
    "path": "src/main/java/calofit/model/dish/DishDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Wraps all data at the dish database level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Duplicates are not allowed (by .isSameDish comparison)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class DishDatabase implements ReadOnlyDishDatabase {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final UniqueDishList dishes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        dishes \u003d new UniqueDishList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public DishDatabase() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Creates an DishDatabase using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public DishDatabase(ReadOnlyDishDatabase toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Replaces the contents of the dish list with {@code dishes}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * {@code dishes} must not contain duplicate dishes."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDishes(List\u003cDish\u003e dishes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.dishes.setDishes(dishes);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Resets the existing data of this {@code DishDatabase} with {@code newData}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void resetData(ReadOnlyDishDatabase newData) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        setDishes(newData.getDishList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    //// dish-level operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns true if a dish with the same identity as {@code dish} exists in the dish database."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public boolean hasDish(Dish dish) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        requireNonNull(dish);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return dishes.contains(dish);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public Dish getDish(Dish dish) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        requireNonNull(dish);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return dishes.getDish(dish);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Returns true if a dish with the same name as {@code dish} exists in the dish database."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public boolean hasDishName(Name dishName) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        requireNonNull(dishName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return dishes.containsDishName(dishName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Gets the dish by name if it is in the dish database"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public Dish getDishByName(Name dishName) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        requireNonNull(dishName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return dishes.getDishByName(dishName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Adds a dish to the dish database."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The dish must not already exist in the dish database."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void addDish(Dish p) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        dishes.add(p);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Replaces the given dish {@code target} in the list with {@code editedDish}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * {@code target} must exist in the dish database."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The dish identity of {@code editedDish} must not be the same as another existing dish in the dish database."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDish(Dish target, Dish editedDish) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        requireNonNull(editedDish);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        dishes.setDish(target, editedDish);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Removes {@code key} from this {@code DishDatabase}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * {@code key} must exist in the dish database."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void removeDish(Dish key) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        dishes.remove(key);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        return dishes.asUnmodifiableObservableList().size();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return dishes.asUnmodifiableObservableList().size() + \" dishes\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public ObservableList\u003cDish\u003e getDishList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return dishes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                || (other instanceof DishDatabase // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                \u0026\u0026 dishes.equals(((DishDatabase) other).dishes));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return dishes.hashCode();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 44,
      "fangpinsern": 21,
      "MauriceTXS": 5,
      "-": 74
    }
  },
  {
    "path": "src/main/java/calofit/model/dish/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Represents a Dish\u0027s name in the dish database."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String LENGTH_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            \"Names should only be a maximum of 30 characters.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        AppUtil.checkArgument(isWithinThirtyCharacters(name), LENGTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns true if a given string is less than or equal to 30 characters in length."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param test is the string to be tested"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a boolean indicating if the condition is true or false."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static boolean isWithinThirtyCharacters(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return test.length() \u003c\u003d 30;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String toLowerCase() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return this.fullName.toLowerCase();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 5,
      "fangpinsern": 3,
      "-": 55,
      "FelixNWJ": 12
    }
  },
  {
    "path": "src/main/java/calofit/model/dish/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Tests that a {@code Dish}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cDish\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public boolean test(Dish dish) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(dish.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 6,
      "-": 25
    }
  },
  {
    "path": "src/main/java/calofit/model/dish/ReadOnlyDishDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Unmodifiable view of an dish database"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public interface ReadOnlyDishDatabase {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    ObservableList\u003cDish\u003e getDishList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 4,
      "-": 12
    }
  },
  {
    "path": "src/main/java/calofit/model/dish/UniqueDishList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.exceptions.DishNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.exceptions.DuplicateDishException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * A dish is considered unique by comparing using {@code Dish#isSamePerson(Dish)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * persons uses Dish#isSamePerson(Dish) for equality so as to ensure that the dish being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * unique in terms of identity in the UniqueDishList. However, the removal of a dish uses Dish#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * as to ensure that the dish with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * @see Dish#isSameDish(Dish)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class UniqueDishList implements Iterable\u003cDish\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final ObservableList\u003cDish\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final ObservableList\u003cDish\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns true if the list contains an equivalent dish as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public boolean contains(Dish toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDish);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Returns dish if the list contains an equivalent dish as the given argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public Dish getDish(Dish toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        boolean foundDish \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            Dish dish \u003d internalList.get(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            if (dish.isSameDish(toCheck)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                foundDish \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                return dish;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Returns true if the list contains a dish with the same name as the given argument."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public boolean containsDishName(Name toCheck) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return internalList.stream().anyMatch(dish -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            return dish.getName().toLowerCase().equals(toCheck.toLowerCase());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Get the dish by name from the dish database"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * returns null if dish database does not have the dish"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public Dish getDishByName(Name get) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        requireNonNull(get);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        boolean foundDish \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            Dish dish \u003d internalList.get(i);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            if (dish.getName().toLowerCase().equals(get.toLowerCase())) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                foundDish \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                return dish;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Adds a dish to the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The dish must not already exist in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void add(Dish toAdd) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            throw new DuplicateDishException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Replaces the dish {@code target} in the list with {@code editedDish}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The dish identity of {@code editedDish} must not be the same as another existing dish in the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDish(Dish target, Dish editedDish) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedDish);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            throw new DishNotFoundException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (!target.isSameDish(editedDish) \u0026\u0026 contains(editedDish)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            throw new DuplicateDishException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        internalList.set(index, editedDish);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Removes the equivalent dish from the list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * The dish must exist in the list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void remove(Dish toRemove) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            throw new DishNotFoundException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDishes(UniqueDishList replacement) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Replaces the contents of this list with {@code dishes}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * {@code dishes} must not contain duplicate dishes."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDishes(List\u003cDish\u003e dishes) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CollectionUtil.requireAllNonNull(dishes);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (!dishesAreUnique(dishes)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            throw new DuplicateDishException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        internalList.setAll(dishes);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public ObservableList\u003cDish\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Iterator\u003cDish\u003e iterator() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                || (other instanceof UniqueDishList // instanceof handles nulls"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueDishList) other).internalList));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns true if {@code dishes} contains only unique dishes."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private boolean dishesAreUnique(List\u003cDish\u003e dishes) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        for (int i \u003d 0; i \u003c dishes.size() - 1; i++) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            for (int j \u003d i + 1; j \u003c dishes.size(); j++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                if (dishes.get(i).isSameDish(dishes.get(j))) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 138,
      "fangpinsern": 44
    }
  },
  {
    "path": "src/main/java/calofit/model/dish/exceptions/DishNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.dish.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Signals that the operation is unable to find the specified dish."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class DishNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 6
    }
  },
  {
    "path": "src/main/java/calofit/model/dish/exceptions/DuplicateDishException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.dish.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Signals that the operation will result in duplicate Dishes (Dishes are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class DuplicateDishException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public DuplicateDishException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        super(\"Operation would result in duplicate dishes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 10,
      "FelixNWJ": 1
    }
  },
  {
    "path": "src/main/java/calofit/model/meal/Meal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.meal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.util.Timestamp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Represents a meal entry in the meal log."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class Meal implements Comparable\u003cMeal\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Dish dish;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Timestamp timestamp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Constructs a meal entry from a {@link Dish} and {@link Timestamp}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param dish Dish eaten"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param timestamp Time of meal"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Meal(Dish dish, Timestamp timestamp) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.dish \u003d dish;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.timestamp \u003d timestamp;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Meal meal \u003d (Meal) o;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Objects.equals(dish, meal.dish)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                \u0026\u0026 Objects.equals(timestamp, meal.timestamp);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Objects.hash(dish, timestamp);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns the dish eaten."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Dish eaten"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Dish getDish() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return dish;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Sets the dish eaten."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param dish Dish eaten"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDish(Dish dish) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.dish \u003d dish;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Gets the time of meal."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Time of meal"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Timestamp getTimestamp() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return timestamp;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Sets the time of meal."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * WARNING! Editing timestamp may cause ordering to change."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param timestamp Time of meal"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setTimestamp(Timestamp timestamp) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.timestamp \u003d timestamp;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public int compareTo(Meal meal) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return timestamp.compareTo(meal.timestamp);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        String mealString \u003d this.dish.getName().toString() + \" \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                + this.dish.getCalories().toString() + \"cal\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        if (!this.dish.getTags().isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            mealString \u003d mealString + \" \" + this.dish.getTags().toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return mealString;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns true if both meals of the same dish have the same timestamp."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public boolean isSameMeal(Meal otherMeal) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if (otherMeal \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return otherMeal !\u003d null"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \u0026\u0026 otherMeal.getDish().equals(getDish())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \u0026\u0026 otherMeal.getTimestamp().equals(getTimestamp());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 81,
      "fangpinsern": 11,
      "FelixNWJ": 13
    }
  },
  {
    "path": "src/main/java/calofit/model/meal/MealLog.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.meal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import javafx.beans.binding.DoubleExpression;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import calofit.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import calofit.commons.util.ObservableListUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import calofit.model.dish.exceptions.DishNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.exceptions.DuplicateMealException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Represents all meals tracked by the application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Contains the original list of all meals input by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Stores other lists of meals that are generated based on the original list of meals."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class MealLog implements ReadOnlyMealLog {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private List\u003cMeal\u003e mealLog \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private ObservableList\u003cMeal\u003e observableMeals \u003d FXCollections.observableList(mealLog);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private ObservableList\u003cMeal\u003e readOnlyMeals \u003d FXCollections.unmodifiableObservableList(observableMeals);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private FilteredList\u003cMeal\u003e todayMeals;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private FilteredList\u003cMeal\u003e currentMonthMeals;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final DoubleExpression todayCalories;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final SimpleObjectProperty\u003cLocalDate\u003e todayProperty \u003d new SimpleObjectProperty\u003c\u003e(LocalDate.now());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public MealLog() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this(List.of());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public MealLog (MealLog toBeCopied) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this(toBeCopied.mealLog);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public MealLog (List\u003cMeal\u003e meals) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.observableMeals.addAll(meals);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        todayMeals \u003d new FilteredList\u003c\u003e(observableMeals);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        todayMeals.predicateProperty().bind(Bindings.createObjectBinding(() -\u003e this::isMealToday, todayProperty));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        currentMonthMeals \u003d new FilteredList\u003c\u003e(observableMeals);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        currentMonthMeals.predicateProperty().bind(Bindings.createObjectBinding(() -\u003e this::isMealThisMonth,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            todayProperty));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        todayCalories \u003d ObservableListUtil.sum(ObservableListUtil.lazyMap(todayMeals,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            meal -\u003e (double) meal.getDish().getCalories().getValue()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public MealLog(ReadOnlyMealLog toBeCopied) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Resets the existing data of this {@code MealLog} with {@code newData}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void resetData(ReadOnlyMealLog newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        setMeals(newData.getMealLog());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Replaces the contents of this list with {@code meals}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * {@code meals} must not contain duplicate meals."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void setMeals(List\u003cMeal\u003e meals) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        CollectionUtil.requireAllNonNull(meals);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if (!mealsAreUnique(meals)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new DuplicateMealException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        observableMeals.setAll(meals);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns true if {@code meals} contains only unique meals."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private boolean mealsAreUnique(List\u003cMeal\u003e meals) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        for (int i \u003d 0; i \u003c meals.size() - 1; i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            for (int j \u003d i + 1; j \u003c meals.size(); j++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                if (meals.get(i).isSameMeal(meals.get(j))) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Checks if the Meal object is created today."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param meal the Meal to be tested"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the boolean representing whether the meal is created today."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private boolean isMealToday(Meal meal) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return meal.getTimestamp()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            .getDateTime().toLocalDate()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            .equals(this.todayProperty.get());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Checks if the Meal object is created this month."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param meal is the Meal to be tested"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the boolean representing whether the Meal is created in this month."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private boolean isMealThisMonth(Meal meal) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return (meal.getTimestamp()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .getDateTime().toLocalDate().getMonth()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .equals(LocalDate.now().getMonth())) \u0026\u0026 ("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                meal.getTimestamp()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .getDateTime().toLocalDate().getYear() \u003d\u003d LocalDate.now().getYear());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Get a list of meals eaten by the user."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Meal list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public ObservableList\u003cMeal\u003e getMealLog() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return readOnlyMeals;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Add a meal to the meal log."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param meal Meal to add"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return True if meal was added, false otherwise."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public boolean addMeal(Meal meal) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return observableMeals.add(meal);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * Adds a list of meals to the meal log"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     * @param listOfMeal list of meals to add"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public void addListOfMeals (LinkedList\u003cMeal\u003e listOfMeal) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        while (!listOfMeal.isEmpty()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            observableMeals.add(listOfMeal.poll());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Remove a meal from the meal log."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param meal Meal to remove"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public void removeMeal(Meal meal) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        requireNonNull(meal);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        if (!observableMeals.remove(meal)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            throw new DishNotFoundException();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public void setMeal(Meal target, Meal editedMeal) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedMeal);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        int index \u003d observableMeals.indexOf(target);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            throw new DishNotFoundException();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        observableMeals.set(index, editedMeal);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Checks if a meal is in the meal log."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param meal Meal to check"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return True if meal was in the Log, false otherwise."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public boolean hasMeal(Meal meal) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        requireNonNull(meal);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return observableMeals.stream().anyMatch(meal::isSameMeal);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Gets the list of meals eaten by the user today."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the filtered Meal List that checks the TimeStamp of each Meal."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public ObservableList\u003cMeal\u003e getTodayMeals() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return todayMeals;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Gets the list of meals eaten by the user this month."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the filtered Meal List that checks the TimeStamp of each Meal."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public ObservableList\u003cMeal\u003e getCurrentMonthMeals() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return currentMonthMeals;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public DoubleExpression getTodayCalories() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        return todayCalories;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                || (other instanceof MealLog // instanceof handles nulls"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \u0026\u0026 mealLog.equals(((MealLog) other).mealLog));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public ObjectProperty\u003cLocalDate\u003e todayProperty() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return todayProperty;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 74,
      "fangpinsern": 36,
      "MauriceTXS": 6,
      "FelixNWJ": 96
    }
  },
  {
    "path": "src/main/java/calofit/model/meal/ReadOnlyMealLog.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package calofit.model.meal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Unmodifiable view of an dish database"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public interface ReadOnlyMealLog {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns an unmodifiable view of the MealLog."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * This list will not contain any duplicate meals."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    ObservableList\u003cMeal\u003e getMealLog();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 15
    }
  },
  {
    "path": "src/main/java/calofit/model/meal/exceptions/DuplicateMealException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package calofit.model.meal.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Signals that the operation will result in duplicate Meals (Meals are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class DuplicateMealException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public DuplicateMealException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super(\"Operation would result in duplicate meals\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 12
    }
  },
  {
    "path": "src/main/java/calofit/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Represents a Tag in the dish database."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        AppUtil.checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 5,
      "-": 50
    }
  },
  {
    "path": "src/main/java/calofit/model/util/Notification.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "package calofit.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": " * Notification class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "public class Notification {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    private LocalDateTime currDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public Notification () {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        currDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "     * Check for breakfast."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "     * @return boolean value"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public boolean eatenBreakfast() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        if (currDateTime.getHour() \u003e 10) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "     * Check for lunch."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "     * @param dishDateTime get the timing of dish"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "     * @return boolean value"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public boolean eatenLunch(Timestamp dishDateTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        if (currDateTime.getDayOfYear() !\u003d dishDateTime.getDateTime().getDayOfYear()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        if (currDateTime.getHour() \u003c 14 || currDateTime.getHour() \u003e 19) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        if (dishDateTime.getDateTime().getHour() \u003e 11) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "     * Check for dinner."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "     * @param dishDateTime get the timing of dish"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "     * @return boolean value"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public boolean eatenDinner(Timestamp dishDateTime) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        if (currDateTime.getDayOfYear() !\u003d dishDateTime.getDateTime().getDayOfYear()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        if (currDateTime.getHour() \u003c\u003d 20) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        if (dishDateTime.getDateTime().getHour() \u003e 16) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MauriceTXS": 70
    }
  },
  {
    "path": "src/main/java/calofit/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.dish.Calorie;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.DishDatabase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.ReadOnlyDishDatabase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.MealLog;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.ReadOnlyMealLog;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Contains utility methods for populating {@code DishDatabase} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static Dish[] getSampleDishes() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return new Dish[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new Dish(new Name(\"Spaghetti\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                new Calorie(689),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                getTagSet(\"creamys\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new Dish(new Name(\"Mushroom Soup\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                new Calorie(439),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                getTagSet(\"shitake\", \"expensive\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new Dish(new Name(\"Chicken Rice\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    new Calorie(894)),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new Dish(new Name(\"Nasi Lemak\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                new Calorie(742),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                getTagSet(\"value\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new Dish(new Name(\"Cheese Baked Rice\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    new Calorie(1132)),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new Dish(new Name(\"Apple Pie\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    new Calorie(196))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static ReadOnlyDishDatabase getSampleDishDatabase() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        DishDatabase sampleAb \u003d new DishDatabase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        for (Dish sampleDish : getSampleDishes()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            sampleAb.addDish(sampleDish);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static ReadOnlyMealLog getNewMealLog() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new MealLog();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 24,
      "-": 21,
      "FelixNWJ": 16
    }
  },
  {
    "path": "src/main/java/calofit/model/util/Statistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package calofit.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.Map.Entry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.SortedMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.chart.XYChart.Series;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.CalorieBudget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.Meal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Wrapper class that contains all the statistics to be generated in the report."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Statistics to be generated are calculated and stored in the wrapper object as data attributes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Statistics.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private final int maximum;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private final int minimum;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private final double average;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private final int calorieExceedCount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private final List\u003cDish\u003e mostConsumedDishes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private final Series\u003cString, Integer\u003e foodChartData;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private final Series\u003cString, Integer\u003e calorieChartSeries;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Constructor for the wrapper Statistics class that cannot be called by other classes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param maximum is the maximum Calorie intake of the month."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param minimum is the minimum Calorie intake of the month."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param average is the average Calorie intake per day of the month."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param calorieExceedCount is the number of days of the month where the calorie budget was exceeded."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param mostConsumedDishes is the list of dishes that was most consumed in the month."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param foodChartData is the data that contains the quantity of each dish eaten this month."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param calorieSeries is the series that represents the data showing calories taken over time for this month."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private Statistics(int maximum, int minimum, double average, int calorieExceedCount, List\u003cDish\u003e mostConsumedDishes,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                       Series\u003cString, Integer\u003e foodChartData, Series\u003cString, Integer\u003e calorieSeries) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assert maximum \u003e\u003d 0 : \"Negative maximum calorie value is invalid.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assert minimum \u003e\u003d 0 : \"Negative minimum calorie value is invalid.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assert average \u003e\u003d 0 : \"Negative average calorie value is invalid.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assert calorieExceedCount \u003e\u003d 0 : \"Negative number of days calorie intake exceeded budget is invalid.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assert mostConsumedDishes.size() \u003e 0 : \"Empty meal log resulted in empty list of most consumed dishes.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assert foodChartData.getData().size() \u003e 0 : \"Empty meal log resulted in no data obtained for the food chart.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assert calorieSeries.getData().size() \u003e 0 : \"Empty meal log resulted in no calorie intake value processed.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.maximum \u003d maximum;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.minimum \u003d minimum;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.average \u003d average;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.calorieExceedCount \u003d calorieExceedCount;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.mostConsumedDishes \u003d mostConsumedDishes;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.foodChartData \u003d foodChartData;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.calorieChartSeries \u003d calorieSeries;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Factory static method to create the Statistics object based on the {@code MealLog} and {@code CalorieBudget}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param currentMonthMealLog is the MealLog that contains the list of meals which we want to gather the data from."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param budget is the CalorieBudget that contains the history of budgets which we want to gather the data from."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a Statistics object that wraps about the statistics generated."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static Statistics generateStatistics(ObservableList\u003cMeal\u003e currentMonthMealLog, CalorieBudget budget) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        logger.fine(\"Statistics are being generated.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            requireNonNull(budget);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (NullPointerException nullParams) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            logger.fine(\"Null CalorieBudget cannot be processed to get statistics.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assert !currentMonthMealLog.isEmpty() : \"Empty current month meal log not handled.\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        int calorieExceedCount \u003d Statistics.getCalorieExceedCount(budget, currentMonthMealLog);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        List\u003cDish\u003e mostConsumedDishes \u003d Statistics.getMostConsumedDishes(currentMonthMealLog);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Series\u003cString, Integer\u003e foodChartData \u003d Statistics.getFoodChartSeries(currentMonthMealLog);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Series\u003cString, Integer\u003e calorieChartData \u003d Statistics.getCalorieChartSeries(currentMonthMealLog);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        int maximum \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        int minimum \u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        double average \u003d 0.0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d LocalDate.now().lengthOfMonth(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            LocalDate currentDate \u003d LocalDate.now().withDayOfMonth(i);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            int currentCalorieValue \u003d 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            ObservableList\u003cMeal\u003e currentDayMeals \u003d currentMonthMealLog"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    .filtered(meal -\u003e meal.getTimestamp().getDateTime().toLocalDate().equals(currentDate));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            for (int j \u003d 0; j \u003c currentDayMeals.size(); j++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                Meal currentMeal \u003d currentDayMeals.get(j);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                currentCalorieValue +\u003d currentMeal.getDish().getCalories().getValue();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            average +\u003d currentCalorieValue;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            if (currentCalorieValue \u003e maximum) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                maximum \u003d currentCalorieValue;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            if (currentCalorieValue \u003c minimum) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                minimum \u003d currentCalorieValue;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        average \u003d Math.round(average / ((double) LocalDate.now().lengthOfMonth()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new Statistics(maximum, minimum, average,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                calorieExceedCount, mostConsumedDishes, foodChartData, calorieChartData);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Gets the maximum calorie intake of the month."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the calorie value as an int"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public int getMaximum() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.maximum;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Gets the minimum calorie intake of the month."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the calorie value as an int."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public int getMinimum() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.minimum;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Gets the average calorie intake of the month."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the calorie value as an double."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public double getAverage() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.average;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns the number of days of the current month where calorie intake exceeded calorie budget."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the number of days."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public int getCalorieExceedCount() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.calorieExceedCount;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Method to obtain the number of times the calorie budget has been exceeded for that month."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Calorie intake for a day is computed by filtering {@code MealLog} to obtain that day\u0027s meals and"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * summing the calorie values of the {@code Dish} that make up the {@code Meal}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * The calorie intake computed is then compared to that day\u0027s calorie budget set by the user."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param budget the {@code CalorieBudget} that contains the history of budgets set by the user."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param monthlyMeals is the list of meals that the user has eaten for that month."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the number of days where the calorie intake exceeded the calorie budget."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static int getCalorieExceedCount(CalorieBudget budget, ObservableList\u003cMeal\u003e monthlyMeals) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        SortedMap\u003cLocalDate, Integer\u003e currentMonthBudget \u003d budget.getCurrentMonthBudgetHistory();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        int calorieExceedCount \u003d 0;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d LocalDate.now().lengthOfMonth(); i++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            LocalDate currentDate \u003d LocalDate.now().withDayOfMonth(i);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            Integer currentCalorieBudget \u003d currentMonthBudget.get(currentDate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            if (currentCalorieBudget \u003d\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            int currentCalorieValue \u003d 0;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            ObservableList\u003cMeal\u003e currentDayMeals \u003d monthlyMeals"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    .filtered(meal -\u003e meal.getTimestamp().getDateTime().toLocalDate().equals(currentDate));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            for (int j \u003d 0; j \u003c currentDayMeals.size(); j++) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                currentCalorieValue +\u003d currentDayMeals.get(j).getDish().getCalories().getValue();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            if (currentCalorieValue \u003e currentCalorieBudget) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                calorieExceedCount++;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return calorieExceedCount;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns the most consumed {@code Dish} of the month in a list to cater to multiple dishes."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return a list of dishes."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public List\u003cDish\u003e getMostConsumedDishes() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.mostConsumedDishes;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Method to obtain the most consumed {@code Dish} or Dishes of the month."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Obtained by storing Dishes in a {@code HashMap} to check for duplicates and"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * incrementing the value everytime the dish is processed."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param meals is the list of meals that we want to know the information from."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the list of most consumed dishes."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static List\u003cDish\u003e getMostConsumedDishes(ObservableList\u003cMeal\u003e meals) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        HashMap\u003cDish, Integer\u003e mapOfDishes \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        for (int i \u003d 0; i \u003c meals.size(); i++) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            Dish currentDish \u003d meals.get(i).getDish();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            Integer value \u003d mapOfDishes.get(currentDish);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            mapOfDishes.put(currentDish, value \u003d\u003d null ? 1 : value + 1);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Entry\u003cDish, Integer\u003e maxEntry \u003d null;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        for (Entry\u003cDish, Integer\u003e currentEntry : mapOfDishes.entrySet()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            if (maxEntry \u003d\u003d null || currentEntry.getValue() \u003e maxEntry.getValue()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                maxEntry \u003d currentEntry;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Integer maxValue \u003d maxEntry.getValue();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        ArrayList\u003cDish\u003e listOfMostConsumedDishes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        for (Entry\u003cDish, Integer\u003e currentEntry : mapOfDishes.entrySet()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            if (currentEntry.getValue() \u003d\u003d maxValue) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                listOfMostConsumedDishes.add(currentEntry.getKey());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return listOfMostConsumedDishes;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Getter method to return the list of dishes and their quantity consumed for this month as a series"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the series containing the dishes eaten this month and their respective quantities."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Series\u003cString, Integer\u003e getFoodChartSeries() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.foodChartData;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Generates the list of dishes that the user has eaten this month and the number of times each was eaten."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Stores the data in a Series and returns it."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Obtained by storing the {@code Dish} in a {@code HashMap} to check for duplicates and"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * incrementing the value everytime the dish is processed."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * For each {@code Entry} generated from the {@code EntrySet} of the HashMap,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * a {@code Data} object is created with the entry name and value."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param meals is the list of meals that we want to know the information from."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the series containing each dish and their quantity eaten this month."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static Series\u003cString, Integer\u003e getFoodChartSeries(ObservableList\u003cMeal\u003e meals) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        XYChart.Series\u003cString, Integer\u003e foodData \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        foodData.setName(\"Types of Food.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        HashMap\u003cDish, Integer\u003e mapOfDishes \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        for (int i \u003d 0; i \u003c meals.size(); i++) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            Dish currentDish \u003d meals.get(i).getDish();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            Integer value \u003d mapOfDishes.get(currentDish);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            mapOfDishes.put(currentDish, value \u003d\u003d null ? 1 : value + 1);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        for (Entry\u003cDish, Integer\u003e currentEntry : mapOfDishes.entrySet()) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            foodData.getData().add(new XYChart.Data("
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    currentEntry.getKey().getName().toString(), currentEntry.getValue()));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return foodData;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Getter method to return the series of calorie intake value of the user over the course of the month."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the series representing the above data."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Series\u003cString, Integer\u003e getCalorieChartSeries() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.calorieChartSeries;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Method to get the amount of calories taken per day over the month and store them in a series."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Calorie intake for a day is computed by filtering monthlyMeals to obtain that day\u0027s meals and"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * summing the calorie values of the {@code Dish} that make up the {@code Meal}."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * A {@code Data} object is then added to the series containing the date of the month and the"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * calorie intake value calculated for that date."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param monthlyMeals is the list of meals taken this month."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @return the series itself."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static Series\u003cString, Integer\u003e getCalorieChartSeries(ObservableList\u003cMeal\u003e monthlyMeals) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        XYChart.Series\u003cString, Integer\u003e calorieData \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        calorieData.setName(\"Date\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d LocalDate.now().lengthOfMonth(); i++) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            int currentCalorieValue \u003d 0;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            LocalDate currentDate \u003d LocalDate.now().withDayOfMonth(i);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            ObservableList\u003cMeal\u003e currentDayMeals \u003d monthlyMeals"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    .filtered(meal -\u003e meal.getTimestamp().getDateTime().toLocalDate().equals(currentDate));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            for (int j \u003d 0; j \u003c currentDayMeals.size(); j++) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                currentCalorieValue +\u003d currentDayMeals.get(j).getDish().getCalories().getValue();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            calorieData.getData().add(new XYChart.Data(String.valueOf(i), currentCalorieValue));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return calorieData;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 285
    }
  },
  {
    "path": "src/main/java/calofit/model/util/Timestamp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Represents a timestamp of when a meal was eaten."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class Timestamp implements Comparable\u003cTimestamp\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private int tiebreaker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Constructs a {@link Timestamp} around a {@link LocalDateTime}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param dateTime Date to wrap"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Timestamp(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.tiebreaker \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public int compareTo(Timestamp timestamp) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        int dtCompare \u003d dateTime.compareTo(timestamp.dateTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (dtCompare !\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return dtCompare;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Integer.compare(tiebreaker, timestamp.tiebreaker);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this.getDateTime().toString().equals(("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                 (Timestamp) other).getDateTime().toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 33,
      "FelixNWJ": 6
    }
  },
  {
    "path": "src/main/java/calofit/storage/DishDatabaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.DishDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.ReadOnlyDishDatabase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Represents a storage for {@link DishDatabase}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public interface DishDatabaseStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    Path getDishDatabaseFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns DishDatabase data as a {@link ReadOnlyDishDatabase}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    Optional\u003cReadOnlyDishDatabase\u003e readDishDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @see #getDishDatabaseFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    Optional\u003cReadOnlyDishDatabase\u003e readDishDatabase(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Saves the given {@link ReadOnlyDishDatabase} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param dishDatabase cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    void saveDishDatabase(ReadOnlyDishDatabase dishDatabase) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @see #saveDishDatabase(ReadOnlyDishDatabase)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    void saveDishDatabase(ReadOnlyDishDatabase dishDatabase, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 46
    }
  },
  {
    "path": "src/main/java/calofit/storage/JsonAdaptedDish.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.dish.Calorie;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Jackson-friendly version of {@link Dish}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "class JsonAdaptedDish {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Dish\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final int calories;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Constructs a {@code JsonAdaptedDish} with the given dish details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public JsonAdaptedDish(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                           @JsonProperty(\"calories\") int calories,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Converts a given {@code Dish} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public JsonAdaptedDish(Dish source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        calories \u003d source.getCalories().getValue();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Converts this Jackson-friendly adapted dish object into the model\u0027s {@code Dish} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted dish."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Dish toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        final List\u003cTag\u003e dishTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            dishTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if (!Calorie.isValidCalorie(String.valueOf(calories))) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new IllegalValueException(Calorie.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        final Calorie modelCalories \u003d new Calorie(calories);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(dishTags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new Dish(modelName, modelCalories, modelTags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 31,
      "-": 43,
      "FelixNWJ": 8
    }
  },
  {
    "path": "src/main/java/calofit/storage/JsonAdaptedMeal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.Meal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.util.Timestamp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Jackson-friendly version of {@link Meal}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class JsonAdaptedMeal {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Meal\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private final JsonAdaptedDish dish;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Constructs a {@code JsonAdaptedMeal} with the given meal details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public JsonAdaptedMeal(@JsonProperty(\"dish\") JsonAdaptedDish dish,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                           @JsonProperty(\"time\") String time) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.dish \u003d dish;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Converts a given {@code Meal} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public JsonAdaptedMeal(Meal source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        dish \u003d new JsonAdaptedDish(source.getDish());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        time \u003d source.getTimestamp().getDateTime().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Converts this Jackson-friendly adapted meal object into the model\u0027s {@code Meal} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted meal."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Meal toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if (dish \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Dish.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    Timestamp.class.getSimpleName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        final Dish modelDish \u003d dish.toModelType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        final Timestamp modelTime \u003d new Timestamp(LocalDateTime.parse(time));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new Meal(modelDish, modelTime);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 64
    }
  },
  {
    "path": "src/main/java/calofit/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/calofit/storage/JsonDishDatabaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.ReadOnlyDishDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * A class to access DishDatabase data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class JsonDishDatabaseStorage implements DishDatabaseStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonDishDatabaseStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public JsonDishDatabaseStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Path getDishDatabaseFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Optional\u003cReadOnlyDishDatabase\u003e readDishDatabase() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return readDishDatabase(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Similar to {@link #readDishDatabase()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Optional\u003cReadOnlyDishDatabase\u003e readDishDatabase(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Optional\u003cJsonSerializableDishDatabase\u003e jsonDishDatabase \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                filePath, JsonSerializableDishDatabase.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (!jsonDishDatabase.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return Optional.of(jsonDishDatabase.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void saveDishDatabase(ReadOnlyDishDatabase dishDatabase) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        saveDishDatabase(dishDatabase, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Similar to {@link #saveDishDatabase(ReadOnlyDishDatabase)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void saveDishDatabase(ReadOnlyDishDatabase dishDatabase, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        requireNonNull(dishDatabase);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableDishDatabase(dishDatabase), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 80
    }
  },
  {
    "path": "src/main/java/calofit/storage/JsonMealLogStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.ReadOnlyMealLog;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * A class to access MealLog data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class JsonMealLogStorage implements MealLogStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMealLogStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public JsonMealLogStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Path getMealLogFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Optional\u003cReadOnlyMealLog\u003e readMealLog() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return readMealLog(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Similar to {@link #readMealLog()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Optional\u003cReadOnlyMealLog\u003e readMealLog(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Optional\u003cJsonSerializableMealLog\u003e jsonMealLog \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                filePath, JsonSerializableMealLog.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if (!jsonMealLog.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            return Optional.of(jsonMealLog.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void saveMealLog(ReadOnlyMealLog mealLog) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        saveMealLog(mealLog, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Similar to {@link #saveMealLog(ReadOnlyMealLog)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void saveMealLog(ReadOnlyMealLog mealLog, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        requireNonNull(mealLog);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMealLog(mealLog), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 79
    }
  },
  {
    "path": "src/main/java/calofit/storage/JsonSerializableDishDatabase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.DishDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.ReadOnlyDishDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * An Immutable DishDatabase that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "@JsonRootName(value \u003d \"dishes\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "class JsonSerializableDishDatabase {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DISHES \u003d \"Dishes list contains duplicate dish(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final List\u003cJsonAdaptedDish\u003e dishes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Constructs a {@code JsonSerializableDishDatabase} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public JsonSerializableDishDatabase(@JsonProperty(\"dishes\") List\u003cJsonAdaptedDish\u003e dishes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.dishes.addAll(dishes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Converts a given {@code ReadOnlyDishDatabase} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableDishDatabase}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public JsonSerializableDishDatabase(ReadOnlyDishDatabase source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        dishes.addAll(source.getDishList().stream().map(JsonAdaptedDish::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Converts this dish database into the model\u0027s {@code DishDatabase} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public DishDatabase toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        DishDatabase dishDatabase \u003d new DishDatabase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        for (JsonAdaptedDish jsonAdaptedDish : dishes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            Dish dish \u003d jsonAdaptedDish.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            if (dishDatabase.hasDish(dish)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DISHES);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            dishDatabase.addDish(dish);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return dishDatabase;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 34,
      "-": 26
    }
  },
  {
    "path": "src/main/java/calofit/storage/JsonSerializableMealLog.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.Meal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.MealLog;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.ReadOnlyMealLog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * An Immutable MealLog that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "@JsonRootName(value \u003d \"meals\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class JsonSerializableMealLog {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEALS \u003d \"Meals list contains duplicate meal(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private final List\u003cJsonAdaptedMeal\u003e meals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Constructs a {@code JsonSerializableMealLog} with the given meals."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public JsonSerializableMealLog(@JsonProperty(\"meals\") List\u003cJsonAdaptedMeal\u003e meals) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.meals.addAll(meals);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Converts a given {@code ReadOnlyMealLog} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMealLog}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public JsonSerializableMealLog(ReadOnlyMealLog source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        meals.addAll(source.getMealLog().stream().map(JsonAdaptedMeal::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Converts this meallog into the model\u0027s {@code MealLog} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public MealLog toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        MealLog mealLog \u003d new MealLog();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        for (JsonAdaptedMeal jsonAdaptedMeal : meals) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            Meal meal \u003d jsonAdaptedMeal.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            if (mealLog.hasMeal(meal)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MEALS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            mealLog.addMeal(meal);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return mealLog;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 60
    }
  },
  {
    "path": "src/main/java/calofit/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/calofit/storage/MealLogStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.MealLog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.ReadOnlyMealLog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * Represents a storage for {@link MealLog}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public interface MealLogStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    Path getMealLogFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns MealLog data as a {@link ReadOnlyMealLog}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    Optional\u003cReadOnlyMealLog\u003e readMealLog() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @see #getMealLogFilePath() ()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    Optional\u003cReadOnlyMealLog\u003e readMealLog(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Saves the given {@link ReadOnlyMealLog} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param mealLog cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    void saveMealLog(ReadOnlyMealLog mealLog) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @see #saveMealLog(ReadOnlyMealLog)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    void saveMealLog(ReadOnlyMealLog mealLog, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 45
    }
  },
  {
    "path": "src/main/java/calofit/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.ReadOnlyDishDatabase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.ReadOnlyMealLog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public interface Storage extends DishDatabaseStorage, MealLogStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    Path getDishDatabaseFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    Optional\u003cReadOnlyDishDatabase\u003e readDishDatabase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    void saveDishDatabase(ReadOnlyDishDatabase dishDatabase) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    Path getMealLogFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    Optional\u003cReadOnlyMealLog\u003e readMealLog() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    void saveMealLog(ReadOnlyMealLog mealLog) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 13,
      "-": 18,
      "FelixNWJ": 10
    }
  },
  {
    "path": "src/main/java/calofit/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.ReadOnlyDishDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.ReadOnlyMealLog;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Manages storage of DishDatabase data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private DishDatabaseStorage dishDatabaseStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private MealLogStorage mealLogStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public StorageManager(DishDatabaseStorage dishDatabaseStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                          MealLogStorage mealLogStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.dishDatabaseStorage \u003d dishDatabaseStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.mealLogStorage \u003d mealLogStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DishDatabase methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Path getDishDatabaseFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return dishDatabaseStorage.getDishDatabaseFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Optional\u003cReadOnlyDishDatabase\u003e readDishDatabase() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return readDishDatabase(dishDatabaseStorage.getDishDatabaseFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Optional\u003cReadOnlyDishDatabase\u003e readDishDatabase(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return dishDatabaseStorage.readDishDatabase(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void saveDishDatabase(ReadOnlyDishDatabase dishDatabase) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        saveDishDatabase(dishDatabase, dishDatabaseStorage.getDishDatabaseFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void saveDishDatabase(ReadOnlyDishDatabase dishDatabase, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        dishDatabaseStorage.saveDishDatabase(dishDatabase, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Meallog methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Path getMealLogFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return dishDatabaseStorage.getDishDatabaseFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Optional\u003cReadOnlyMealLog\u003e readMealLog() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return readMealLog(mealLogStorage.getMealLogFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Optional\u003cReadOnlyMealLog\u003e readMealLog(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return mealLogStorage.readMealLog(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void saveMealLog(ReadOnlyMealLog mealLog) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        saveMealLog(mealLog, mealLogStorage.getMealLogFilePath());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void saveMealLog(ReadOnlyMealLog mealLog, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        mealLogStorage.saveMealLog(mealLog, filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 26,
      "-": 50,
      "FelixNWJ": 34
    }
  },
  {
    "path": "src/main/java/calofit/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Returns UserPrefs for data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 6,
      "-": 29,
      "FelixNWJ": 1
    }
  },
  {
    "path": "src/main/java/calofit/ui/BudgetBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.util.ObservableListUtil.map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.util.ObservableUtil.liftA3;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.util.ObservableUtil.map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.util.ObservableUtil.mapToObject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.binding.DoubleBinding;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.binding.DoubleExpression;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.binding.ObjectExpression;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.binding.StringExpression;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.property.DoubleProperty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.property.ListProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.property.SimpleDoubleProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.property.SimpleListProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.value.ObservableDoubleValue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.geometry.Bounds;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.scene.shape.Line;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.controlsfx.control.SegmentedBar;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.util.ObservableListUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.meal.Meal;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Progress bar component representing current calorie budget."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class BudgetBar extends StackPane {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final String FXML \u003d \"BudgetBar.fxml\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final Color COLOR_ZERO \u003d Color.GREEN;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final Color COLOR_MAX \u003d Color.ORANGERED;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private ListProperty\u003cMeal\u003e todayMeals \u003d new SimpleListProperty\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private DoubleProperty budget \u003d new SimpleDoubleProperty(Double.POSITIVE_INFINITY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private DoubleProperty bufferFraction \u003d new SimpleDoubleProperty(1.2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private DoubleBinding totalConsumed \u003d ObservableListUtil.sum("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ObservableListUtil.lazyMap(todayMeals, meal -\u003e (double) meal.getDish().getCalories().getValue())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private DoubleExpression budgetPercent \u003d totalConsumed.divide(budget);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private ObjectExpression\u003cColor\u003e barColor \u003d mapToObject(budgetPercent, percent -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        percent \u003d Math.max(0, Math.min(1, percent));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Color base \u003d COLOR_ZERO.interpolate(COLOR_MAX, percent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Color.hsb(base.getHue(), base.getSaturation(), 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private StringExpression infoText \u003d Bindings.createStringBinding(() -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (budget.get() \u003d\u003d Double.POSITIVE_INFINITY) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return String.format(\"%.1f\", totalConsumed.get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return String.format(\"%.1f / %.1f\", totalConsumed.get(), budget.get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }, totalConsumed, budget);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private ObservableList\u003cMealSegment\u003e mealBars \u003d map(todayMeals, MealSegment::new);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Represents the remaining budget available."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Auto-expands to the width remaining."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private class BufferSegment extends SegmentedBar.Segment {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private BufferSegment() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            super(0, \"buffer\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            valueProperty().bind(liftA3(budget, totalConsumed, bufferFraction, (budgetVal, totalVal, bufferFrac) -\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                budgetVal \u003d\u003d Double.POSITIVE_INFINITY"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                ? 0"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                : Math.max(0, (budgetVal * bufferFrac) - totalVal)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Represents a meal eaten today."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private class MealSegment extends SegmentedBar.Segment {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private final Meal meal;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private MealSegment(Meal meal) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            super(meal.getDish().getCalories().getValue(), meal.getDish().getName().fullName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            this.meal \u003d meal;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private SegmentedBar\u003cSegmentedBar.Segment\u003e mealSegments;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Text infoNode;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Line budgetMark;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Line budgetExtraMark;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public BudgetBar() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        URL x \u003d BudgetBar.class.getResource(UiPart.FXML_FILE_FOLDER + FXML);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        FXMLLoader loader \u003d new FXMLLoader(x);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        loader.setRoot(this);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        loader.setController(this);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            loader.load();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        infoNode.textProperty().bind(infoText);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        infoNode.fillProperty().bind(barColor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        mealSegments.setSegments(ObservableListUtil.concat(mealBars, FXCollections.observableArrayList("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            new BufferSegment()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        )));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Callback\u003cSegmentedBar.Segment, Node\u003e orig \u003d mealSegments.getSegmentViewFactory();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        mealSegments.setSegmentViewFactory(segment -\u003e {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            SegmentedBar.SegmentView view \u003d (SegmentedBar.SegmentView) orig.call(segment);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            if (segment instanceof BufferSegment) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                view.getStyleClass().addAll(\"buffer-segment\", \"bar-segment\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                view.getStyleClass().addAll(\"meal-segment\", \"bar-segment\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return view;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        });"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        DoubleExpression budgetXPos \u003d markPosition(Bindings.createDoubleBinding(() -\u003e 1.0));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        budgetMark.startXProperty().bind(budgetXPos);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        budgetMark.endXProperty().bind(budgetXPos);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        budgetMark.visibleProperty().bind(map(budget, val -\u003e Double.isFinite((double) val)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        DoubleExpression budgetExtraXPos \u003d markPosition(bufferFraction);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        budgetExtraMark.startXProperty().bind(budgetExtraXPos);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        budgetExtraMark.endXProperty().bind(budgetExtraXPos);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        budgetExtraMark.visibleProperty().bind(map(budget, val -\u003e Double.isFinite((double) val)));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Computes the position of the mark, given the fraction it should be relative to the whole bar."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @param frac Fractional position relative to the bar"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @return Computed position of the mark"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private DoubleExpression markPosition(ObservableDoubleValue frac) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Bindings.createDoubleBinding(() -\u003e {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            Bounds bounds \u003d mealSegments.boundsInParentProperty().get();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            double totalVal \u003d totalConsumed.get();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            double budgetVal \u003d budget.get();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            double bufferFrac \u003d bufferFraction.get();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            double markerFrac \u003d frac.get();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            if (totalVal \u003c budgetVal * bufferFrac) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                return bounds.getMinX() + bounds.getWidth() * markerFrac / bufferFrac;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                return bounds.getMinX() + bounds.getWidth() * (budgetVal / totalVal) * (markerFrac / bufferFrac);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }, mealSegments.boundsInParentProperty(), totalConsumed, budget, bufferFraction, frac);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public ListProperty\u003cMeal\u003e mealsProperty() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return todayMeals;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public DoubleProperty budgetProperty() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 177
    }
  },
  {
    "path": "src/main/java/calofit/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 6,
      "-": 73
    }
  },
  {
    "path": "src/main/java/calofit/ui/DishCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * An UI component that displays information of a {@code Dish}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class DishCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final String FXML \u003d \"DishListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public final Dish dish;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private Label calories;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public DishCard(Dish dish, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.dish \u003d dish;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        name.setText(dish.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        calories.setText(dish.getCalories().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        dish.getTags().stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (!(other instanceof DishCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        DishCard card \u003d (DishCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                \u0026\u0026 dish.equals(card.dish);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 13,
      "-": 54,
      "FelixNWJ": 2
    }
  },
  {
    "path": "src/main/java/calofit/ui/DishListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class DishListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final String FXML \u003d \"DishListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DishListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private ListView\u003cDish\u003e dishListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Text emptyOverlay;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public DishListPanel(ObservableList\u003cDish\u003e dishList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        dishListView.setItems(dishList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        dishListView.setCellFactory(listView -\u003e new DishListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        emptyOverlay.visibleProperty().bind(Bindings.createBooleanBinding(dishList::isEmpty, dishList));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Dish} using a {@code DishCard}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    class DishListViewCell extends ListCell\u003cDish\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        protected void updateItem(Dish dish, boolean empty) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            super.updateItem(dish, empty);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            if (empty || dish \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                setGraphic(new DishCard(dish, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 47,
      "fangpinsern": 8
    }
  },
  {
    "path": "src/main/java/calofit/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-w11-4.github.io/main/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 2,
      "fangpinsern": 1,
      "-": 100
    }
  },
  {
    "path": "src/main/java/calofit/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private MealListPanel mealListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private DishListPanel dishListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private ReportWindow reportWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private BudgetBar budgetBar;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private StackPane mealListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private StackPane dishListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        budgetBar.mealsProperty().set(logic.getModel().getMealLog().getTodayMeals());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        budgetBar.budgetProperty().bind(logic.getModel().getCalorieBudget().currentBudget());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "         * consume function-key events. Bcecause CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        mealListPanel \u003d new MealListPanel(logic.getTodayMealList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        mealListPanelPlaceholder.getChildren().add(mealListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        dishListPanel \u003d new DishListPanel(logic.getFilteredDishList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        dishListPanelPlaceholder.getChildren().add(dishListPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getDishDatbaseFilePath());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if (reportWindow !\u003d null) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            reportWindow.hide();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Creates the ReportWindow containing the statistics of Calofit and displays it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Checks if a current report window is showing or not and closes it if it is showing."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private void handleReport() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        if (this.reportWindow !\u003d null) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            this.reportWindow.hide();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.reportWindow \u003d new ReportWindow(logic.getStatistics());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.reportWindow.show();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public MealListPanel getMealListPanel() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return mealListPanel;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            if (commandResult.isShowReport()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                handleReport();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 27,
      "MauriceTXS": 4,
      "-": 179,
      "FelixNWJ": 22
    }
  },
  {
    "path": "src/main/java/calofit/ui/MealCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.meal.Meal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * An UI component that displays information of a {@code Meal}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class MealCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final String FXML \u003d \"MealListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public final Meal meal;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public MealCard(Meal meal, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.meal \u003d meal;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        name.setText(meal.getDish().getName().fullName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        meal.getDish().getTags().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (!(other instanceof MealCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        MealCard card \u003d (MealCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            \u0026\u0026 meal.equals(card.meal);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 66
    }
  },
  {
    "path": "src/main/java/calofit/ui/MealListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.meal.Meal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class MealListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final String FXML \u003d \"MealListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MealListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private ListView\u003cMeal\u003e mealListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public MealListPanel(ObservableList\u003cMeal\u003e mealList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        mealListView.setItems(mealList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        mealListView.setCellFactory(listView -\u003e new MealListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Meal} using a {@code DishCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    class MealListViewCell extends ListCell\u003cMeal\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        protected void updateItem(Meal meal, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            super.updateItem(meal, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            if (empty || meal \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                setGraphic(new MealCard(meal, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 47
    }
  },
  {
    "path": "src/main/java/calofit/ui/NotificationWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "package calofit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import calofit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": " * Notification Window."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "public class NotificationWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(NotificationWindow.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    private static final String FXML \u003d \"NotificationWindow.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    private Label notificationMessage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    private NotificationWindow(Stage root, String message) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        notificationMessage.setText(message);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public NotificationWindow(String message) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        this(new Stage(), message);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "     * Displays the Notification Window to the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        logger.fine(\"Showing notification.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MauriceTXS": 39
    }
  },
  {
    "path": "src/main/java/calofit/ui/ReportWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package calofit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.util.Statistics;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * A UI Component that displays statistics in a Report format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class ReportWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String FXML \u003d \"ReportWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ReportWindow.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private Label numericalStatistics;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private Label foodStatistics;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private TextFlow maximumCalorie;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private TextFlow minimumCalorie;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private TextFlow averageCalorie;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private TextFlow countCalorieExceeded;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private ScrollPane foodListScrollPane;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private TextFlow mostConsumedMeal;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private BarChart foodChart;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private BarChart calorieOverTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Constructs the Report Window based on the FXML file as the basis."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param root is the current root of the GUI."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param statistics is the statistics object that contains the values we want to show in the report."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private ReportWindow(Stage root, Statistics statistics) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        requireNonNull(statistics);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        foodListScrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        numericalStatistics.setBackground(new Background("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                new BackgroundFill(Color.DARKGRAY, CornerRadii.EMPTY, Insets.EMPTY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        numericalStatistics.setStyle(\"-fx-font-weight: bold; -fx-font-size: 22px; -fx-text-alignment: right\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        foodStatistics.setBackground(new Background("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                new BackgroundFill(Color.DARKGREY, CornerRadii.EMPTY, Insets.EMPTY)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        foodStatistics.setStyle(\"-fx-font-weight: bold; -fx-font-size: 22px; -fx-text-alignment: right\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Background forNumericalStatistics \u003d new Background("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                new BackgroundFill(Color.DARKSEAGREEN, CornerRadii.EMPTY, Insets.EMPTY));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        maximumCalorie.setBackground(forNumericalStatistics);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        maximumCalorie.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        minimumCalorie.setBackground(forNumericalStatistics);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        minimumCalorie.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        averageCalorie.setBackground(forNumericalStatistics);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        averageCalorie.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Background forFoodStatistics \u003d new Background("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                new BackgroundFill(Color.DEEPSKYBLUE, CornerRadii.EMPTY, Insets.EMPTY));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        countCalorieExceeded.setBackground(forFoodStatistics);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        countCalorieExceeded.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        mostConsumedMeal.setBackground(forFoodStatistics);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        mostConsumedMeal.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Text maximum \u003d new Text(\"Maximum\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        maximum.setStyle(\"-fx-font-weight: bold; -fx-font-size: 35px\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Text valueOfMaximum \u003d new Text(String.valueOf(statistics.getMaximum()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        valueOfMaximum.setStyle(\"-fx-font-size: 40px\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        maximumCalorie.getChildren().addAll(maximum,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                new Text(\" calorie intake of the month is: \\n\"), valueOfMaximum);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Text minimum \u003d new Text(\"Minimum\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        minimum.setStyle(\"-fx-font-weight: bold; -fx-font-size: 35px\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Text valueOfMinimum \u003d new Text(String.valueOf(statistics.getMinimum()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        valueOfMinimum.setStyle(\"-fx-font-size: 40px\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        minimumCalorie.getChildren().addAll(minimum,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                new Text(\" calorie intake of the month is: \\n\"), valueOfMinimum);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Text average \u003d new Text(\"Average\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        average.setStyle(\"-fx-font-weight: bold; -fx-font-size: 35px\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Text valueOfAverage \u003d new Text(String.valueOf(statistics.getAverage()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        valueOfAverage.setStyle(\"-fx-font-size: 40px\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        averageCalorie.getChildren().addAll(average,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                new Text(\" calorie intake of the month is: \\n\"), valueOfAverage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Text calorieCountExceededHeader \u003d new Text(\"Number of days calorie count exceeded budget: \\n\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        calorieCountExceededHeader.setStyle(\"-fx-font-size: 20px\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Text calorieCountExceededValue \u003d new Text(String.valueOf(statistics.getCalorieExceedCount()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        calorieCountExceededValue.setStyle(\"-fx-font-size: 35px\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        countCalorieExceeded.getChildren().addAll(calorieCountExceededHeader, calorieCountExceededValue);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Text mostConsumedFoodHeader \u003d new Text(\"Most consumed dish(es) of the month:\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        mostConsumedFoodHeader.setStyle(\"-fx-font-size: 20px\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        mostConsumedMeal.getChildren().add(mostConsumedFoodHeader);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        for (int i \u003d 0; i \u003c statistics.getMostConsumedDishes().size(); i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            Text mostConsumedFood \u003d new Text(\"\\n\" + (i + 1) + \". \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    + statistics.getMostConsumedDishes().get(i).getName().toString());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            mostConsumedFood.setStyle(\"-fx-font-size: 35px\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            mostConsumedMeal.getChildren().add(mostConsumedFood);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        foodChart.getData().addAll(statistics.getFoodChartSeries());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        calorieOverTime.getData().addAll(statistics.getCalorieChartSeries());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Constructor that the initial controller calls upon to create a new Stage."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * @param statistics is the statistics object that contains the values we want to show in the report."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public ReportWindow(Statistics statistics) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this(new Stage(), statistics);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        logger.fine(\"Report page is being generated.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Displays the ReportWindow to the user."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        logger.fine(\"Showing report page displaying statistics of CaloFit this month.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Hides the ReportWindow from the user."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        logger.fine(\"Report page is closed\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 167
    }
  },
  {
    "path": "src/main/java/calofit/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/calofit/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/calofit/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/calofit/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.Timer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.NotificationHelper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/calofit_logo.png\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Timer timer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    private NotificationWindow notificationWindow;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public UiManager(Logic logic, Timer timer) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.timer \u003d timer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        timer.registerPeriodic(Duration.ofMinutes(10), () -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            Optional\u003cString\u003e notifMessage \u003d NotificationHelper.execute(logic.getModel());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            notifMessage.ifPresent(s -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "                if (notificationWindow !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "                    notificationWindow.getRoot().hide();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "                notificationWindow \u003d new NotificationWindow(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "                notificationWindow.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 16,
      "fangpinsern": 1,
      "MauriceTXS": 8,
      "-": 80
    }
  },
  {
    "path": "src/main/java/calofit/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 2,
      "-": 87
    }
  },
  {
    "path": "src/main/resources/view/BudgetBar.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003c?import org.controlsfx.control.SegmentedBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003cfx:root xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         type\u003d\"javafx.scene.layout.StackPane\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\" StackPane.alignment\u003d\"CENTER\" fx:id\u003d\"barParts\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        \u003cText fx:id\u003d\"infoNode\" styleClass\u003d\"budgetbar-info\" pickOnBounds\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        \u003cSegmentedBar fx:id\u003d\"mealSegments\" maxWidth\u003d\"Infinity\" orientation\u003d\"HORIZONTAL\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    \u003cPane pickOnBounds\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        \u003cLine fx:id\u003d\"budgetMark\" startY\u003d\"${mealSegments.boundsInParent.minY + (budgetMark.strokeWidth / 2)}\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "              endY\u003d\"${mealSegments.boundsInParent.maxY - (budgetMark.strokeWidth / 2)}\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        \u003cLine fx:id\u003d\"budgetExtraMark\" startY\u003d\"${mealSegments.boundsInParent.minY + (budgetMark.strokeWidth / 2)}\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "              endY\u003d\"${mealSegments.boundsInParent.maxY - (budgetMark.strokeWidth / 2) }\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    \u003c/Pane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "iltep64": 23
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iltep64"
        },
        "content": "#filterField, #dishListPanel, #dishWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/DishListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            \u003cLabel fx:id\u003d\"calories\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "FelixNWJ": 10
    }
  },
  {
    "path": "src/main/resources/view/DishListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "  \u003cText styleClass\u003d\"listHeader\"\u003eSuggested Meals\u003c/Text\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "  \u003cStackPane\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    \u003cListView fx:id\u003d\"dishListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    \u003cText fx:id\u003d\"emptyOverlay\" styleClass\u003d\"emptyDishText\"\u003eNo dishes available\u003c/Text\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 6,
      "iltep64": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "BudgetBar {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-max-height: 30px;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": ".budgetbar-info {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-text-alignment: CENTER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": ".budgetbar-meal {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-max-width: Infinity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-max-height: Infinity;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-border-color: red;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-border-width: 2px;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "#budgetMark {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-stroke: rgba(255, 165, 0, 0.6);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-stroke-width: 10px;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "#budgetExtraMark {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-stroke: rgba(255, 0, 0, 0.6);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-stroke-width: 10px;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": ".meal-segment \u003e Label {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-max-width: Infinity;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": ".buffer-segment {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": ".buffer-segment \u003e Label {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ".listHeader {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ".emptyDishText {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 44,
      "fangpinsern": 10,
      "-": 20
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003c?import calofit.ui.BudgetBar?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"CaloFit\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    \u003cImage url\u003d\"@/images/calofit_logo.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        \u003cBudgetBar fx:id\u003d\"budgetBar\" maxWidth\u003d\"Infinity\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "          \u003cVBox fx:id\u003d\"mealList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            \u003cStackPane fx:id\u003d\"mealListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "          \u003cVBox fx:id\u003d\"dishList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            \u003cStackPane fx:id\u003d\"dishListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "iltep64": 13,
      "fangpinsern": 1,
      "-": 48,
      "FelixNWJ": 9
    }
  },
  {
    "path": "src/main/resources/view/MealListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "  \u003cText styleClass\u003d\"listHeader\"\u003eConsumed Meals\u003c/Text\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "  \u003cListView fx:id\u003d\"mealListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "fangpinsern": 2,
      "iltep64": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/NotificationWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Notification\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "               \u003cLabel fx:id\u003d\"notificationMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "MauriceTXS": 33
    }
  },
  {
    "path": "src/main/resources/view/ReportWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.chart.BarChart?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.paint.Color?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Report\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "         \u003croot\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            \u003cVBox prefHeight\u003d\"600.0\" prefWidth\u003d\"900.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \u003cSplitPane dividerPositions\u003d\"0.2505567928730512, 0.5\" focusTraversable\u003d\"true\" prefHeight\u003d\"-1.0\" prefWidth\u003d\"-1.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                  \u003citems\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        \u003cSplitPane dividerPositions\u003d\"0.5, 0.5, 0.5\" orientation\u003d\"VERTICAL\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                           \u003citems\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                              \u003cLabel fx:id\u003d\"numericalStatistics\" minHeight\u003d\"36.0\" prefHeight\u003d\"35.0\" prefWidth\u003d\"225.0\" text\u003d\"Numerical Statistics\" textAlignment\u003d\"CENTER\" underline\u003d\"true\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                    \u003cFont size\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                 \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                              \u003cTextFlow fx:id\u003d\"maximumCalorie\" maxHeight\u003d\"200.0\" minHeight\u003d\"200.0\" prefHeight\u003d\"200.0\" stylesheets\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                              \u003cTextFlow fx:id\u003d\"minimumCalorie\" maxHeight\u003d\"200.0\" minHeight\u003d\"200.0\" prefHeight\u003d\"200.0\" stylesheets\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                              \u003cTextFlow fx:id\u003d\"averageCalorie\" maxHeight\u003d\"200.0\" minHeight\u003d\"200.0\" prefHeight\u003d\"200.0\" stylesheets\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                           \u003c/items\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        \u003cSplitPane dividerPositions\u003d\"0.5, 0.5\" orientation\u003d\"VERTICAL\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                           \u003citems\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                              \u003cLabel fx:id\u003d\"foodStatistics\" minHeight\u003d\"36.0\" prefHeight\u003d\"35.0\" prefWidth\u003d\"255.0\" text\u003d\"Food Statistics\" textAlignment\u003d\"CENTER\" underline\u003d\"true\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                    \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                              \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                              \u003cTextFlow fx:id\u003d\"countCalorieExceeded\" maxHeight\u003d\"200.0\" minHeight\u003d\"200.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                              \u003cScrollPane fx:id\u003d\"foodListScrollPane\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                 \u003ccontent\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                    \u003cTextFlow fx:id\u003d\"mostConsumedMeal\" prefHeight\u003d\"405.0\" prefWidth\u003d\"218.0\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                 \u003c/content\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                              \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                           \u003c/items\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        \u003cSplitPane dividerPositions\u003d\"0.5\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"200.0\" prefWidth\u003d\"160.0\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                          \u003citems\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                              \u003cBarChart fx:id\u003d\"calorieOverTime\" legendVisible\u003d\"false\" title\u003d\"Calories Over Time\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                \u003cxAxis\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                  \u003cCategoryAxis label\u003d\"Dates\" side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                \u003cyAxis\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                  \u003cNumberAxis label\u003d\"Calorie Intake\" side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                              \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                              \u003cScrollPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                 \u003ccontent\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                    \u003cBarChart fx:id\u003d\"foodChart\" title\u003d\"Quantity of Food Consumed\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                      \u003cxAxis\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                        \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                      \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                      \u003cyAxis\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                        \u003cNumberAxis label\u003d\"Quantity Consumed\" minorTickLength\u003d\"0.5\" minorTickVisible\u003d\"false\" side\u003d\"LEFT\" tickUnit\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                      \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                    \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                 \u003c/content\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                              \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                          \u003c/items\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                  \u003c/items\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \u003cHBox id\u003d\"HBox\" alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    \u003cLabel maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-1.0\" text\u003d\"Left status\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                      \u003cfont\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        \u003cFont size\u003d\"11.0\" fx:id\u003d\"x3\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                      \u003c/font\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                      \u003ctextFill\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        \u003cColor blue\u003d\"0.625\" green\u003d\"0.625\" red\u003d\"0.625\" fx:id\u003d\"x4\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                      \u003c/textFill\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    \u003cPane prefHeight\u003d\"-1.0\" prefWidth\u003d\"-1.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    \u003cLabel font\u003d\"$x3\" maxWidth\u003d\"-1.0\" text\u003d\"Right status\" textFill\u003d\"$x4\" HBox.hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "         \u003c/root\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 101
    }
  },
  {
    "path": "src/test/java/calofit/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 2,
      "-": 56
    }
  },
  {
    "path": "src/test/java/calofit/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/calofit/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 4,
      "-": 132
    }
  },
  {
    "path": "src/test/java/calofit/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        final Index fifthDishIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertTrue(fifthDishIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertTrue(fifthDishIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertTrue(fifthDishIndex.equals(fifthDishIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertFalse(fifthDishIndex.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertFalse(fifthDishIndex.equals(5.0f));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertFalse(fifthDishIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 12,
      "-": 49
    }
  },
  {
    "path": "src/test/java/calofit/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/calofit_logo.png\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, errorMessage, ()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 7,
      "fangpinsern": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/calofit/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 6,
      "-": 103
    }
  },
  {
    "path": "src/test/java/calofit/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 8,
      "-": 108
    }
  },
  {
    "path": "src/test/java/calofit/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 4,
      "-": 20
    }
  },
  {
    "path": "src/test/java/calofit/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/calofit/commons/util/ObservableListUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.mockito.Mockito.atLeastOnce;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.mockito.Mockito.mock;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.mockito.Mockito.times;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.mockito.Mockito.verify;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.beans.binding.DoubleBinding;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.mockito.AdditionalAnswers;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.mockito.ArgumentCaptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.mockito.Captor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.mockito.Mock;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.mockito.MockitoAnnotations;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "class ObservableListUtilTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    abstract static class ObservableListBaseTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private ObservableList\u003cInteger\u003e sourceList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private ObservableList\u003c? extends Integer\u003e mappedList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        //Mocked, but we need to generate Answer at runtime"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private Function\u003cInteger, Integer\u003e mapFunc;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Mock"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private ListChangeListener\u003cInteger\u003e listener;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Captor"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private ArgumentCaptor\u003cInteger\u003e argCaptor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Captor"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private ArgumentCaptor\u003cListChangeListener.Change\u003cInteger\u003e\u003e changeCaptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private int square(int x) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return x * x;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * Allows subclass to construct tested object, from source list and mapping function."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * This function is generic in the source/target types, to prevent subclasses from cheating."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * @param source Source list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * @param func Mapping function"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * @param \u003cS\u003e Source type"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * @param \u003cT\u003e Target type"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * @return Mapped list to test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        protected abstract \u003cS, T\u003e ObservableList\u003c? extends T\u003e makeMappedList(ObservableList\u003cS\u003e source,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                                                                             Function\u003c? super S, ? extends T\u003e func);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @BeforeEach"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        void setUp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            MockitoAnnotations.initMocks(this);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            sourceList \u003d FXCollections.observableArrayList(1, 2, 3, 4, 5);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            mapFunc \u003d mock(Function.class, AdditionalAnswers.answer(this::square));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            mappedList \u003d makeMappedList(sourceList, mapFunc);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            mappedList.addListener(listener);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        void testGet() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertEquals(mappedList.get(2), 9);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            verify(mapFunc, atLeastOnce()).apply(argCaptor.capture());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertTrue(argCaptor.getAllValues().contains(sourceList.get(2)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        void testMapping() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            List\u003cInteger\u003e expected \u003d sourceList.stream().map(this::square).collect(Collectors.toList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertEquals(expected, mappedList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        void testRemove() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            sourceList.remove(Integer.valueOf(2));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            verify(listener, times(1)).onChanged(changeCaptor.capture());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            ListChangeListener.Change\u003cInteger\u003e change \u003d changeCaptor.getValue();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertTrue(change.next());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertEquals(1, change.getFrom());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertEquals(1, change.getTo());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertTrue(change.wasRemoved());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertEquals(List.of(4), change.getRemoved());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertFalse(change.next());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            testMapping();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        void testSet() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            sourceList.set(1, 9);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            verify(listener, times(1)).onChanged(changeCaptor.capture());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            ListChangeListener.Change\u003cInteger\u003e change \u003d changeCaptor.getValue();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertTrue(change.next());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertEquals(1, change.getFrom());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertEquals(2, change.getTo());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertTrue(change.wasReplaced());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertEquals(List.of(81), mappedList.subList(change.getFrom(), change.getTo()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertFalse(change.next());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            testMapping();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        void testAdd() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            sourceList.add(6);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            verify(listener, times(1)).onChanged(changeCaptor.capture());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            ListChangeListener.Change\u003cInteger\u003e change \u003d changeCaptor.getValue();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertTrue(change.next());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertEquals(5, change.getFrom());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertEquals(6, change.getTo());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertTrue(change.wasAdded());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertEquals(List.of(36), mappedList.subList(change.getFrom(), change.getTo()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            assertFalse(change.next());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            testMapping();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    static class MappedListTest extends ObservableListBaseTest {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        protected \u003cS, T\u003e ObservableList\u003c? extends T\u003e makeMappedList(ObservableList\u003cS\u003e source,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                                                                    Function\u003c? super S, ? extends T\u003e func) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return ObservableListUtil.lazyMap(source, func);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    static class BoundListTest extends ObservableListBaseTest {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        protected \u003cS, T\u003e ObservableList\u003c? extends T\u003e makeMappedList(ObservableList\u003cS\u003e source,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                                                                    Function\u003c? super S, ? extends T\u003e func) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return ObservableListUtil.map(source, func);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    void testSum() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ObservableList\u003cDouble\u003e source \u003d FXCollections.observableArrayList(3.0, 1.0, 4.0, 1.0, 5.0, 9.0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        DoubleBinding sum \u003d ObservableListUtil.sum(source);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(source.stream().mapToDouble(Double::doubleValue).sum(), sum.get());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        source.set(2, 5.0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(source.stream().mapToDouble(Double::doubleValue).sum(), sum.get());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        source.add(9.0);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(source.stream().mapToDouble(Double::doubleValue).sum(), sum.get());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        source.remove(source.size() - 2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(source.stream().mapToDouble(Double::doubleValue).sum(), sum.get());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 169
    }
  },
  {
    "path": "src/test/java/calofit/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 10,
      "-": 136
    }
  },
  {
    "path": "src/test/java/calofit/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import static calofit.commons.core.Messages.MESSAGE_INVALID_MEAL_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.ReadOnlyDishDatabase;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.ReadOnlyMealLog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.storage.JsonDishDatabaseStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.storage.JsonMealLogStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.DishBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalDishes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        JsonDishDatabaseStorage dishDatabaseStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                new JsonDishDatabaseStorage(temporaryFolder.resolve(\"dishDb.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        JsonMealLogStorage mealLogStorage \u003d new JsonMealLogStorage(temporaryFolder.resolve(\"mealLog.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                temporaryFolder.resolve(\"preferences.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        StorageManager storage \u003d new StorageManager(dishDatabaseStorage, mealLogStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        assertCommandException(deleteCommand, String.format(MESSAGE_INVALID_MEAL_INDEX, 9));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // Setup LogicManager with JsonDishDatabaseIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        JsonDishDatabaseStorage dishDatabaseStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                new JsonDishDatabaseIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionDishDb.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        JsonMealLogStorage mealLogStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                new JsonMealLogIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionMealLog.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                new JsonUserPrefsStorage("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        StorageManager storage \u003d new StorageManager(dishDatabaseStorage, mealLogStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + CommandTestUtil.NAME_DESC_DUCK_RICE"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + CommandTestUtil.CALORIE_DESC_1000;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Dish expectedDish \u003d new DishBuilder(TypicalDishes.DUCK_RICE).withTags().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        expectedModel.addDish(expectedDish);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void getFilteredDishList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredDishList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getDishDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called for {@code DishDatabase}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static class JsonDishDatabaseIoExceptionThrowingStub extends JsonDishDatabaseStorage {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private JsonDishDatabaseIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public void saveDishDatabase(ReadOnlyDishDatabase dishDatabase, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called for MealLog."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private static class JsonMealLogIoExceptionThrowingStub extends JsonMealLogStorage {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        private JsonMealLogIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        public void saveMealLog(ReadOnlyMealLog mealLog, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 37,
      "fangpinsern": 2,
      "-": 125,
      "FelixNWJ": 22
    }
  },
  {
    "path": "src/test/java/calofit/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.DishBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalDishes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        model \u003d new ModelManager(TypicalDishes.getTypicalDishDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void execute_newDish_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Dish validDish \u003d new DishBuilder().withName(\"Charlie\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getDishDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        expectedModel.addDish(validDish);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertCommandSuccess(new AddCommand(validDish), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validDish), expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 38
    }
  },
  {
    "path": "src/test/java/calofit/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.mockito.Mockito;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.DishDatabase;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import calofit.model.dish.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.ReadOnlyDishDatabase;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.MealLog;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.DishBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void constructor_nullDish_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new AddCommand((Dish) null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void execute_dishAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ModelStubAcceptingDishAdded modelStub \u003d Mockito.spy(ModelStubAcceptingDishAdded.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Dish validDish \u003d new DishBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validDish).execute(modelStub);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validDish), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(Arrays.asList(validDish), modelStub.dishesAdded);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Dish alice \u003d new DishBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Dish bob \u003d new DishBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // different dish -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * A Model stub that always accept the dish being added."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private abstract static class ModelStubAcceptingDishAdded implements Model {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        final ArrayList\u003cDish\u003e dishesAdded;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        final MealLog mealLog;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public ModelStubAcceptingDishAdded() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            dishesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            mealLog \u003d new MealLog();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public boolean hasDish(Dish dish) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            requireNonNull(dish);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return dishesAdded.stream().anyMatch(dish::isSameDish);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public void addDish(Dish dish) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            requireNonNull(dish);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            dishesAdded.add(dish);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        public boolean hasDishName(Name dishName) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            requireNonNull(dishName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            return dishesAdded.stream().anyMatch(dish -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                return dish.getName().toLowerCase().equals(dishName.toLowerCase());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        public Dish getDishByName(Name dishName) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            for (int i \u003d 0; i \u003c dishesAdded.size(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                Dish dishInList \u003d dishesAdded.get(i);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                if (dishInList.getName().toLowerCase().equals(dishName.toLowerCase())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                    return dishInList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        public MealLog getMealLog() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            return mealLog;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public ReadOnlyDishDatabase getDishDatabase() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return new DishDatabase();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 44,
      "fangpinsern": 29,
      "FelixNWJ": 1,
      "-": 44
    }
  },
  {
    "path": "src/test/java/calofit/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        //different showReport value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        // different showReport value -\u003e return different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true).hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 48,
      "FelixNWJ": 10
    }
  },
  {
    "path": "src/test/java/calofit/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.DishDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.EditDishDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String VALID_NAME_DUCK_RICE \u003d \"Duck Rice\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String VALID_NAME_MACARONI \u003d \"Macaroni\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static final int VALID_CALORIE_1000 \u003d 1000;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String VALID_TAG_SALTY \u003d \"salty\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String VALID_TAG_EXPENSIVE \u003d \"expensive\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String NAME_DESC_DUCK_RICE \u003d \" \" + CliSyntax.PREFIX_NAME + VALID_NAME_DUCK_RICE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String NAME_DESC_MACARONI \u003d \" \" + CliSyntax.PREFIX_NAME + VALID_NAME_MACARONI;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String CALORIE_DESC_1000 \u003d \" \" + CliSyntax.PREFIX_CALORIES + VALID_CALORIE_1000;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String TAG_DESC_EXPENSIVE \u003d \" \" + CliSyntax.PREFIX_TAG + VALID_TAG_EXPENSIVE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String TAG_DESC_SALTY \u003d \" \" + CliSyntax.PREFIX_TAG + VALID_TAG_SALTY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"Duck Noodles\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String INVALID_NAME_LENGTH \u003d \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            + CliSyntax.PREFIX_NAME + \"hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String INVAID_CALORIES_NEGATIVE \u003d \" \" + CliSyntax.PREFIX_CALORIES + \"-1000\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + CliSyntax.PREFIX_TAG + \"bland*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final EditCommand.EditDishDescriptor DESC_DUCK_RICE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final EditCommand.EditDishDescriptor DESC_MACARONI;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        DESC_DUCK_RICE \u003d new EditDishDescriptorBuilder().withName(VALID_NAME_DUCK_RICE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .withCalories(VALID_CALORIE_1000)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .withTags(VALID_TAG_EXPENSIVE).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        DESC_MACARONI \u003d new EditDishDescriptorBuilder().withName(VALID_NAME_MACARONI)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .withCalories(VALID_CALORIE_1000)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .withTags(VALID_TAG_SALTY, VALID_TAG_EXPENSIVE).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * - the dish database, filtered dish list and selected dish in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        DishDatabase expectedDishDatabase \u003d new DishDatabase(actualModel.getDishDatabase());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        List\u003cDish\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredDishList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(expectedDishDatabase, actualModel.getDishDatabase());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredDishList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the dish at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * {@code model}\u0027s dish database."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static void showDishAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredDishList().size());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Dish dish \u003d model.getFilteredDishList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        final String[] splitName \u003d dish.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        model.setDishFilterPredicate(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(1, model.getFilteredDishList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 34,
      "MauriceTXS": 1,
      "-": 58,
      "FelixNWJ": 23
    }
  },
  {
    "path": "src/test/java/calofit/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//import static calofit.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//import static calofit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//import static calofit.logic.commands.CommandTestUtil.showDishAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//import calofit.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//import calofit.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//import calofit.model.meal.Meal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//import calofit.model.meal.MealLog;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalDishes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalDishes.getTypicalMealLog(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            TypicalDishes.getTypicalDishDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Meal mealToDelete \u003d model.getMealLog().getTodayMeals().get(TypicalIndexes.INDEX_FIRST_MEAL.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_MEAL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_MEAL_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //            mealToDelete.getDish().getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    ModelManager expectedModel \u003d new ModelManager(new MealLog(model.getMealLog()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //            model.getDishDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    expectedModel.removeMeal(mealToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDishList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_MEAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    showDishAtIndex(model, TypicalIndexes.INDEX_FIRST_MEAL);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Meal mealToDelete \u003d model.getMealLog().getTodayMeals().get(TypicalIndexes.INDEX_FIRST_MEAL.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_MEAL);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_MEAL_SUCCESS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //            mealToDelete.getDish().getName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Model expectedModel \u003d new ModelManager(new MealLog(model.getMealLog()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //            model.getDishDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    expectedModel.removeMeal(mealToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    showNoDish(expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    showDishAtIndex(model, TypicalIndexes.INDEX_FIRST_MEAL);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_MEAL;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    // ensures that outOfBoundIndex is still in bounds of dish database list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getDishDatabase().getDishList().size());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    assertCommandFailure(deleteCommand, model,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //            String.format(Messages.MESSAGE_INVALID_MEAL_INDEX, outOfBoundIndex.getOneBased()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        ArrayList\u003cInteger\u003e typicalIndexFirstMeal \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        ArrayList\u003cInteger\u003e typicalIndexSecondMeal \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        typicalIndexFirstMeal.add(TypicalIndexes.INDEX_FIRST_MEAL.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        typicalIndexSecondMeal.add(TypicalIndexes.INDEX_SECOND_MEAL.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(typicalIndexFirstMeal);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(typicalIndexSecondMeal);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(typicalIndexFirstMeal);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // different dish -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private void showNoDish(Model model) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        model.setDishFilterPredicate(p -\u003e false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertTrue(model.getFilteredDishList().isEmpty());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 15,
      "fangpinsern": 71,
      "MauriceTXS": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/calofit/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//import calofit.model.dish.DishDatabase;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//import calofit.model.meal.Meal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//import calofit.model.meal.MealLog;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//import calofit.model.util.Timestamp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "//import calofit.testutil.DishBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.EditDishDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalDishes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalDishes.getTypicalMealLog(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "            TypicalDishes.getTypicalDishDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Dish editedDish \u003d new DishBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Meal editedMeal \u003d new Meal(editedDish, new Timestamp(LocalDateTime.now()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    EditCommand.EditDishDescriptor descriptor \u003d new EditDishDescriptorBuilder(editedDish).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_MEAL, descriptor);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MEAL_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //            model.getMealLog().getTodayMeals().get(0), editedMeal);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Model expectedModel \u003d new ModelManager(new MealLog(model.getMealLog()),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //            new DishDatabase(model.getDishDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    expectedModel.getMealLog().setMeal(model.getMealLog().getTodayMeals().get(0), editedMeal);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    CommandTestUtil.assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Index indexLastMeal \u003d Index.fromOneBased(model.getMealLog().getTodayMeals().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Meal lastMeal \u003d model.getMealLog().getTodayMeals().get(indexLastMeal.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Dish lastDish \u003d lastMeal.getDish();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    DishBuilder dishInList \u003d new DishBuilder(lastDish);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Dish editedDish \u003d dishInList.withName(CommandTestUtil.VALID_NAME_MACARONI)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //            .withTags(CommandTestUtil.VALID_TAG_SALTY).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Meal editedMeal \u003d new Meal(editedDish, new Timestamp(LocalDateTime.now()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    EditCommand.EditDishDescriptor descriptor \u003d new EditDishDescriptorBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //            .withName(CommandTestUtil.VALID_NAME_MACARONI)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //            .withTags(CommandTestUtil.VALID_TAG_SALTY).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    EditCommand editCommand \u003d new EditCommand(indexLastMeal, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MEAL_SUCCESS, editedMeal);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Model expectedModel \u003d new ModelManager(new MealLog(model.getMealLog()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //            new DishDatabase(model.getDishDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    expectedModel.getMealLog().setMeal(lastMeal, editedMeal);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    CommandTestUtil.assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_MEAL,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //            new EditCommand.EditDishDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Dish editedDish \u003d model.getFilteredDishList().get(TypicalIndexes.INDEX_FIRST_MEAL.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MEAL_SUCCESS, editedDish);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Model expectedModel \u003d new ModelManager(new DishDatabase(model.getDishDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    CommandTestUtil.assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    CommandTestUtil.showDishAtIndex(model, TypicalIndexes.INDEX_FIRST_MEAL);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Dish dishInFilteredList \u003d model.getFilteredDishList().get(TypicalIndexes.INDEX_FIRST_MEAL.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Dish editedDish \u003d new DishBuilder(dishInFilteredList).withName(CommandTestUtil.VALID_NAME_MACARONI).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_MEAL,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //            new EditDishDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_MACARONI).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MEAL_SUCCESS, editedDish);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Model expectedModel \u003d new ModelManager(new DishDatabase(model.getDishDatabase()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    expectedModel.setDish(model.getFilteredDishList().get(0), editedDish);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    CommandTestUtil.assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //public void execute_duplicateDishUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Dish firstDish \u003d model.getFilteredDishList().get(TypicalIndexes.INDEX_FIRST_MEAL.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    EditCommand.EditDishDescriptor descriptor \u003d new EditDishDescriptorBuilder(firstDish).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_SECOND_MEAL, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    CommandTestUtil.assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_MEAL);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //public void execute_duplicateDishFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    CommandTestUtil.showDishAtIndex(model, TypicalIndexes.INDEX_FIRST_MEAL);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    // edit dish in filtered list into a duplicate in dish database"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    Dish dishInList \u003d model.getDishDatabase().getDishList().get(TypicalIndexes.INDEX_SECOND_MEAL.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_MEAL,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //            new EditDishDescriptorBuilder(dishInList).build());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //    CommandTestUtil.assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_MEAL);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void execute_invalidDishIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDishList().size() + 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        EditCommand.EditDishDescriptor descriptor \u003d new EditDishDescriptorBuilder()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .withName(CommandTestUtil.VALID_NAME_MACARONI).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_MEAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * but smaller than size of dish database"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void execute_invalidDishIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandTestUtil.showDishAtIndex(model, TypicalIndexes.INDEX_FIRST_MEAL);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_MEAL;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of dish database list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getDishDatabase().getDishList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                new EditDishDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_MACARONI).build());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_MEAL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        final EditCommand standardCommand \u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                new EditCommand(TypicalIndexes.INDEX_FIRST_MEAL, CommandTestUtil.DESC_DUCK_RICE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        EditCommand.EditDishDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                new EditCommand.EditDishDescriptor(CommandTestUtil.DESC_DUCK_RICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_MEAL, copyDescriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(TypicalIndexes.INDEX_SECOND_MEAL,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                CommandTestUtil.DESC_DUCK_RICE)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertFalse(standardCommand.equals("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                new EditCommand(TypicalIndexes.INDEX_FIRST_MEAL, CommandTestUtil.DESC_MACARONI)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 67,
      "fangpinsern": 104,
      "FelixNWJ": 9
    }
  },
  {
    "path": "src/test/java/calofit/logic/commands/EditDishDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.EditDishDescriptorBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class EditDishDescriptorTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        EditCommand.EditDishDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new EditCommand.EditDishDescriptor(CommandTestUtil.DESC_DUCK_RICE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assertions.assertTrue(CommandTestUtil.DESC_DUCK_RICE.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assertions.assertTrue(CommandTestUtil.DESC_DUCK_RICE.equals(CommandTestUtil.DESC_DUCK_RICE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assertions.assertFalse(CommandTestUtil.DESC_DUCK_RICE.equals(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assertions.assertFalse(CommandTestUtil.DESC_DUCK_RICE.equals(5));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assertions.assertFalse(CommandTestUtil.DESC_DUCK_RICE.equals(CommandTestUtil.DESC_MACARONI));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        EditCommand.EditDishDescriptor editedMeal \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new EditDishDescriptorBuilder(CommandTestUtil.DESC_DUCK_RICE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .withName(CommandTestUtil.VALID_NAME_MACARONI).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assertions.assertFalse(CommandTestUtil.DESC_DUCK_RICE.equals(editedMeal));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        editedMeal \u003d new EditDishDescriptorBuilder(CommandTestUtil.DESC_DUCK_RICE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_SALTY).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assertions.assertFalse(CommandTestUtil.DESC_DUCK_RICE.equals(editedMeal));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 27,
      "FelixNWJ": 13
    }
  },
  {
    "path": "src/test/java/calofit/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                false, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 4,
      "-": 14,
      "FelixNWJ": 2
    }
  },
  {
    "path": "src/test/java/calofit/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.core.Messages.MESSAGE_DISHES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalDishes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalDishes.getTypicalDishDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(TypicalDishes.getTypicalDishDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // different dish -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void execute_zeroKeywords_noDishFound() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DISHES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        expectedModel.setDishFilterPredicate(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredDishList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void execute_multipleKeywords_multipleDishesFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DISHES_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"spaghetti\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        expectedModel.setDishFilterPredicate(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(Arrays.asList(TypicalDishes.SPAGHETTI),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                model.getFilteredDishList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 16,
      "MauriceTXS": 2,
      "-": 60,
      "FelixNWJ": 3
    }
  },
  {
    "path": "src/test/java/calofit/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 4,
      "-": 14,
      "FelixNWJ": 1
    }
  },
  {
    "path": "src/test/java/calofit/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.logic.commands.CommandTestUtil.showDishAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalDishes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        model \u003d new ModelManager(TypicalDishes.getTypicalDishDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getDishDatabase(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        showDishAtIndex(model, TypicalIndexes.INDEX_FIRST_MEAL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 11,
      "-": 28
    }
  },
  {
    "path": "src/test/java/calofit/logic/commands/ReportCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import org.mockito.Mockito;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.Meal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.MealLog;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class ReportCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void test_commandResult_returned() throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Model mockModel \u003d Mockito.mock(Model.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        MealLog mockMealLog \u003d Mockito.mock(MealLog.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        ReportCommand reportCommand \u003d new ReportCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        CommandResult mockResult \u003d Mockito.mock(CommandResult.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        ObservableList\u003cMeal\u003e emptyListSpy \u003d Mockito.spy(FXCollections.observableList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Mockito.doReturn(ReportCommand.MESSAGE_SUCCESS).when(mockResult).getFeedbackToUser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Mockito.doReturn(mockMealLog).when(mockModel).getMealLog();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Mockito.doReturn(emptyListSpy).when(mockMealLog).getCurrentMonthMeals();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Mockito.doReturn(1).when(emptyListSpy).size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        CommandResult actualResult \u003d reportCommand.execute(mockModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(actualResult.getFeedbackToUser(), mockResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertTrue(actualResult.isShowReport());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertFalse(actualResult.isExit());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertFalse(actualResult.isShowHelp());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void test_commandException_thrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Model mockModel \u003d Mockito.mock(Model.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        ReportCommand failedCommand \u003d new ReportCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        MealLog mockMealLog \u003d Mockito.mock(MealLog.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        ObservableList\u003cMeal\u003e emptyListSpy \u003d Mockito.spy(FXCollections.observableList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Mockito.doReturn(mockMealLog).when(mockModel).getMealLog();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Mockito.doReturn(emptyListSpy).when(mockMealLog).getCurrentMonthMeals();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Mockito.doReturn(0).when(emptyListSpy).size();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e failedCommand.execute(mockModel));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 61
    }
  },
  {
    "path": "src/test/java/calofit/logic/commands/SetBudgetCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.mockito.Mockito;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.CalorieBudget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Calorie;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class SetBudgetCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final Calorie VALID_CALORIE \u003d new Calorie(234);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void testSetBudget() throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CalorieBudget mockBudget \u003d Mockito.mock(CalorieBudget.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Mockito.doNothing().when(mockBudget).setCurrentBudget(Mockito.anyInt());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Model mockModel \u003d Mockito.mock(Model.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Mockito.doReturn(mockBudget).when(mockModel).getCalorieBudget();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        SetBudgetCommand cmd \u003d new SetBudgetCommand(VALID_CALORIE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        cmd.execute(mockModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Mockito.verify(mockBudget).setCurrentBudget(VALID_CALORIE.getValue());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Mockito.verifyNoMoreInteractions(mockBudget);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 29
    }
  },
  {
    "path": "src/test/java/calofit/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.DishBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalDishes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Dish expectedDish \u003d new DishBuilder(TypicalDishes.MACARONI)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_EXPENSIVE).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, CommandTestUtil.PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + CommandTestUtil.NAME_DESC_MACARONI"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + CommandTestUtil.CALORIE_DESC_1000"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + CommandTestUtil.TAG_DESC_EXPENSIVE, new AddCommand(expectedDish));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Dish expectedDishMultipleTags \u003d new DishBuilder(TypicalDishes.MACARONI)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_EXPENSIVE, CommandTestUtil.VALID_TAG_SALTY)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, CommandTestUtil.NAME_DESC_MACARONI"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + CommandTestUtil.CALORIE_DESC_1000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + CommandTestUtil.TAG_DESC_SALTY + CommandTestUtil.TAG_DESC_EXPENSIVE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                new AddCommand(expectedDishMultipleTags));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Dish expectedDish \u003d new DishBuilder(TypicalDishes.DUCK_RICE).withTags().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                CommandTestUtil.NAME_DESC_DUCK_RICE + CommandTestUtil.CALORIE_DESC_1000,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                new AddCommand(expectedDish));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \" macaroni\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.INVALID_NAME_DESC"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + CommandTestUtil.CALORIE_DESC_1000"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + CommandTestUtil.TAG_DESC_SALTY + CommandTestUtil.TAG_DESC_EXPENSIVE, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.INVALID_NAME_LENGTH"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + CommandTestUtil.CALORIE_DESC_1000"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + CommandTestUtil.TAG_DESC_SALTY + CommandTestUtil.TAG_DESC_EXPENSIVE, Name.LENGTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.NAME_DESC_MACARONI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + CommandTestUtil.CALORIE_DESC_1000"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + CommandTestUtil.INVALID_TAG_DESC + CommandTestUtil.VALID_TAG_EXPENSIVE, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.PREAMBLE_NON_EMPTY"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        + CommandTestUtil.NAME_DESC_MACARONI"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        + CommandTestUtil.CALORIE_DESC_1000"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        + CommandTestUtil.TAG_DESC_SALTY"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        + CommandTestUtil.TAG_DESC_EXPENSIVE,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 57,
      "fangpinsern": 1,
      "FelixNWJ": 26
    }
  },
  {
    "path": "src/test/java/calofit/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/calofit/logic/parser/CommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.DishBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.DishUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.EditDishDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class CommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Dish dish \u003d new DishBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(DishUtil.getAddCommand(dish));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(new AddCommand(dish), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + TypicalIndexes.INDEX_FIRST_MEAL.getOneBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        List\u003cInteger\u003e mealIndexList \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        mealIndexList.add(TypicalIndexes.INDEX_FIRST_MEAL.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        assertEquals(new DeleteCommand(mealIndexList), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Dish dish \u003d new DishBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        EditCommand.EditDishDescriptor descriptor \u003d new EditDishDescriptorBuilder(dish).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                + TypicalIndexes.INDEX_FIRST_MEAL.getOneBased() + \" \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + DishUtil.getEditDishDescriptorDetails(descriptor)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(new EditCommand(TypicalIndexes.INDEX_FIRST_MEAL, descriptor), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 38,
      "fangpinsern": 4,
      "-": 56,
      "FelixNWJ": 2
    }
  },
  {
    "path": "src/test/java/calofit/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/calofit/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        ArrayList\u003cInteger\u003e typicalIndexFirstMeal \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        typicalIndexFirstMeal.add(TypicalIndexes.INDEX_FIRST_MEAL.getZeroBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \" 1\", new DeleteCommand(typicalIndexFirstMeal));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \" a\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 6,
      "fangpinsern": 4,
      "-": 25
    }
  },
  {
    "path": "src/test/java/calofit/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.EditDishDescriptorBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, CommandTestUtil.VALID_NAME_DUCK_RICE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"-5\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + CommandTestUtil.NAME_DESC_DUCK_RICE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"0\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + CommandTestUtil.NAME_DESC_DUCK_RICE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                \"1\" + CommandTestUtil.INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                \"1\" + CommandTestUtil.INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Dish} being edited,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \"1\" + CommandTestUtil.TAG_DESC_EXPENSIVE"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        + CommandTestUtil.TAG_DESC_SALTY + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \"1\" + CommandTestUtil.TAG_DESC_EXPENSIVE + TAG_EMPTY"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        + CommandTestUtil.TAG_DESC_SALTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                \"1\" + TAG_EMPTY + CommandTestUtil.TAG_DESC_EXPENSIVE"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        + CommandTestUtil.TAG_DESC_SALTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_SECOND_MEAL;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.TAG_DESC_SALTY"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                + CommandTestUtil.NAME_DESC_DUCK_RICE + CommandTestUtil.TAG_DESC_EXPENSIVE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        EditCommand.EditDishDescriptor descriptor \u003d new EditDishDescriptorBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .withName(CommandTestUtil.VALID_NAME_DUCK_RICE)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_SALTY, CommandTestUtil.VALID_TAG_EXPENSIVE).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_MEAL;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.NAME_DESC_DUCK_RICE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        EditCommand.EditDishDescriptor descriptor \u003d new EditDishDescriptorBuilder()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .withName(CommandTestUtil.VALID_NAME_DUCK_RICE).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.TAG_DESC_EXPENSIVE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        descriptor \u003d new EditDishDescriptorBuilder().withTags(CommandTestUtil.VALID_TAG_EXPENSIVE).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_MEAL;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        EditCommand.EditDishDescriptor descriptor \u003d new EditDishDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 96,
      "FelixNWJ": 19
    }
  },
  {
    "path": "src/test/java/calofit/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/calofit/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(ParseException.class, ParserUtil.MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_MEAL, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_MEAL, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 22,
      "-": 95
    }
  },
  {
    "path": "src/test/java/calofit/logic/parser/SetBudgetCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.SetBudgetCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Calorie;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class SetBudgetCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final int VALID_CALORIE \u003d 724;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final int INVALID_CALORIE \u003d -360;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final String NONNUMERIC_INPUT \u003d \"ABC\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void testSuccessfulParse() throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        SetBudgetCommand expected \u003d new SetBudgetCommand(new Calorie(VALID_CALORIE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        SetBudgetCommandParser parser \u003d new SetBudgetCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        SetBudgetCommand parseResult \u003d parser.parse(Integer.toString(VALID_CALORIE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(expected, parseResult);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void testNegativeCalories() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        SetBudgetCommandParser parser \u003d new SetBudgetCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(Integer.toString(INVALID_CALORIE)),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            SetBudgetCommandParser.MISSING_CALORIE_FIELD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void testNonnumericInput() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        SetBudgetCommandParser parser \u003d new SetBudgetCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(NONNUMERIC_INPUT),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            Calorie.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 40
    }
  },
  {
    "path": "src/test/java/calofit/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "import static calofit.model.Model.PREDICATE_SHOW_DEFAULT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.DishDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.DishDatabaseBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalDishes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(new DishDatabase(), new DishDatabase(modelManager.getDishDatabase()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        userPrefs.setDishDatabaseFilePath(Paths.get(\"dishdb/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        userPrefs.setDishDatabaseFilePath(Paths.get(\"new/dishdb/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDishDatabaseFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.setDishDatabaseFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDishDatabaseFilePath_validPath_setsDishDatabaseFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Path path \u003d Paths.get(\"dishdb/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        modelManager.setDishDatabaseFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(path, modelManager.getDishDatabaseFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void hasDish_nullDish_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e modelManager.hasDish(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void hasDish_dishNotInDishDatabase_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertFalse(modelManager.hasDish(TypicalDishes.SPAGHETTI));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void hasDish_dishInDishDatabase_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        modelManager.addDish(TypicalDishes.SPAGHETTI);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertTrue(modelManager.hasDish(TypicalDishes.SPAGHETTI));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void getFilteredDishList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredDishList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        DishDatabase dishDatabase \u003d new DishDatabaseBuilder().withDish(TypicalDishes.SPAGHETTI)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .withDish(TypicalDishes.MUSHROOM_SOUP).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        DishDatabase differentDishDatabase \u003d new DishDatabase();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        modelManager \u003d new ModelManager(dishDatabase, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(dishDatabase, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // different dishDatabase -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentDishDatabase, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String[] keywords \u003d TypicalDishes.SPAGHETTI.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        modelManager.setDishFilterPredicate(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(dishDatabase, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MauriceTXS"
        },
        "content": "        modelManager.setDishFilterPredicate(PREDICATE_SHOW_DEFAULT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        differentUserPrefs.setDishDatabaseFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(dishDatabase, differentUserPrefs)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 42,
      "MauriceTXS": 3,
      "-": 82,
      "FelixNWJ": 6
    }
  },
  {
    "path": "src/test/java/calofit/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDishDatabaseFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setDishDatabaseFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 6,
      "-": 15
    }
  },
  {
    "path": "src/test/java/calofit/model/dish/DishDatabaseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static calofit.logic.commands.CommandTestUtil.VALID_TAG_SALTY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.exceptions.DuplicateDishException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.DishBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalDishes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class DishDatabaseTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final DishDatabase dishDatabase \u003d new DishDatabase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(Collections.emptyList(), dishDatabase.getDishList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e dishDatabase.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void resetData_withValidReadOnlyDishDatabase_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        DishDatabase newData \u003d TypicalDishes.getTypicalDishDatabase();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        dishDatabase.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(newData, dishDatabase);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void resetData_withDuplicateDishes_throwsDuplicateDishesException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // Two dishes with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Dish editedSpaghetti \u003d new DishBuilder(TypicalDishes.SPAGHETTI).withTags(VALID_TAG_SALTY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        List\u003cDish\u003e newDishes \u003d Arrays.asList(TypicalDishes.SPAGHETTI, editedSpaghetti);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        DishDatabaseStub newData \u003d new DishDatabaseStub(newDishes);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(DuplicateDishException.class, () -\u003e dishDatabase.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void hasDish_nullDish_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e dishDatabase.hasDish(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void hasDish_dishNotInDishDatabase_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertFalse(dishDatabase.hasDish(TypicalDishes.SPAGHETTI));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void hasDish_dishInDishDatabase_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        dishDatabase.addDish(TypicalDishes.SPAGHETTI);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertTrue(dishDatabase.hasDish(TypicalDishes.SPAGHETTI));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void hasDish_dishWithSameIdentityFieldsInDishDatabase_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        dishDatabase.addDish(TypicalDishes.SPAGHETTI);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Dish editedSpaghetti \u003d new DishBuilder(TypicalDishes.SPAGHETTI).withTags(VALID_TAG_SALTY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertTrue(dishDatabase.hasDish(editedSpaghetti));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void getDishList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e dishDatabase.getDishList().remove(0));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * A stub ReadOnlyDishDatabase whose dishes list can violate interface constraints."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static class DishDatabaseStub implements ReadOnlyDishDatabase {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        private final ObservableList\u003cDish\u003e dishes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        DishDatabaseStub(Collection\u003cDish\u003e dishes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            this.dishes.setAll(dishes);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        public ObservableList\u003cDish\u003e getDishList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            return dishes;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 91,
      "FelixNWJ": 9
    }
  },
  {
    "path": "src/test/java/calofit/model/dish/DishTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.DishBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalDishes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class DishTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Dish dish \u003d new DishBuilder().build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, () -\u003e dish.getTags().remove(0));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void isSameDish() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assertions.assertTrue(TypicalDishes.SPAGHETTI.isSameDish(TypicalDishes.SPAGHETTI));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assertions.assertFalse(TypicalDishes.SPAGHETTI.isSameDish(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Dish editedDish \u003d new DishBuilder("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                TypicalDishes.SPAGHETTI).withName(CommandTestUtil.VALID_NAME_MACARONI).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assertions.assertFalse(TypicalDishes.SPAGHETTI.isSameDish(editedDish));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        editedDish \u003d new DishBuilder(TypicalDishes.SPAGHETTI).withTags(CommandTestUtil.VALID_TAG_SALTY).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assertions.assertTrue(TypicalDishes.SPAGHETTI.isSameDish(editedDish));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Dish spaghettiCopy \u003d new DishBuilder(TypicalDishes.SPAGHETTI).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assertions.assertTrue(TypicalDishes.SPAGHETTI.equals(spaghettiCopy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assertions.assertTrue(TypicalDishes.SPAGHETTI.equals(TypicalDishes.SPAGHETTI));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assertions.assertFalse(TypicalDishes.SPAGHETTI.equals(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assertions.assertFalse(TypicalDishes.SPAGHETTI.equals(5));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // different dish -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assertions.assertFalse(TypicalDishes.SPAGHETTI.equals(TypicalDishes.MACARONI));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Dish editedDish \u003d new DishBuilder("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                TypicalDishes.SPAGHETTI).withName(CommandTestUtil.VALID_NAME_MACARONI).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assertions.assertFalse(TypicalDishes.SPAGHETTI.equals(editedDish));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        editedDish \u003d new DishBuilder(TypicalDishes.SPAGHETTI).withTags(CommandTestUtil.VALID_TAG_SALTY).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assertions.assertFalse(TypicalDishes.SPAGHETTI.equals(editedDish));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 46,
      "FelixNWJ": 18
    }
  },
  {
    "path": "src/test/java/calofit/model/dish/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.DishBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // different dish -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertTrue(predicate.test(new DishBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertTrue(predicate.test(new DishBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertTrue(predicate.test(new DishBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertTrue(predicate.test(new DishBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertFalse(predicate.test(new DishBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertFalse(predicate.test(new DishBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 9,
      "-": 61
    }
  },
  {
    "path": "src/test/java/calofit/model/dish/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 6,
      "-": 35
    }
  },
  {
    "path": "src/test/java/calofit/model/dish/UniqueDishListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.exceptions.DishNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.exceptions.DuplicateDishException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.DishBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalDishes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class UniqueDishListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private final UniqueDishList uniqueDishList \u003d new UniqueDishList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void contains_nullDish_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueDishList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void contains_dishNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertFalse(uniqueDishList.contains(TypicalDishes.SPAGHETTI));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void contains_dishInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        uniqueDishList.add(TypicalDishes.SPAGHETTI);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertTrue(uniqueDishList.contains(TypicalDishes.SPAGHETTI));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void contains_dishWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        uniqueDishList.add(TypicalDishes.SPAGHETTI);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Dish editedSpaghetti \u003d new DishBuilder(TypicalDishes.SPAGHETTI).withTags(CommandTestUtil.VALID_TAG_SALTY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertTrue(uniqueDishList.contains(editedSpaghetti));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void add_nullDish_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueDishList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void add_duplicateDish_throwsDuplicateDishException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        uniqueDishList.add(TypicalDishes.SPAGHETTI);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assert.assertThrows(DuplicateDishException.class, () -\u003e uniqueDishList.add(TypicalDishes.SPAGHETTI));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDish_nullTargetDish_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueDishList.setDish(null, TypicalDishes.SPAGHETTI));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDish_nullEditedDish_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            uniqueDishList.setDish(TypicalDishes.SPAGHETTI, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDish_targetDishNotInList_throwsDishNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(DishNotFoundException.class, ()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            -\u003e uniqueDishList.setDish(TypicalDishes.SPAGHETTI, TypicalDishes.SPAGHETTI));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDish_editedDishIsSameDish_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        uniqueDishList.add(TypicalDishes.SPAGHETTI);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        uniqueDishList.setDish(TypicalDishes.SPAGHETTI, TypicalDishes.SPAGHETTI);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        UniqueDishList expectedUniqueDishList \u003d new UniqueDishList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        expectedUniqueDishList.add(TypicalDishes.SPAGHETTI);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(expectedUniqueDishList, uniqueDishList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDish_editedDishHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        uniqueDishList.add(TypicalDishes.SPAGHETTI);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Dish editedSpaghetti \u003d new DishBuilder(TypicalDishes.SPAGHETTI).withTags(CommandTestUtil.VALID_TAG_SALTY)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        uniqueDishList.setDish(TypicalDishes.SPAGHETTI, editedSpaghetti);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        UniqueDishList expectedUniqueDishList \u003d new UniqueDishList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        expectedUniqueDishList.add(editedSpaghetti);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(expectedUniqueDishList, uniqueDishList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDish_editedDishHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        uniqueDishList.add(TypicalDishes.SPAGHETTI);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        uniqueDishList.setDish(TypicalDishes.SPAGHETTI, TypicalDishes.MACARONI);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        UniqueDishList expectedUniqueDishList \u003d new UniqueDishList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        expectedUniqueDishList.add(TypicalDishes.MACARONI);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(expectedUniqueDishList, uniqueDishList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDish_editedDishHasNonUniqueIdentity_throwsDuplicateDishException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        uniqueDishList.add(TypicalDishes.SPAGHETTI);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        uniqueDishList.add(TypicalDishes.MACARONI);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(DuplicateDishException.class, ()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            -\u003e uniqueDishList.setDish(TypicalDishes.SPAGHETTI, TypicalDishes.MACARONI));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void remove_nullDish_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueDishList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void remove_dishDoesNotExist_throwsDishNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assert.assertThrows(DishNotFoundException.class, () -\u003e uniqueDishList.remove(TypicalDishes.SPAGHETTI));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void remove_existingDish_removesDish() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        uniqueDishList.add(TypicalDishes.SPAGHETTI);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        uniqueDishList.remove(TypicalDishes.SPAGHETTI);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        UniqueDishList expectedUniqueDishList \u003d new UniqueDishList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(expectedUniqueDishList, uniqueDishList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDishes_nullUniqueDishList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueDishList.setDishes((UniqueDishList) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDishes_uniqueDishList_replacesOwnListWithProvidedUniqueDishList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        uniqueDishList.add(TypicalDishes.SPAGHETTI);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        UniqueDishList expectedUniqueDishList \u003d new UniqueDishList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        expectedUniqueDishList.add(TypicalDishes.MACARONI);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        uniqueDishList.setDishes(expectedUniqueDishList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(expectedUniqueDishList, uniqueDishList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDishes_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e uniqueDishList.setDishes((List\u003cDish\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDishes_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        uniqueDishList.add(TypicalDishes.SPAGHETTI);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        List\u003cDish\u003e dishList \u003d Collections.singletonList(TypicalDishes.MACARONI);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        uniqueDishList.setDishes(dishList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        UniqueDishList expectedUniqueDishList \u003d new UniqueDishList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        expectedUniqueDishList.add(TypicalDishes.MACARONI);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(expectedUniqueDishList, uniqueDishList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void setDishes_listWithDuplicateDishes_throwsDuplicateDishException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        List\u003cDish\u003e listWithDuplicateDishes \u003d Arrays.asList(TypicalDishes.SPAGHETTI, TypicalDishes.SPAGHETTI);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(DuplicateDishException.class, () -\u003e uniqueDishList.setDishes(listWithDuplicateDishes));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            -\u003e uniqueDishList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 138,
      "FelixNWJ": 33
    }
  },
  {
    "path": "src/test/java/calofit/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 6,
      "-": 20
    }
  },
  {
    "path": "src/test/java/calofit/model/util/StatisticsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package calofit.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.SortedMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import org.mockito.Mockito;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.CalorieBudget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.MealLog;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.testutil.TypicalMeals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class StatisticsTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void statistical_calculation_valid() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        MealLog mockMealLog \u003d Mockito.mock(MealLog.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        CalorieBudget mockCalorieBudget \u003d Mockito.mock(CalorieBudget.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        SortedMap\u003cLocalDate, Integer\u003e tempMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        tempMap.put(LocalDate.now(), 1000);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Mockito.doReturn(TypicalMeals.getTypicalMealsObservableListOfSameMonth())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .when(mockMealLog).getCurrentMonthMeals();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Mockito.doReturn(tempMap).when(mockCalorieBudget).getCurrentMonthBudgetHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Statistics test \u003d Statistics.generateStatistics(mockMealLog.getCurrentMonthMeals(), mockCalorieBudget);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.getAverage(), Math.round(((double) ("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                TypicalMeals.SPAGHETTI.getDish().getCalories().getValue()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        + TypicalMeals.MUSHROOM_SOUP.getDish().getCalories().getValue()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        + TypicalMeals.CHICKEN_RICE.getDish().getCalories().getValue()))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                / ((double) LocalDate.now().lengthOfMonth())));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.getMaximum(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                 TypicalMeals.SPAGHETTI.getDish().getCalories().getValue()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        + TypicalMeals.MUSHROOM_SOUP.getDish().getCalories().getValue()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        + TypicalMeals.CHICKEN_RICE.getDish().getCalories().getValue());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.getMinimum(), 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.getCalorieExceedCount(), 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertTrue(test.getMostConsumedDishes().contains(TypicalMeals.SPAGHETTI.getDish()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertTrue(test.getMostConsumedDishes().contains(TypicalMeals.MUSHROOM_SOUP.getDish()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertTrue(test.getMostConsumedDishes().contains(TypicalMeals.CHICKEN_RICE.getDish()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.getFoodChartSeries().getData().get(0).getXValue(), \"Spaghetti\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.getFoodChartSeries().getData().get(1).getXValue(), \"Chicken Rice\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.getFoodChartSeries().getData().get(2).getXValue(), \"Mushroom Soup\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.getFoodChartSeries().getData().get(0).getYValue(), 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.getFoodChartSeries().getData().get(0).getYValue(), 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(test.getFoodChartSeries().getData().get(0).getYValue(), 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        for (int i \u003d 0; i \u003c LocalDate.now().lengthOfMonth(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            assertEquals(test.getCalorieChartSeries().getData().get(i).getXValue(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    String.valueOf(i + 1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            if (i + 1 \u003d\u003d LocalDateTime.now().getDayOfMonth()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                assertEquals(test.getCalorieChartSeries().getData().get(i).getYValue(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                        TypicalMeals.SPAGHETTI.getDish().getCalories().getValue()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                + TypicalMeals.MUSHROOM_SOUP.getDish().getCalories().getValue()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                                + TypicalMeals.CHICKEN_RICE.getDish().getCalories().getValue());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                assertEquals(test.getCalorieChartSeries().getData().get(i).getYValue(), 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 75
    }
  },
  {
    "path": "src/test/java/calofit/storage/JsonAdaptedDishTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static calofit.storage.JsonAdaptedDish.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.dish.Calorie;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalDishes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class JsonAdaptedDishTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private static final int INVALID_CALORIE \u003d -10;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private static final String VALID_NAME \u003d TypicalDishes.MUSHROOM_SOUP.getName().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private static final int VALID_CALORIE \u003d TypicalDishes.MUSHROOM_SOUP.getCalories().getValue();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d TypicalDishes.MUSHROOM_SOUP.getTags().stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void toModelType_validDishDetails_returnsDish() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        JsonAdaptedDish dish \u003d new JsonAdaptedDish(TypicalDishes.MUSHROOM_SOUP);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(TypicalDishes.MUSHROOM_SOUP, dish.toModelType());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        JsonAdaptedDish dish \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                new JsonAdaptedDish(INVALID_NAME, VALID_CALORIE, VALID_TAGS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, dish::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        JsonAdaptedDish dish \u003d new JsonAdaptedDish(null, VALID_CALORIE, VALID_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, dish::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void toModelType_invalidCalorie_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        JsonAdaptedDish dish \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                new JsonAdaptedDish(VALID_NAME, INVALID_CALORIE, VALID_TAGS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        String expectedMessage \u003d Calorie.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, dish::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        JsonAdaptedDish dish \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                new JsonAdaptedDish(VALID_NAME, VALID_CALORIE, invalidTags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, dish::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 44,
      "FelixNWJ": 23
    }
  },
  {
    "path": "src/test/java/calofit/storage/JsonAdaptedMealTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.testutil.TypicalMeals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class JsonAdaptedMealTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private static final String INVALID_TIMESTAMP \u003d \"2019\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private static final JsonAdaptedDish VALID_DISH \u003d new JsonAdaptedDish(TypicalMeals.MUSHROOM_SOUP.getDish());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void toModelType_validMealDetails_returnsMeal() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        JsonAdaptedMeal meal \u003d new JsonAdaptedMeal(TypicalMeals.MUSHROOM_SOUP);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(TypicalMeals.MUSHROOM_SOUP, meal.toModelType());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void toModelType_invalidTimeStamp_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        JsonAdaptedMeal meal \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                new JsonAdaptedMeal(VALID_DISH, INVALID_TIMESTAMP);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertThrows(DateTimeParseException.class, meal::toModelType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 31
    }
  },
  {
    "path": "src/test/java/calofit/storage/JsonDishDatabaseStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.DishDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.ReadOnlyDishDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalDishes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class JsonDishDatabaseStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonDishDatabaseStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void readDishDatabase_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e readDishDatabase(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private java.util.Optional\u003cReadOnlyDishDatabase\u003e readDishDatabase(String filePath) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return new JsonDishDatabaseStorage(Paths.get(filePath)).readDishDatabase(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertFalse(readDishDatabase(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readDishDatabase(\"notJsonFormatDishDatabase.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void readDishDatabase_invalidDishDishDatabase_throwDataConversionException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readDishDatabase(\"invalidDishDatabase.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void readAndSaveDishDatabase_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempDishDatabase.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        DishDatabase original \u003d TypicalDishes.getTypicalDishDatabase();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        JsonDishDatabaseStorage jsonDishDatabaseStorage \u003d new JsonDishDatabaseStorage(filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        jsonDishDatabaseStorage.saveDishDatabase(original, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ReadOnlyDishDatabase readBack \u003d jsonDishDatabaseStorage.readDishDatabase(filePath).get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(original, new DishDatabase(readBack));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        original.addDish(TypicalDishes.CEREAL);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        original.removeDish(TypicalDishes.SPAGHETTI);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        jsonDishDatabaseStorage.saveDishDatabase(original, filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        readBack \u003d jsonDishDatabaseStorage.readDishDatabase(filePath).get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(original, new DishDatabase(readBack));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        original.addDish(TypicalDishes.STEAK);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        jsonDishDatabaseStorage.saveDishDatabase(original); // file path not specified"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        readBack \u003d jsonDishDatabaseStorage.readDishDatabase().get(); // file path not specified"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(original, new DishDatabase(readBack));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void saveDishDatabase_nullDishDatabase_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveDishDatabase(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Saves {@code dishDatabase} at the specified {@code filePath}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private void saveDishDatabase(ReadOnlyDishDatabase dishDatabase, String filePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            new JsonDishDatabaseStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                    .saveDishDatabase(dishDatabase, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void saveDishDatabase_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveDishDatabase(new DishDatabase(), null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 99,
      "FelixNWJ": 3
    }
  },
  {
    "path": "src/test/java/calofit/storage/JsonMealLogStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.MealLog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.ReadOnlyMealLog;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.testutil.TypicalMeals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class JsonMealLogStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonMealLogStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void readMealLog_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e readMealLog(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private java.util.Optional\u003cReadOnlyMealLog\u003e readMealLog(String filePath) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new JsonMealLogStorage(Paths.get(filePath)).readMealLog(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertFalse(readMealLog(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readMealLog(\"notJsonFormatMealLog.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void readMealLog_invalidMealLog_throwDataConversionException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readMealLog(\"invalidMealLog.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void readAndSaveMealLog_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempMealLog.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        MealLog original \u003d TypicalMeals.getTypicalMealLog();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        JsonMealLogStorage jsonMealLogStorage \u003d new JsonMealLogStorage(filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        jsonMealLogStorage.saveMealLog(original, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        ReadOnlyMealLog readBack \u003d jsonMealLogStorage.readMealLog(filePath).get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(original, new MealLog(readBack));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        original.addMeal(TypicalMeals.CEREAL);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        original.removeMeal(TypicalMeals.SPAGHETTI);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        jsonMealLogStorage.saveMealLog(original, filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        readBack \u003d jsonMealLogStorage.readMealLog(filePath).get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(original, new MealLog(readBack));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        original.addMeal(TypicalMeals.STEAK);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        jsonMealLogStorage.saveMealLog(original); // file path not specified"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        readBack \u003d jsonMealLogStorage.readMealLog().get(); // file path not specified"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        assertEquals(original, new MealLog(readBack));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void saveMealLog_nullMealLog_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveMealLog(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Saves {@code mealLog} at the specified {@code filePath}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private void saveMealLog(ReadOnlyMealLog mealLog, String filePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new JsonMealLogStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                    .saveMealLog(mealLog, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void saveMealLog_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveMealLog(new MealLog(), null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 102
    }
  },
  {
    "path": "src/test/java/calofit/storage/JsonSerializableDishDatabaseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.DishDatabase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalDishes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class JsonSerializableDishDatabaseTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableDishDatabaseTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final Path TYPICAL_DISHES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalDishDatabase.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final Path INVALID_MEAL_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidDishDatabase.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private static final Path DUPLICATE_MEAL_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateDishDatabase.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void toModelType_typicalDishesFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        JsonSerializableDishDatabase dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_DISHES_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                JsonSerializableDishDatabase.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        DishDatabase dishDatabaseFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        DishDatabase typicalDishDatabase \u003d TypicalDishes.getTypicalDishDatabase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(dishDatabaseFromFile, typicalDishDatabase);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void toModelType_duplicateDishes_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        JsonSerializableDishDatabase dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MEAL_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                JsonSerializableDishDatabase.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, JsonSerializableDishDatabase.MESSAGE_DUPLICATE_DISHES,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 40
    }
  },
  {
    "path": "src/test/java/calofit/storage/JsonSerializableMealLogTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class JsonSerializableMealLogTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableMealLogTest\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private static final Path DUPLICATE_MEALS_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateMealLog.json\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public void toModelType_duplicateMeals_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        JsonSerializableMealLog dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MEALS_FILE,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                JsonSerializableMealLog.class).get();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, JsonSerializableMealLog.MESSAGE_DUPLICATE_MEALS,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 23
    }
  },
  {
    "path": "src/test/java/calofit/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        userPrefs.setDishDatabaseFilePath(Paths.get(\"dishDb.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        userPrefs.setMealLogFilePath(Paths.get(\"mealLog.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"TypicalUserPrefs.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        Path prefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(prefsFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 9,
      "-": 110,
      "FelixNWJ": 7
    }
  },
  {
    "path": "src/test/java/calofit/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.DishDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.ReadOnlyDishDatabase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.TypicalDishes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        JsonDishDatabaseStorage dishDatabaseStorage \u003d new JsonDishDatabaseStorage(getTempFilePath(\"dishData\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        JsonMealLogStorage mealLogStorage \u003d new JsonMealLogStorage(getTempFilePath(\"mealData\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        storageManager \u003d new StorageManager(dishDatabaseStorage, mealLogStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void dishDatabaseReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * {@link JsonDishDatabaseStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonDishDatabaseStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        DishDatabase original \u003d TypicalDishes.getTypicalDishDatabase();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        storageManager.saveDishDatabase(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        ReadOnlyDishDatabase retrieved \u003d storageManager.readDishDatabase().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertEquals(original, new DishDatabase(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public void getDishDatabaseFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        assertNotNull(storageManager.getDishDatabaseFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 15,
      "-": 51,
      "FelixNWJ": 3
    }
  },
  {
    "path": "src/test/java/calofit/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/calofit/testutil/DishBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.dish.Calorie;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * A utility class to help with building Dish objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class DishBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Spaghetti\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static final int DEFAULT_CALORIE \u003d 1000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    private Calorie calories;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public DishBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        calories \u003d new Calorie(DEFAULT_CALORIE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Initializes the DishBuilder with the data of {@code dishToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public DishBuilder(Dish dishToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        name \u003d dishToCopy.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        calories \u003d dishToCopy.getCalories();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(dishToCopy.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Sets the {@code Name} of the {@code Dish} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public DishBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Sets the {@code Calorie} of the {@code Dish} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public DishBuilder withCalories(int calories) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        this.calories \u003d new Calorie(calories);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Dish} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public DishBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public Dish build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new Dish(name, calories, tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 53,
      "FelixNWJ": 14
    }
  },
  {
    "path": "src/test/java/calofit/testutil/DishDatabaseBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.DishDatabase;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * A utility class to help with building {@link DishDatabase} objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * {@code DishDatabase ab \u003d new DishDatabaseBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class DishDatabaseBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private DishDatabase dishDatabase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public DishDatabaseBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        dishDatabase \u003d new DishDatabase();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public DishDatabaseBuilder(DishDatabase dishDatabase) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.dishDatabase \u003d dishDatabase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Adds a new {@code Dish} to the {@code DishDatabase} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public DishDatabaseBuilder withDish(Dish dish) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        dishDatabase.addDish(dish);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public DishDatabase build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return dishDatabase;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 34
    }
  },
  {
    "path": "src/test/java/calofit/testutil/DishUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * A utility class for Dish."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class DishUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns an add command string for adding the {@code dish}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static String getAddCommand(Dish dish) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getDishDetails(dish);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns the part of command string for the given {@code dish}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static String getDishDetails(Dish dish) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        sb.append(CliSyntax.PREFIX_NAME + dish.getName().fullName + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        sb.append(CliSyntax.PREFIX_CALORIES + dish.getCalories().toString() + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        dish.getTags().stream().forEach("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            s -\u003e sb.append(CliSyntax.PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns the part of command string for the given {@code EditDishDescriptor}\u0027s details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static String getEditDishDescriptorDetails(EditCommand.EditDishDescriptor descriptor) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(CliSyntax.PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        descriptor.getCalories().ifPresent(calories -\u003e sb.append(CliSyntax.PREFIX_CALORIES)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                .append(calories.toString()).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                sb.append(CliSyntax.PREFIX_TAG);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "                tags.forEach(s -\u003e sb.append(CliSyntax.PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 51,
      "FelixNWJ": 3
    }
  },
  {
    "path": "src/test/java/calofit/testutil/EditDishDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.dish.Calorie;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * A utility class to help with building EditDishDescriptor objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class EditDishDescriptorBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private EditCommand.EditDishDescriptor descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public EditDishDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        descriptor \u003d new EditCommand.EditDishDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public EditDishDescriptorBuilder(EditCommand.EditDishDescriptor descriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditDishDescriptor(descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns an {@code EditDishDescriptor} with fields containing {@code dish}\u0027s details"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public EditDishDescriptorBuilder(Dish dish) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        descriptor \u003d new EditCommand.EditDishDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        descriptor.setName(dish.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        descriptor.setCalories(dish.getCalories());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        descriptor.setTags(dish.getTags());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Sets the {@code Name} of the {@code EditDishDescriptor} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public EditDishDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     * Sets the {@code Calorie} of the {@code EditDishDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public EditDishDescriptorBuilder withCalories(int calories) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        descriptor.setCalories(new Calorie(calories));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditDishDescriptor}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public EditDishDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public EditCommand.EditDishDescriptor build() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 58,
      "FelixNWJ": 9
    }
  },
  {
    "path": "src/test/java/calofit/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/calofit/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns the middle index of the dish in the {@code model}\u0027s dish list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Index.fromOneBased(model.getFilteredDishList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns the last index of the dish in the {@code model}\u0027s dish list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return Index.fromOneBased(model.getFilteredDishList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns the dish in the {@code model}\u0027s dish list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static Dish getDish(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return model.getFilteredDishList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/calofit/testutil/TypicalDishes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static calofit.logic.commands.CommandTestUtil.VALID_NAME_DUCK_RICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static calofit.logic.commands.CommandTestUtil.VALID_NAME_MACARONI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static calofit.logic.commands.CommandTestUtil.VALID_TAG_EXPENSIVE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import static calofit.logic.commands.CommandTestUtil.VALID_TAG_SALTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.Dish;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.model.dish.DishDatabase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import calofit.model.meal.Meal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import calofit.model.meal.MealLog;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "import calofit.model.util.Timestamp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * A utility class containing a list of {@code Dish} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class TypicalDishes {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Dish SPAGHETTI \u003d new DishBuilder().withName(\"Spaghetti\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            .withCalories(789)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            .withTags(\"creamys\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Dish MUSHROOM_SOUP \u003d new DishBuilder().withName(\"Mushroom Soup\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            .withCalories(200)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            .withTags(\"expensive\", \"shitake\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Dish CHICKEN_RICE \u003d new DishBuilder().withName(\"Chicken Rice\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            .withCalories(562)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Dish NASI_LEMAK \u003d new DishBuilder().withName(\"Nasi Lemak\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            .withCalories(691)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            .withTags(\"value\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Dish CHEESE_BAKED_RICE \u003d new DishBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            .withName(\"Cheese Baked Rice\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            .withCalories(943)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Dish APPLE_PIE \u003d new DishBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            .withName(\"Apple Pie\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            .withCalories(234)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Dish CHENDOL \u003d new DishBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            .withName(\"Chendol\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            .withCalories(312)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Dish CEREAL \u003d new DishBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            .withName(\"Cereal\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            .withCalories(195)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Dish STEAK \u003d new DishBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            .withName(\"Steak\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            .withCalories(781)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    // Manually added - Dish\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Dish DUCK_RICE \u003d new DishBuilder().withName(VALID_NAME_DUCK_RICE)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            .withCalories(1000)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            .withTags(VALID_TAG_EXPENSIVE).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Dish MACARONI \u003d new DishBuilder().withName(VALID_NAME_MACARONI)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            .withCalories(1000)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            .withTags(VALID_TAG_SALTY, VALID_TAG_EXPENSIVE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    private TypicalDishes() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     * Returns an {@code DishDatabase} with all the typical persons."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static DishDatabase getTypicalDishDatabase() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        DishDatabase ab \u003d new DishDatabase();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        for (Dish dish : getTypicalDishes()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iltep64"
        },
        "content": "            ab.addDish(dish);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static List\u003cDish\u003e getTypicalDishes() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                SPAGHETTI, MUSHROOM_SOUP, CHICKEN_RICE, NASI_LEMAK, CHEESE_BAKED_RICE, APPLE_PIE, CHENDOL));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    public static MealLog getTypicalMealLog() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        MealLog mealLog \u003d new MealLog();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        mealLog.addMeal(dishToMeal(SPAGHETTI));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return mealLog;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    private static Meal dishToMeal(Dish dish) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "        return new Meal(dish, new Timestamp(LocalDateTime.now()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fangpinsern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 51,
      "fangpinsern": 14,
      "FelixNWJ": 33
    }
  },
  {
    "path": "src/test/java/calofit/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iltep64"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iltep64"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iltep64"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static final Index INDEX_FIRST_MEAL \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static final Index INDEX_SECOND_MEAL \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public static final Index INDEX_THIRD_MEAL \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iltep64"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 12
    }
  },
  {
    "path": "src/test/java/calofit/testutil/TypicalMeals.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "package calofit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.Meal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.meal.MealLog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "import calofit.model.util.Timestamp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " * A utility class containing a list of {@code Meal} objects to be used in tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "public class TypicalMeals {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Meal SPAGHETTI \u003d new Meal("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            TypicalDishes.SPAGHETTI,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new Timestamp(LocalDateTime.now()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Meal MUSHROOM_SOUP \u003d new Meal("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            TypicalDishes.MUSHROOM_SOUP,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new Timestamp(LocalDateTime.now()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Meal CHICKEN_RICE \u003d new Meal("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            TypicalDishes.CHICKEN_RICE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new Timestamp(LocalDateTime.now()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Meal NASI_LEMAK \u003d new Meal("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            TypicalDishes.NASI_LEMAK,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new Timestamp(LocalDateTime.now().minusMonths(1)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Meal CHEESE_BAKED_RICE \u003d new Meal("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            TypicalDishes.CHEESE_BAKED_RICE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new Timestamp(LocalDateTime.now().minusMonths(6)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Meal APPLE_PIE \u003d new Meal("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            TypicalDishes.APPLE_PIE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new Timestamp(LocalDateTime.now().minusYears(1)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Meal CHENDOL \u003d new Meal("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            TypicalDishes.CHENDOL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new Timestamp(LocalDateTime.now().minusYears(1)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    //Manually added"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Meal CEREAL \u003d new Meal("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            TypicalDishes.CEREAL,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new Timestamp(LocalDateTime.now().minusMonths(8)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static final Meal STEAK \u003d new Meal("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            TypicalDishes.STEAK,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            new Timestamp(LocalDateTime.now().minusMonths(9)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static ObservableList\u003cMeal\u003e getTypicalMealsObservableList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return FXCollections.observableList(new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                SPAGHETTI, MUSHROOM_SOUP, CHICKEN_RICE, NASI_LEMAK, CHEESE_BAKED_RICE, APPLE_PIE, CHENDOL)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static ObservableList\u003cMeal\u003e getTypicalMealsObservableListOfSameMonth() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return FXCollections.observableList(new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "                SPAGHETTI, MUSHROOM_SOUP, CHICKEN_RICE)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    public static MealLog getTypicalMealLog() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        MealLog log \u003d new MealLog();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        for (Meal meal : getTypicalMealsObservableList()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "            log.addMeal(meal);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "        return log;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FelixNWJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FelixNWJ": 69
    }
  },
  {
    "path": "src/test/java/calofit/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/calofit/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iltep64"
        },
        "content": "package calofit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iltep64"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iltep64"
        },
        "content": "import calofit.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iltep64"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iltep64": 17,
      "-": 98
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003c?import calofit.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "iltep64": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003c?import calofit.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iltep64"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\" type\u003d\"TestFxmlObject\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iltep64"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "iltep64": 3,
      "-": 4
    }
  }
]
