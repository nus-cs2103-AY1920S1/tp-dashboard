[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d EatMe"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-W11-3/main[image:https://travis-ci.org/AY1920S1-CS2103T-W11-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-W11-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-W11-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* A common issue when people hang out with friends is deciding on what to eat. As a person spends time to scan through their memory for good eateries, the meal timing will be delayed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* Aiming to solve the issue, we came out with EatMe."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* A product that aims to help users to manage the eateries that they had visited, and keep track of their experience and expenditure."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* Although EatMe has a fully functional GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* EatMe allows users to:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "1. Manage the eateries they visited"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "1. Include their own reviews on the eateries"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "1. Follow the feeds of their favourite bloggers"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "1. Create their own unique to-eat list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "1. etc."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* With EatMe, leave all the thinking behind and have an easy time deciding on where to eat."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* The original source code belongs to AddressBook-Level3 by SE-EDU initiated at https://se-education.org"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JunHongT": 15,
      "dvrylc": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "mainClassName \u003d \u0027seedu.eatme.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    compile \u0027org.jsoup:jsoup:1.12.1\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    archiveName \u003d \u0027eatme.jar\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        \u0027site-name\u0027: \u0027EatMe\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-W11-3/main\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 12,
      "-": 151
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "EatMe was developed by the https://github.com/AY1920S1-CS2103T-W11-3[AY1920S1-CS2103T-W11-3] team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003d\u003d\u003d Daryl Chan"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "image::dvrylc.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "{empty}[https://github.com/dvrylc[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Role: Team Lead"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003d\u003d\u003d Nadia Atiqah Bte Mohd Yahya"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "image::walnads.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "{empty}[https://github.com/walnads[github]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Role: Documentation, Code Quality"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003d\u003d\u003d Teo Jun Hong"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "image::junhongt.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "{empty}[https://github.com/JunHongT[github]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Role: Testing, Integration"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003d\u003d\u003d Ang Kai Qi"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "image::jakq.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "{empty}[https://github.com/jakq[github]]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Role: Deliverables and deadlines"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003d\u003d\u003d Balam Sai Rohit Reddy"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "image::rohitreddybalam.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "{empty}[https://github.com/ROHITREDDYBALAM[github]]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Role: Scheduling and tracking"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 21,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-W11-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* *Email us* : You can also reach us at `e0310793 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003d EatMe Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W11-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "By: `AY1920S1-CS2103T-W11-3`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jakq"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `EateryListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "walnads"
        },
        "content": ".  `Logic` uses the `EatMeParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jakq"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding an `Eatery`)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "walnads"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "walnads"
        },
        "content": "* stores the EateryList data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "walnads"
        },
        "content": "* stores the FeedList data."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jakq"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cEatery\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "walnads"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cFeedPost\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "walnads"
        },
        "content": "* can save `EateryList` data in json format and read it back."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "walnads"
        },
        "content": "* can save `FeedList` data in json format and read it back."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Classes used by multiple components are in the `seedu.eatme.commons` package."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jakq"
        },
        "content": "// tag::add[]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003d\u003d\u003d Add Eatery feature : `add`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "walnads"
        },
        "content": "The add feature allows the user to add an eatery with the compulsory fields: `Name`, `Address`, and `Category`. The `Tag` field(s), however, is an optional field. The user can add tag(s) to the eatery later on using the `addtag` feature, if needed. The add mechanism is facilitated by `EateryList`. It implements the following operations:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "walnads"
        },
        "content": "* `EateryList#hasEatery()` -- Checks if an eatery with the same identity already exists in the eatery list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "walnads"
        },
        "content": "* `EateryList#addEatery()` -- Adds an eatery to the eatery list. The eatery must not already exist in the eatery list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jakq"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#hasEatery()` and `Model#addEatery()` respectively."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jakq"
        },
        "content": "Given below is an example usage scenario and how the add mechanism behaves at each step."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 1. The user launches the application for the first time. The `EateryList` will be initialized with the initial json data stored."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 2. The user executes `add \\n Two Chefs Eating Place \\a 116 Commonwealth Cres, #01-129 \\c Chinese` to add a new eatery. Before executing the command, the command would need to be parsed first. Hence, the `EatMeParser` would create `AddCommandParser`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "walnads"
        },
        "content": "If the command is missing the name, address, or category (i.e. `\\n`, `\\a`, and `\\c`), `AddCommandParser` will throw an `ParserException` to the user with an error message specifying that the command parameters are incorrect, and an example usage of the command."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 3. `AddCommandParser` creates new objects for the different compulsory fields i.e. `Name`, `Address`, and `Category` (and also the `Tag`, if present), and passes these objects into the constructor for `Eatery` to create a new `Eatery`."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 4. `AddCommandParser` returns a new `AddCommand` with the newly created `Eatery` as a parameter."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 5. `AddCommand` calls `Model#hasEatery` to check if the eatery already exists. If it does exist, `AddCommand` will throw a CommandException specifying that there\u0027s already a duplicate eatery in `EateryList`. Else, `AddCommand` will call `Model#addEatery` to add the eatery into `EateryList`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 6. After successfully adding the eatery into `EateryList`, `AddCommand` will return the `CommandResult` to the `Ui`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "walnads"
        },
        "content": "The following sequence diagram shows how the add eatery feature is executed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "walnads"
        },
        "content": "image:AddSequenceDiagram.png[]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "walnads"
        },
        "content": "The following sequence diagram shows the reference sequence diagram for creating `Eatery e`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "walnads"
        },
        "content": "image:AddCreateSequenceDiagram.png[]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Add executes"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jakq"
        },
        "content": "* **Alternative 1 (current choice):** Making Tag field not final."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jakq"
        },
        "content": "*** Easily implemented."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jakq"
        },
        "content": "*** More user-friendly as users would most likely want to delete or add new tags."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Cons: Does not follow the logic of the original Address Book 3 application. More code needs to be refactored."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jakq"
        },
        "content": "* **Alternative 2:** Making Tag field final."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Pros: Follows the logic of the original Address Book 3 application; don\u0027t need to refactor more code."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Cons: Not as user-friendly."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jakq"
        },
        "content": "// end ::add[]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "walnads"
        },
        "content": "// tag::edit[]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "walnads"
        },
        "content": "The edit feature allows the user to edit any fields from the selected eatery i.e. `Name`, `Address`, `Category`, and `Tag` field(s). This feature would replace existing `Name`, `Address`, `Category`, and `Tag` associated with the eatery, with the new ones inputted by the user. Hence, this feature is not advised for users who wants to add more tags to the current list of tags. The edit mechanism is facilitated by `EateryList`. It implements the following operations:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "walnads"
        },
        "content": "* `EateryList#setEatery()` -- Replaces an eatery with another eatery in the `EateryList`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "walnads"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#setEatery()`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "walnads"
        },
        "content": "Given below is an example usage scenario and how the add mechanism behaves at each step."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 1. The user launches the application for the first time. The `EateryList` will be initialized with the initial json data stored."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 2. The user executes `edit 1 \\a 116 Commonwealth Cres, #01-140` to edit the address of an existing eatery. Before executing the command, the command would need to be parsed first. Hence, the `EatMeParser` would create `EditCommandParser`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 3. `EditCommandParser` creates `EditEateryDescriptor` using the parameters specified (i.e. address, in this scenario)."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 4. `EditCommandParser` returns a new `EditCommand` with the newly created `EditEateryDescriptor` as a parameter."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 5. `EditCommand` creates a new `Eatery` using the existing `Eatery` to be edited and `EditEateryDescriptor`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 6. If the newly created `Eatery` is not a duplicate of the existing `Eatery`, `EditCommand` calls `Model#hasEatery` to check if the eatery exists in the list. If the eatery is a duplicate or it exists in the list, `EditCommand` will throw a CommandException specifying that there\u0027s already a duplicate eatery in `EateryList`. Else, `EditCommand` will call `Model#setEatery` to modify the eatery."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 7. After successfully editing the eatery, `EditCommand` will return the `CommandResult` to the `Ui`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "walnads"
        },
        "content": "The following sequence diagram shows how the edit eatery feature is executed."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "walnads"
        },
        "content": "image:EditSequenceDiagram.png[]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "walnads"
        },
        "content": "The following sequence diagram shows the reference sequence diagram for creating an `EditEateryDescriptor e`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "walnads"
        },
        "content": "image:EditEateryDescriptorSequenceDiagram.png[]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "walnads"
        },
        "content": "The reference sequence diagram for creating `Eatery edited` has been omitted as the steps are the same as the reference sequence diagram for `add` command above."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Replace or add on to eatery\u0027s list of tags"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "walnads"
        },
        "content": "* **Alternative 1 (current choice):** Replace the entire list of tags"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "walnads"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "walnads"
        },
        "content": "*** Easy to implement."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "walnads"
        },
        "content": "*** More user-friendly -- command makes more sense to the user."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "walnads"
        },
        "content": "** Cons: Need to create additional command to handle adding of tags to the current list of tags."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "walnads"
        },
        "content": "* **Alternative 2:** Adding to the list of tags"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "walnads"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "walnads"
        },
        "content": "*** Easy to implement."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "walnads"
        },
        "content": "*** Don\u0027t need to create an additional command to add tags."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "walnads"
        },
        "content": "** Cons: Not as user-friendly."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "walnads"
        },
        "content": "// end::edit[]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "walnads"
        },
        "content": "// tag:stats[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003d\u003d\u003d Statistics feature : `stats`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "walnads"
        },
        "content": "The stats feature allows the user to generate statistics about the eateries they have visited and reviews they have made at those visited eateries."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "walnads"
        },
        "content": "Given below is an example usage scenario and how the stats mechanism behaves at each step."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 1. The user launches the application for the first time. The `EateryList` will be initialised with the initial or previous json data stored."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 2. The user executes `stats` to generate statistics for the current application state. The `EatMeParser` would return a `StatsCommand` to execute the command."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 3. `StatsCommand` then creates `Statistics` to generate the different types of statistics needed. To create the different types of statistics, `Statistics` would, first, sort the eateries in `EateryList` based on different conditions i.e. categories, total expense, total number of visits. After sorting the eateries, `Statistics` would then use these sorted lists to generate the appropriate statistics."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "walnads"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "walnads"
        },
        "content": "If the user executes the `stats` command in the Todo mode, `StatsCommand` would throw a `CommandException` to the user specifying that the user is in the wrong mode. In addition, if there is no eateries with any reviews in the application at the time of `stats` execution, the `StatsCommand` would throw a `CommandException` error saying that there is no data to generate statistics. Lastly, if there is any error during the generating of statistics, the `StatsCommand` will throw another `CommandException` saying that there is an unknown error and the application is unable to generate statistics."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 4. `StatsCommand` would then call `Model#setStatistics()` with `Statistics` as a a parameter."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 5. After successfully generating the statistics, `StatsCommand` will return the `CommandResult` to the `Ui`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "walnads"
        },
        "content": "The following sequence diagram shows how the statistics feature is executed."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "walnads"
        },
        "content": "image:StatsSequenceDiagram.png[]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "walnads"
        },
        "content": "Since the statistic feature has a different user interface compared to the other commands i.e. `AddCommand`, `AddTagCommand`, etc., it would be useful to explain how the different user interface components work."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 1. When the `Ui` receives the `CommandResult` from `StatsCommand`, the `Ui` will call `MainWindow#showStats()`."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 2. `MainWindow#showStats() will check if `StatsWindow` is already open. If it is opened, it will call `StatsWindow#initStats()` and focuses the window. Else, it will call `StatsWindow#initStats()` and displays the window."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "walnads"
        },
        "content": "Step 3. In `StatsWindow#initStats()`, `StatsWindow` will create a `CustomLayeredGraph` and `CustomPiechart` to create the graph and pie chart needed for the statistics report."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "walnads"
        },
        "content": "The following sequence diagram shows how the statistics feature shows the statistics to the user."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "walnads"
        },
        "content": "image:StatsUiSequenceDiagram.png[]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Whether the statistics should auto-update when an eatery is added or a review is added to an eatery."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "walnads"
        },
        "content": "* ** Alternative 1 (current choice):** Not making the statistics auto-update"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "walnads"
        },
        "content": "*** Pros: Easy to implement; don\u0027t need to refactor existing code to make use of ObservableList and add ListChange listeners."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "walnads"
        },
        "content": "*** Cons: User would need to call `stats` command after every addition or change made to the eatery or reviews of an eatery."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "walnads"
        },
        "content": "* ** Alternative 2: ** Making the statistics auto-update"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "walnads"
        },
        "content": "*** Pros: User would not need to call `stats` command after every addition or change made to the eatery or reviews of an eatery."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "walnads"
        },
        "content": "*** Cons: Need to refactor a lot of existing code."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "walnads"
        },
        "content": "Reason for choosing alternative 1: Although it may be annoying for the user to keep calling `stats` command after every change made, we realise that since `stats` acts as a statistics report for the users, users may not call the `stats` command as often to justify refactoring the entire code. Furthermore, to make a change to the eatery or reviews, the user would still need to minimize `StatsWindow` and unminimize it to view the auto-updated changes. Hence, the number of steps the user would need to execute to see the change in statistics is the same even for both auto-update and without auto-update."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jakq"
        },
        "content": "// tag::revieweatery[]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d Review Eatery feature"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "The review mechanism is facilitated by `EateryList`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "It is stored internally as a set of reviews along with the other"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jakq"
        },
        "content": "attributes of an eatery."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* `Eatery#addReview` -- Adds a review to the eatery identified by the user input."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jakq"
        },
        "content": "Given below is an example usage scenario and how the review mechanism behaves at each step."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Step 1. The user launches the application for the first time. The `EateryList` will be initialized with the initial json data stored."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jakq"
        },
        "content": "Step 2. The user executes `review 1 ...` command to add a review to the first Eatery in the address book. The `review` command will call `Eatery#addReview()`."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jakq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jakq"
        },
        "content": "If the index given is not a valid index (ie, out of bounds or negative), it will return an error to the user rather than attempting to review the Eatery."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "If the review is missing a `Description`, `Rating`, `Cost` or a `Date` field, an error will be shown to the user instead of adding the review."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Step 3. The eatery list now returns a success message upon successfully adding a review to the eatery."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "The following diagram shows the activities involved."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "image:ReviewActivityDiagram.png[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "The following diagram shows how the method is executed."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "image:ReviewSequenceDiagram.png[]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How review executes"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* ** Alternative 1 (current choice) **"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Adds a review to an eatery\u0027s list of reviews."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "** Pros: Easy to understand and implement."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "** Cons: The set of reviews of an `Eatery` is not final, unlike tags."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* ** Alternative 2**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Return a new set of reviews every time a review is added."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "** Pros: Makes the set of reviews final, adhering to the existing model."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "** Cons: Highly inefficient"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure used to store Reviews"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* **Alternative 1 (current choice):**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "No further nesting of Review field in Eatery."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "** Pros: Easily implemented and will not compromise speed."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "** Cons: The OOP model might be different from other Commands."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jakq"
        },
        "content": "* **Alternative 2:** Further nesting of Review field in Eatery."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Pros: A better OOP model."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Cons: May decrease performance and difficult to implement."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jakq"
        },
        "content": "// end::revieweatery[]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "// tag::editreview[]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d Edit Review feature"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "The edit review mechanism is facilitated by `EateryList`. It makes use of the following operations:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* `EateryList#getActiveEatery`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* `EateryList#getActiveReviews`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Given below is an example usage scenario and how the close mechanism behaves at each step."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Step 1. The user decides to check the reviews of an eatery by using `show` command."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Step 2. The user then decides to edit the first review of the eatery and executes `editreview 1 ...` with the necessary fields."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "If none of the fields entered are different from the existing fields, the user will be shown an error saying that at least one field should be different."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "If the user input is not according to the given format, an error will be shown to the user instead of attempting to edit the review."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Step 3. The application returns a success message upon successfully editing the review."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "The following diagram shows the activities involved."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "image:EditReviewActivityDiagram.png[]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How edit review executes"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* ** Alternative 1 (current choice)**:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "When the show command is used, `EateryList#setActiveEatery` will set the eatery shown as the active eatery."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "When the user attempts to edit review, the eatery is accessed using `EateryList#getActiveEatery`. The reviews are modified by using"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "`EateryList#getActiveReviews`, which returns a list of reviews. The changed list is set to the `ActiveEatery`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "by `Eatery#setReviews`."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "** Pros: Easy to access and edit reviews."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "** Cons: The `ActiveEatery` is not modified until the `show` command is used on another eatery."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* ** Alternative 2**:"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Operate directly on the list of reviews after using `show` command and set the changed list to the eatery."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "** Pros: `EditReview` is only accessible after using `show` command."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "** Cons: Difficult to implement and understand."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "// end::editreview[]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "//tag::deletereview[]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d Delete Review feature"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "The delete review mechanism is facilitated by `EateryList`. It makes use of the following operations:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* `EateryList#getActiveEatery`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* `EateryList#getActiveReviews`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Given below is an example usage scenario and how the close mechanism behaves at each step."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Step 1. The user decides to check the reviews of an eatery by using `show` command."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Step 2. The user then decides to delete the first review of the eatery and executes `deletereview 1 ...` ."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "If the index given is not a valid index (ie, out of bounds or negative), it will return an error to the user rather than attempting to close the Eatery."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Step 3. The application returns a success message upon successfully deleting the review."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations:"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How delete review executes"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* ** Alternative 1 (current choice)**:"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "When the show command is used, `EateryList#setActiveEatery` will set the eatery shown as the active eatery."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "When the user attempts to delete a review, the eatery is accessed using `EateryList#getActiveEatery`. The reviews are modified by using"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "`EateryList#getActiveReviews`, which returns a list of reviews. The changed list is set to the `ActiveEatery`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "by `Eatery#setReviews`."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "** Pros: Easy to access and delete reviews."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "** Cons: The `ActiveEatery` is not modified until the `show` command is used on another eatery."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* ** Alternative 2**:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Operate directly on the list of reviews after using `show` command and set the changed list to the eatery."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "** Pros: `DeleteReview` is only accessible after using `show` command."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "** Cons: Difficult to implement and understand."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "The following diagram shows the use case of review field as a whole."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "image:ReviewUseCaseDiagram.png[]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "//end::deletereview[]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "//tag::addtag[]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d Add Tag feature"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "The addtag mechanism is facilitated by the EateryList and implement the following operations:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* `EateryList#getFilteredEateryList`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* `EateryList#setEatery`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "The effects of add tag are cumulative, ie it does not replace existing tags but adds the given tags."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Given below is an example usage scenario and how the addtag mechanism behaves."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Step 1. The user launches the application and wants to add tags to the first eatery displayed."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Step 2. The user executes `addtag 1 ...` to add the required tags to the eatery."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "If the index specified is invalid (negative or out of bounds) or the format of the command is wrong,"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "an error will be shown to the user."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Step 3. If the tags to be added are not associated with eatery previously, they will be added to the eatery."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Step 4. AddTag success message is shown to the user."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d How AddTag executes:"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* ** Current choice: **"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Returns a new Eatery object with the existing and new tags. The tags to be added are checked"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "if they are already associated with the eatery before adding."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Preserves the OOP model of the project and there is no need for setter methods."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "** Cons: Very inefficient to return new Eatery object every time tags are changed."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "//end::addtag[]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "//tag:: deletetag[]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d Delete Tag feature"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "The deleteTag mechanism is facilitated by the EateryList and implement the following operations:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* `EateryList#getFilteredEateryList`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* `EateryList#setEatery`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Given below is an example usage scenario and how the addtag mechanism behaves."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Step 1. The user launches the application and wants to delete tags from the first eatery displayed."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Step 2. The user executes `deletetag 1 ...` to delete the required tags from the eatery."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "If the index specified is invalid (negative or out of bounds) or the format of the command is wrong,"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "an error will be shown to the user."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Step 3. If the tags to be deleted are not associated with eatery previously, no changes will be made."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Step 4. DeleteTag success message is shown to the user."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations:"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d How AddTag executes:"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* ** Current choice: **"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Returns a new Eatery object with the existing and new tags. The tags to be deleted are checked"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "if they are already associated with the eatery before deleting."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Preserves the OOP model of the project and there is no need for setter methods."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "** Cons: Very inefficient to return new Eatery object every time tags are changed."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "//end::deletetag[]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jakq"
        },
        "content": "// tag::close[]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d Close Eatery feature"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "The close mechanism is facilitated by `EateryList`. It implements ReadOnlyEateryList interface with the following operation:"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* `EateryList#setEatery()` -- Replaces an Eatery with a modified Eatery specified by the user input."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jakq"
        },
        "content": "Given below is an example usage scenario and how the close mechanism behaves at each step."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Step 1. The user launches the application for the first time. The `EateryList` will be initialized with the initial json data stored."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jakq"
        },
        "content": "Step 2. The user executes `close 1` command to close the 1st Eatery in the address book."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "walnads"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jakq"
        },
        "content": "If the index given is not a valid index (ie, out of bounds or negative), CloseCommand will throw a CommandException to the user rather than attempting to close the Eatery."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jakq"
        },
        "content": "Step 3. The address book now returns a success message upon successfully closing the Eatery, and the Eatery will be highlighted in red."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jakq"
        },
        "content": "Step 4. The user then decides that he wants to close another Eatery."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jakq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jakq"
        },
        "content": "If the index given points to an Eatery already closed (ie, 1 in this situation), CloseCommand will throw a CommandException to the user rather than attempting to close the Eatery."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jakq"
        },
        "content": "The following sequence diagram shows how the `close` command works:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jakq"
        },
        "content": "image::CloseSequenceDiagram.png[]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jakq"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new `close` command:"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jakq"
        },
        "content": "image::CloseCommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Close executes"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jakq"
        },
        "content": "* **Alternative 1 (current choice):** Returns a new Eatery with identical fields except for the isOpen field."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jakq"
        },
        "content": "*** Follows pre-exisiting EditCommand implementation."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jakq"
        },
        "content": "*** No need for setter methods."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Cons: Have to return a new object each time a change is made."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jakq"
        },
        "content": "* **Alternative 2:** Setter method for isOpen field of Eatery."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Pros: No need for extra methods in the flow to change the object."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jakq"
        },
        "content": "*** Breaks pre-existing EditCommand implementation."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jakq"
        },
        "content": "*** Need for setter methods."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the Close command"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jakq"
        },
        "content": "* **Alternative 1 (current choice):** Uses a boolean value to keep track if the Eatery is reopened or closed."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Pros: Easily implemented."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Cons: An additional variable to check when executing other commands. Possibility of incorrect manipulation of an Eatery object"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jakq"
        },
        "content": "* **Alternative 2:** Maintain two separate lists of Eateries for Reopened and Closed."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Pros: Closed Eateries stored apart from Reopened Eateries. Commands executed will only affect Eateries stored in a particular list."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Cons: Requires proper handling of individual data structures to ensure each list is maintained and updated correctly."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jakq"
        },
        "content": "// end::close[]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d Reopen Eatery feature"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jakq"
        },
        "content": "The reopen mechanism is facilitated by `AddressBook`. It implements the `ReadOnlyAddressBook` interface with the following operation:"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jakq"
        },
        "content": "* `AddressBook#setEatery()` -- Replaces an Eatery with a modified Eatery specified by the user input."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jakq"
        },
        "content": "Given below is an example usage scenario and how the reopen mechanism behaves at each step."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jakq"
        },
        "content": "Step 1. The user launches the application for the first time. The `AddressBook` will be initialized with the initial json data stored."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jakq"
        },
        "content": "Step 2. The user executes `reopen 1` command to close the 1st Eatery in the address book."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jakq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jakq"
        },
        "content": "If the index given is not a valid index (ie, out of bounds or negative), ReopenCommand will throw a CommandException to the user rather than attempting to reopen the Eatery."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "jakq"
        },
        "content": "Step 3. The address book now returns a success message upon successfully reopening the Eatery, and the Eatery will not longer be highlighted in red."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "jakq"
        },
        "content": "Step 4. The user then decides that he wants to reopen another Eatery."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "jakq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jakq"
        },
        "content": "If the index given points to an Eatery already reopened (ie, 1 in this situation), ReopenCommand will throw a CommandException to the user rather than attempting to reopen the Eatery."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "jakq"
        },
        "content": "The following sequence diagram shows how the `reopen` command works:"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jakq"
        },
        "content": "image::ReopenSequenceDiagram.png[]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "jakq"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new `reopen` command:"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "jakq"
        },
        "content": "image::ReopenCommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Reopen executes"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "jakq"
        },
        "content": "* **Alternative 1 (current choice):** Returns a new Eatery with identical fields except for the isOpen field."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "jakq"
        },
        "content": "*** Follows pre-exisiting EditCommand implementation."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "jakq"
        },
        "content": "*** No need for setter methods."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Cons: Have to return a new object each time a change is made."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "jakq"
        },
        "content": "* **Alternative 2:** Setter method for isOpen field of Eatery."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Pros: No need for extra methods in the flow to change the object."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jakq"
        },
        "content": "*** Breaks pre-existing EditCommand implementation."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "jakq"
        },
        "content": "*** Need for setter methods."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the Reopen command"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "jakq"
        },
        "content": "* **Alternative 1 (current choice):** Uses a boolean value to keep track if the Eatery is reopened or closed."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Pros: Easily implemented."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Cons: An additional variable to check when executing other commands. Possibility of incorrect manipulation of an Eatery object"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jakq"
        },
        "content": "* **Alternative 2:** Maintain two separate lists of Eateries for Reopened and Closed."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Pros: Reopened Eateries stored apart from Closed Eateries. Commands executed will only affect Eateries stored in a particular list."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Cons: Requires proper handling of individual data structures to ensure each list is maintained and updated correctly."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "jakq"
        },
        "content": "// tag::modeCommand[]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d Changing Mode of EatMe feature"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Allows the user to toggle between Main mode and Todo mode. It extends `Command`, and once mode is switched, all other command functions would be affected."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "The mode is determined through the value of a boolean variable named `isMainMode`."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Given below is an example usage of how the mode command behaves."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Step 1: The user launches the application. Data from `eaterylist` will be fetched and will be initialised in Main Mode by default."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Step 2: The user execute `mode` command and the mode of the application will be switched to `todo` mode, displaying items in the `todo` list instead."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Step 3: The user can execute `mode` command again, returning the application to `main` mode, showing the items stored in the `main` list."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "jakq"
        },
        "content": "The following sequence diagram shows how the `mode` command works:"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "image::ModeCommandSequence.png[]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jakq"
        },
        "content": "image::ModeCommandActivity.png[]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Mode execute"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* **Alternative 1 (current choice):** Toggle between mode through a boolean value."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Pros: Easy for implementation."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Cons: An additional factor to check when executing any other commands; Possibility of mis-manipulation of data."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support Mode Command"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* **Alternative 1 (current choice):** Maintain two separate lists for Main mode and Todo Mode."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Pros: Data between the two modes will be separated. Commands executed will only affect data stored in the list for the particular mode."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Cons: More effort required for maintenance purposes. Need to make sure that data from main list should not go into todo list, and vice versa"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "jakq"
        },
        "content": "//end::modeCommand[]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "// tag::newsFeedFeature"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003d\u003d\u003d News Feed Feature"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "As people who really love food, we are interested in keeping up-to-date with the latest food trends and newest eateries to try."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "The news feed allows the user to save their favorite food blogs to EatMe and have access to the latest food-related articles right from within the app."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Should a food blog become irrelevant, the user also has the option to remove it and no longer display its articles."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003d\u003d\u003d\u003d Terminology"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Some terms are used in this feature:"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "- `Feed` - A food blog"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "- `Feed Post` - An article from a feed"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "- `News Feed Panel` - The right column of the app showing news articles"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "The current news feed supports two commands:"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "- `AddFeed` - Add a new feed"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "- `DeleteFeed` - Delete a feed and its associated feed posts"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `AddFeed` - Add a new feed"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "The following activity diagram shows the flow when the user wants to add a new feed."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "image::AddFeedActivityDiagram.png[]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Step 2. EatMe fetches the latest feed posts from the user\u0027s existing feeds and displays them to the user in the news feed panel."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Step 3. The user finds a new favorite food blog called _Eatbook_ and wants to add it into the app. The user executes `addfeed \\n Eatbook \\a https://eatbook.sg/feed` to add the new feed. `AddFeedCommand` calls `Model#addFeed` with the new feed object, which will in turn add the new feed to the Model\u0027s internal feed list."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "The following sequence diagram shows how the `AddFeed` command executes."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "image::AddFeedSequenceDiagram.png[]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `DeleteFeed` - Delete a feed and its associated feed posts"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "The following activity diagram shows the flow when the user wants to delete a feed."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "image::DeleteFeedActivityDiagram.png[]"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Step 2. EatMe fetches the latest feed posts from the user\u0027s existing feeds and displays them to the user in the news feed panel."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Step 3. The user is no longer interested in the food blog _Eatbook_ and wants to delete it from the app. The user executes `deletefeed \\n Eatbook` to delete the feed. `DeleteFeedCommand` calls `Model#deleteFeed` with the feed to delete, which will in turn remove the feed to the Model\u0027s internal feed list."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "The following sequence diagram shows how the `DeleteFeed` command executes."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "image::DeleteFeedSequenceDiagram.png[]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storage of feed list"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* Alternative 1: Store the feed list in the existing Eatery list JSON file."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "** Pros: Single JSON file for all of the user\u0027s data (eateries, todos, feeds)."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "** Cons: When sharing your JSON file with another user, the feeds would be transferred as well - Poor user experience because favorite food blogs are a personal choice and should not be transferred when sharing eateries."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* Alternative 2 (current choice): Store the feed list as a separate JSON file."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "** Pros: Separation of eatery-related and feed-related information into two separate JSON files - Allows sharing of eateries without affecting feeds."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "** Cons: Two separate files - Minor inconvenience if the user wants to backup their data to another location."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: Offline behavior of news feed"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* Alternative 1 (current implementation): Store the feed posts from the last successful update in the feed list JSON file"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "** Pros: Allows for offline access to feed posts."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "*** Feed posts may be outdated if the user has not opened the app with Internet connectivity for a long time."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "*** Larger feed list JSON file size."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* Alternative 2: Show an error message when offline."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "** Pros: Small and simple feed list JSON file."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "** Cons: Unable to view feed posts when offline."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "// end::newsFeedFeature"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "//tag::saveTodoCommand[]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d Saving Todo Eatery feature"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "This command allows the user to save an eatery from the todo list to the main eatery list. It extends `Command`."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Given below is an example usage of how the SaveTodo Command behaves."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Step 1: The user launches the application. Data from `EateryList` will be fetched and initialised in main mode by default."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Step 2: The user executes mode command and the mode of the application will be switched to Todo mode, displaying items in the todo list instead."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Step 3: The user can execute `save 1`, indicating to the system the index of eatery to be saved."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Step 4: The eatery in the todo list will be removed and an add command will be constructed in the CommandBox for the user to input any necessary fields before adding."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "The following sequence diagram shows how the `SaveTodo` command works:"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "image::SaveTodoCommandSequence.png[]"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "image::SaveTodoCommandActivity.png[]"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How SaveTodo execute"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* **Alternative 1 (current choice):** Construct the commands as a string before displaying to the user."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Pros: User-friendly. User will be able to add the eatery to the main list with minimum effort."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Cons: Unable to save directly to the main list from todo list. Possible situation can be that the user did not add the new eatery after executing `saveTodo` command."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "This situation will result in the user requiring to type the whole `add` command on his own as information will not be saved."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* **Alternative 2** Allow eatery to have the same attributes fields as eatery in main list"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Pros: As eatery in todo list and main list have the same attributes, it will be possible to `save` the eatery directly to the main list without further input from the user."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Cons: User will be required to include additional field when adding an eatery in the todo list. Field entered may be irrelevant as user had yet to visit the eatery."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support SaveTodo Command"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* **Alternative 1 (current choice):** No additional data structure is required for `SaveTodo` command"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "//end::saveTodoCommand[]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d Load friend\u0027s EateryList feature"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "jakq"
        },
        "content": "The load mechanism is facilitated by `ModelManager`. It implements the `Model` interface with the following operation:"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "jakq"
        },
        "content": "* `Model#setUserPrefs()` -- Replaces the existing UserPrefs with a modified UserPrefs specified by the user input."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "jakq"
        },
        "content": "Given below is an example usage scenario and how the load mechanism behaves at each step."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "jakq"
        },
        "content": "Step 1. The user launches the application for the first time. The `EateryList` will be initialized with the initial json data stored."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "jakq"
        },
        "content": "Step 2. The user executes `load \\u Alice` command to change the `UserPrefs` of the `ModelManger`."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "jakq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "jakq"
        },
        "content": "If the command is missing the username (i.e. `load \\u`), LoadCommandParser will throw an ParserException to the user with an error message specifying that the command parameters are incorrect, and an example usage of the command."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "jakq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "jakq"
        },
        "content": "If the command is missing the username and the prefix (i.e. `load`), this will be interpreted as loading the owner\u0027s own Eatery List."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "jakq"
        },
        "content": "Step 3. The Eatery List now returns a success message upon successfully changing the `UserPrefs`, and prompts the user to relaunch the application."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "jakq"
        },
        "content": "Step 4. The user then decides that he wants to change his `UserPrefs` to another friend\u0027s one. Before exiting the application, the user can still enter `load \\u Bob` command to change the `UserPrefs`."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "jakq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "jakq"
        },
        "content": "If the user attempts to load a file that has already been set in the `UserPrefs`, the LoadCommand will throw a CommandException to the user with an error message specifying that the `UserPrefs` has already been changed."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "jakq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "jakq"
        },
        "content": "If the user attempts to load a file that does not exist in the default filepath, the LoadCommand will throw a CommandException to the user with an error message to prompt him to check that the file exists."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "jakq"
        },
        "content": "Step 5. The user then decides that he wants to change his `UserPrefs` back to his own instead. Before exiting the application, the user can still enter `load` command to reset the `UserPrefs` of the `ModelManage` back to his own Eatery List."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "jakq"
        },
        "content": "The following sequence diagram shows how the `load` command works:"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "jakq"
        },
        "content": "image::LoadSequenceDiagram.png[]"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "jakq"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new `load` command:"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "jakq"
        },
        "content": "image::LoadCommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Load executes"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "jakq"
        },
        "content": "* **Alternative 1 (current choice):** Modifies the existing model in the Eatery List."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Pros: Easily implemented without needing to relaunch the GUI."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Cons: Require the application to be terminated for the storage to save UserPrefs."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "jakq"
        },
        "content": "* **Alternative 2:** Creates a new model to replace the current one."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Pros: Easier to implement the loading of file without relaunching the application."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Cons: Need to relaunch the GUI so that the new file can be seen."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: User Experience to execute Load"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "jakq"
        },
        "content": "* **Alternative 1 (current choice):** The user has to relaunch the application."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "jakq"
        },
        "content": "*** Easily implemented."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "jakq"
        },
        "content": "*** Clear to the user that the UserPaths has been changed."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Cons: Additional work from the user"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "jakq"
        },
        "content": "* **Alternative 2:** Relaunch the GUI"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Pros: The user does not need to reload the application."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "jakq"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "jakq"
        },
        "content": "*** Harder to implement."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "jakq"
        },
        "content": "*** Might confuse the user if the UserPaths has been changed. Especially if the friend\u0027s EateryList is similar to the user (i.e. same school)."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "jakq"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by EatMe"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "jakq"
        },
        "content": "* has a need to manage a significant number of \u003c\u003ceatery, eateries\u003e\u003e"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "jakq"
        },
        "content": "** budget"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "jakq"
        },
        "content": "** \u003c\u003ccategory, category\u003e\u003e"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "jakq"
        },
        "content": "** location"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "jakq"
        },
        "content": "*Value proposition*: manage eateries faster than a typical mouse/GUI driven app with statistics of key details such as budget, category and location"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "jakq"
        },
        "content": "|`* * *` |food blogger |keep a list of outstanding cafes |clear them in an orderly fashion."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "jakq"
        },
        "content": "|`* * *` |student |keep a list of affordable eateries |save money"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "jakq"
        },
        "content": "|`* * *` |person with many food allergies |keep track of dishes I have ordered before |avoid ordering hazardous food"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "jakq"
        },
        "content": "|`* * *` |foodie |remember places |share this experience with my family and friends"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "jakq"
        },
        "content": "|`* *` |digital nomad |tag places with free power + wifi |sit there for extended periods of time"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "jakq"
        },
        "content": "|`*` |working adult |view the menu beforehand |save time from thinking what to eat"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "jakq"
        },
        "content": "(For all use cases below, the *System* is the `EatMe` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d Use case: Removing an eatery from todo"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "jakq"
        },
        "content": "1.  User requests to view his todo list"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "jakq"
        },
        "content": "2.  EatMe toggles to the todo mode"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "jakq"
        },
        "content": "3.  User requests to mark an eatery as visited in the list"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "jakq"
        },
        "content": "4.  EatMe shifts the data over"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "jakq"
        },
        "content": "5.  EatMe toggles to the main mode"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "jakq"
        },
        "content": "6.  EatMe requests user for whatever information left that is required before saving in the main mode"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "jakq"
        },
        "content": "* 3a. The given eatery is invalid."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "jakq"
        },
        "content": "** 3a1. EatMe shows an error message."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "jakq"
        },
        "content": "* 6a. The given information is of the wrong format."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "jakq"
        },
        "content": "+"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "jakq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "jakq"
        },
        "content": "** 6a1. EatMe shows an error message."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "jakq"
        },
        "content": "+"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "jakq"
        },
        "content": "Use case resumes at step 8."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "jakq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d Use case: Tagging an eatery in main"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "jakq"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "jakq"
        },
        "content": "1.  User requests to add a tag to an eatery"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "jakq"
        },
        "content": "2.  EatMe updates the eatery accordingly"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "jakq"
        },
        "content": "+"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "jakq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "jakq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "jakq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "jakq"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "jakq"
        },
        "content": "+"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "jakq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "jakq"
        },
        "content": "* 1b. The user gives invalid information."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "jakq"
        },
        "content": "+"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "jakq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "jakq"
        },
        "content": "** 1b1. EatMe shows an error message."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "jakq"
        },
        "content": "+"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "jakq"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "jakq"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d Use case: Viewing a menu beforehand"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "jakq"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "jakq"
        },
        "content": "1.  User searches for an eatery"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "jakq"
        },
        "content": "2.  EatMe displays the eatery accordingly"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "jakq"
        },
        "content": "3.  User reads the entry for the menu"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "jakq"
        },
        "content": "+"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "jakq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "jakq"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "jakq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "jakq"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "jakq"
        },
        "content": "+"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "jakq"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "jakq"
        },
        "content": "* 1b. The user gives invalid information."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "jakq"
        },
        "content": "+"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "jakq"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "jakq"
        },
        "content": "** 1b1. EatMe shows an error message."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "jakq"
        },
        "content": "+"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "jakq"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "jakq"
        },
        "content": ".  Should be able to hold up to 1000 eateries without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "jakq"
        },
        "content": ".  Main functionalities (CRUD) should work without WiFi."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "jakq"
        },
        "content": "[[eatery]] Eatery::"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "jakq"
        },
        "content": "Any place that serves food open to the public (ie, restaurants, cafes, roadside, pushcart)"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "jakq"
        },
        "content": "[[category]] Category::"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "jakq"
        },
        "content": "Broadly contains cuisines (ie, Chinese, International)"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "jakq"
        },
        "content": "*Soon*"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "jakq"
        },
        "content": "Author: Beginner AB"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "jakq"
        },
        "content": "* Shows trending restaurants nearby"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "jakq"
        },
        "content": "* Hide option"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "jakq"
        },
        "content": "* Unable to delete lists"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "jakq"
        },
        "content": "* Unable to search"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "jakq"
        },
        "content": ".. Download the jar file and copy into an empty folder."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d Saving an eatery"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ". Saving an eatery while eateries are present in todo list."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ".. Prerequisites:"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "... Application is on todo mode."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "... Todo list is not empty"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ".. Test case: Save 1 +"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    Expected: The application will toggle to main mode and a add command will be display in the commandbox."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ".. Test Case: Save 0 +"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    Expected: An error message will be shown in the status message."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d Deleting an eatery"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ". Deleting an eatery while all eateries are listed"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ".. Prerequisites: List all eateries using the list command. Multiple eateries in the list."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ".. Test case: delete 1 +"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ".. Test case: delete 0 +"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "   Expected: No eatery is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ".. Other incorrect delete commands to try: delete, delete x (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "jakq"
        },
        "content": "\u003d\u003d\u003d Deleting an Eatery"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "jakq"
        },
        "content": ". Deleting an `Eatery` while all `Eateries` are listed"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "jakq"
        },
        "content": ".. Prerequisites: List all `Eateries` using the list command. Multiple `Eateries` in the list."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "jakq"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "jakq"
        },
        "content": "   Expected: First `Eatery` is deleted from the list. Details of the deleted `Eatery` shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "jakq"
        },
        "content": "   Expected: No `Eatery` is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "jakq"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size, or x is a non-integer) +"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "jakq"
        },
        "content": "_{ more test cases to be added }_"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "jakq"
        },
        "content": ". [Proposed] Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "jakq"
        },
        "content": ".. Prerequisites: json file type present in a data file where the EatMe app is."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "jakq"
        },
        "content": ".. Test case: Running the application with json file type with incorrect format +"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "jakq"
        },
        "content": "   Expected: Application starts with a blank `Eatery` list panel. Error details shown in the status message."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "jakq"
        },
        "content": "_{ more test cases to be added }_"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "walnads": 132,
      "ROHITREDDYBALAM": 188,
      "dvrylc": 73,
      "JunHongT": 78,
      "jakq": 268,
      "-": 341
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What other user stories do you think AddressBook should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jakq"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all eateries who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Phone`, `Email`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Phone: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The above method can be used to get a printable string representing a bunch of person details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jakq"
        },
        "content": "// p is a Eatery object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command. Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "jakq": 2,
      "-": 214
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003d EatMe User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W11-3/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "By: `Team AY1920S1-CS2103T-W11-3`      Since: `September 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "EatMe is a *food diary app for people who love good food*. It helps you manage places you have been to, keep track of your experience and expenditure, and even keep you up-to-date with the latest food trends and events!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "EatMe comes with two different modes: *Main* and *Todo* modes. In the Main mode, you will be able to manipulate eateries that you have visited before. In the Todo mode, however, you will be able to manipulate eateries that you have yet to visit but are planning to visit in the future."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "EatMe is optimized for those who like the speed of a Command Line Interface (CLI) while still maintaining the user-friendliness of a Graphical User Interface (GUI). *Interested to keep track of your favorite food places with maximum efficiency? Try EatMe today!* Jump to the \u003c\u003cQuick Start\u003e\u003e to get started."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003d\u003d About"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "This user guide shows you how to use the features in EatMe. The commands that can be executed are explained in detail, and sample commands are provided for ease of understanding."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "The following are some terms used in this document:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|Command Line Interface (CLI)|A means of interacting with a computer program where the user issues commands to the program in the form of successive lines of text."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|Graphical User Interface (GUI)|A means of interacting with a computer program through graphical icons and visual indicators."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|`add`|Text in this font (called monospaced font) indicates that this is a command that can be typed into the command line and executed by the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ". Ensure you have Java 11 or above installed on your computer. If not, you can download it link:https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html[here]."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ". Download the latest release of EatMe link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for EatMe."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ". Double-click the file to start the app. The app should appear in a few seconds."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ". Type a command in the command box and press kbd:[Enter] to execute it."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "e.g. typing `help` and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Some example commands you can try:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* `add \\n Two Chefs Eating Place \\a 116 Commonwealth Cres, #01-129 \\c Chinese` : Adds an eatery named Two Chefs Eating Place with the specified address and category."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `review 1 \\d Nice Condensed Milk Pork Ribs \\p 15 \\r 4 \\w 23/10/2019` : Adds a review to the first eatery in the eatery list with the specified description, price, rating and date."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* `exit` : Exits the app."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "These are just a few of the commands you can execute on EatMe. Refer to \u003c\u003cFeatures\u003e\u003e for the full list of available commands and their details."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* Items in square brackets are the parameters to be supplied by the user. For example, in `add \\n [name of eatery]`, `[name of eatery]` is a parameter which can be used as `add \\n Two Chefs Eating Place`."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "walnads"
        },
        "content": "* Items in curly brackets are optional parameters. For example, in `add \\n [name of eatery] \\a [address] \\c [category] {\\t [tags]...}`, `{\\t [tags] ...}` is an optional parameter that the user can choose to supply if he/she wishes to add certain tags to the eatery."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* Items with `...` after them can be used multiple times including zero times e.g. `{nbsp}` (i.e. 0 times), `\\t non-aircon`, `\\t good-for-groups \\t non-aircon`, etc."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* Parameters can be in any order. For example, if the command specifies `\\n [name of eatery] \\a [address] \\c [category]`, `\\a [address] \\n [name of eatery] \\c [category]` is also acceptable."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* For parameters requiring `index`, `index` refers to the index number shown in the displayed eatery list or review list. The index *must be a positive integer* (e.g. 1, 2, 3, ...) ."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003d\u003d\u003d General"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help: `help`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all eateries: `list`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Shows a list of all eateries in the app."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries: `clear`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Clears all eateries in the app."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "// tag::load[]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d Load eateries from another user profile: `load`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Loads eateries from another user profile."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "EatMe allows you to share eatery data with your friends by simply transferring your user profile."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Your user profile is a file that ends with `.json` and can be found in the same place where you saved the EatMe app."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Did a friend pass you their user profile?"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Simply place their file where you saved the EatMe app, and execute this command with their username to view their data."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format: `load \\u [username]`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "walnads"
        },
        "content": "****"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* Loads eatery data from the specified user profile."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* The user can supply the user profile with or without \".json\" extension, however, the file *must* still be a valid user profile generated by the EatMe app."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "walnads"
        },
        "content": "****"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `load \\u john`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `load \\u john.json`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "// end::load[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d Toggling between main and todo modes: `mode`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Toggles between main and todo modes."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format: `mode`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003d\u003d\u003d\u003d Exit the app: `exit`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d Main Mode"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "In Main mode, users will be able to view and manipulate the eateries that they have already visited. Specifically, users will be able to add, edit, and delete eateries. Furthermore, users will also be able to add, edit, and delete reviews from eateries. Users can also generate statistics from the eateries and reviews they have added into the app."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d Working with Eateries"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "walnads"
        },
        "content": "// tag::add[]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Adding an eatery: `add`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Adds an eatery to the app."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "walnads"
        },
        "content": "Format: `add \\n [name of eatery] \\a [address] \\c [category] {\\t [tags]...}`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "walnads"
        },
        "content": "****"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "walnads"
        },
        "content": "* The name, address, and category fields are compulsory and must be provided."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "walnads"
        },
        "content": "* The tag field is optional, and you can specify 0 to as many tags as you want."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "walnads"
        },
        "content": "****"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "walnads"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "walnads"
        },
        "content": "* `add \\n Two Chefs Eating Place \\a 116 Commonwealth Cres, #01-129 \\c Chinese`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "walnads"
        },
        "content": "* `add \\n Two Chefs Eating Place \\a 116 Commonwealth Cres, #01-129 \\c Chinese \\t good-for-groups \\t non-aircon`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "walnads"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "// tag:: edit[]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Editing an eatery: `edit`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Edits an existing eatery in the application."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format: `edit [index] {\\n [name of eatery]} {\\a [address]} {\\c [category]} {\\t [tags]...}`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* When editing tags, the existing tags of the eatery will be removed i.e adding of tags is not cumulative. To have a cumulative effect, use `addtag` and `removetag`."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* You can remove all the eatery\u0027s tags by typing `\\t` without specifying any tags after it."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `edit 1 \\t good-for-groups`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `edit 1 \\a NUS Biz School`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "// end::edit[]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Tagging an eatery: `addtag`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Adds tags to an eatery."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format: `addtag [index] \\t [tag] {\\t [tags]...}`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* At least *one* tag must be specified."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `addtag 2 \\t hawker \\t good-for-sharing`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Removing tags from an eatery: `removetag`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Removes tags from an eatery."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format: `removetag [index] \\t [tags]...`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* If the tags to be removed are not associated to the eatery in the first place, no changes will be made."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `removetag 2 \\t hawker`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Finding an eatery: `find`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Finds an eatery based on a set of user-supplied conditions."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format: `find {\\n [name of eatery]} {\\a [address]} {\\c [category]} {\\t [tags]...}`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "****"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* At least one condition must be supplied, but there is no upper limit."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* Eateries that match *any* of the conditions will be shown."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** `find \\n Noodle \\t cheap` will show eateries that either have \"Noodle\" in their name, or the tag \"cheap\", or both."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* Conditions are case-insensitive."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* For `name` and `address`, eateries that match the conditions partially will be shown."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** `find \\n rice` will show both \"Tian Tian Chicken Rice\" and \"The Ricebowl\"."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "****"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `find \\n Noodle \\t cheap`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `find \\a Jurong`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Viewing an eatery: `show`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Shows an eatery with all its details - address, category, tags, reviews, and a map of its location."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format: `show [index]`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "****"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* In order *to view the eatery\u0027s map, you must be connected to the Internet*."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "****"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `show 2`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Reviewing an eatery: `review`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Leaves a review for an eatery."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "walnads"
        },
        "content": "Format: `review [index] \\d [description] \\p [price per person] \\r [rating] \\w [date in DD/MM/YYYY format]`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "****"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "walnads"
        },
        "content": "* Leaves a review for the eatery at the specified index."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "walnads"
        },
        "content": "* Date *must* be in DD/MM/YYYY format."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "****"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "walnads"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* `review 2 \\d Nice Condensed Milk Pork Ribs \\p 15 \\r 4 \\w 23/10/2019`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Editing a review: `editreview`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Edits an eatery\u0027s review. The `show` command helps to view an eatery\u0027s reviews."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "walnads"
        },
        "content": "Format: `editreview [index] {\\d [description]} {\\p [price per person]} {\\r [rating]} {\\w [date in DD/MM/YYYY format]}`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "****"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "walnads"
        },
        "content": "* Edits the review at the specified index."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "walnads"
        },
        "content": "* Date *must* be in DD/MM/YYYY format."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "****"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* `editreview 1 \\p 3.6 \\r 1`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "image::EditReviewCommand.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Deleting a review: `deletereview`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Deletes an eatery\u0027s review. The `show` command helps to view an eatery\u0027s reviews."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format: `deletereview [index]`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "* `deletereview 2`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "image::DeleteReviewCommand.png[width\u003d\"\"790\"]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "// tag::close[]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Marking an eatery as closed: `close`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Closes an eatery if the eatery no longer exists."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "The eatery will still be listed, but will be highlighted in red to inform you that the eatery no longer exists."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "In the case that you accidentally closed the wrong eatery or the eatery reopens, the `reopen` command does the opposite of `close`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format: `close [index]`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `close 2`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "// end::close[]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "// tag::reopen[]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Reopening a closed eatery: `reopen`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Reopens a previously closed eatery."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format: `reopen [index]`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `reopen 2`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "// end::reopen[]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Deleting an eatery: `delete`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Deletes an eatery in the application."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Format: `delete [index]`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `delete 1`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d Visualisation"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "walnads"
        },
        "content": "// tag::stats[]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Showing overall statistics: `stats`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Presents a visual overview of the user’s eateries and reviews. Eatery and review data used to generate the statistics are collated from the start of the application. The command will generate six types of statistics:  most visited eateries, least visited eateries, eateries you spent the most at (on average), eateries you spent the least at (on average), price per category, number of visits per category."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format: `stats`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "walnads"
        },
        "content": "****"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "walnads"
        },
        "content": "* There must be at least *one* review and eatery to generate the statistics."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "walnads"
        },
        "content": "* After updating a review or eatery, the user must run the `stats` command again to update the statistics as it does *not* auto-update."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "walnads"
        },
        "content": "****"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "walnads"
        },
        "content": "// end::stats[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d Todo Mode"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "In Todo mode, users will be able to manipulate eateries which they have yet to visit, but are planning on visiting. Similarly, users will be able to add, edit, and delete eateries. Futhermore, users are able to save a particular eatery from the todo list into the main list if the user has finally visited that eatery."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d Working with Eateries"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Adding an eatery: `add`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Adds an eatery to the todo list."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "walnads"
        },
        "content": "Format: `add \\n [name of eatery] \\a [address] {\\t [tags]...}`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "walnads"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `add \\n Two Chefs Eating Place \\a 116 Commonwealth Cres, #01-129`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "walnads"
        },
        "content": "* `add \\n Two Chefs Eating Place \\a 116 Commonwealth Cres, #01-129 \\t good-for-groups \\t non-aircon`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Tagging an eatery: `addtag`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Adds tags to an eatery."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format: `addtag [index] \\t [tag] {\\t [tags]...}`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "****"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* At least *one* tag must be specified."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "****"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `addtag 2 \\t hawker \\t good-for-sharing`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Removing tags from an eatery: `removetag`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Removes tags from an eatery."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format: `removetag [index] \\t [tags]...`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "****"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* If the tags to be removed are not associated to the eatery in the first place, no changes will be made."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "****"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `removetag 2 \\t hawker`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Viewing an eatery: `show`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Shows an eatery with all its details - address, tags, reviews, and a map of its location."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format: `show [index]`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "walnads"
        },
        "content": "****"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* In order *to view the eatery\u0027s map, you must be connected to the Internet*."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "walnads"
        },
        "content": "****"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `show 2`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Finding an eatery: `find`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Finds an eatery based on a set of user-supplied conditions."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format: `find {\\n [name of eatery]} {\\a [address]} {\\t [tags]...}`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "****"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* At least one condition must be supplied, but there is no upper limit."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* Eateries that match *any* of the conditions will be shown."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** `find \\n Noodle \\t cheap` will show eateries that either have \"Noodle\" in their name, or the tag \"cheap\", or both."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* Conditions are case-insensitive."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* For `name` and `address`, eateries that match the conditions partially will be shown."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** `find \\n rice` will show both \"Tian Tian Chicken Rice\" and \"The Ricebowl\"."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "****"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `find \\n Noodle \\t cheap`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `find \\a Jurong`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Deleting an eatery: `delete`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Delete an eatery in the application."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "walnads"
        },
        "content": "Format: `delete [index]`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "walnads"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "walnads"
        },
        "content": " * `delete 1`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Saving a todo eatery to the main eatery list : `save`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Remove a todo eatery from the todo list and provides a quick way to add it to the main list of eateries."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format: `save [index]`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "****"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* Save the eatery at the specified index."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* The eatery will be removed from the todo list after `save` is executed."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* Application will toggle to Main mode."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* Subsequently, the `add` command will be constructed and the user will be required to input the missing field before the eatery is saved in the main list."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "****"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* `save 2`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003d\u003d\u003d News Feed"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "EatMe allows you to stay up-to-date with the latest food trends from right within the app!"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Add your favorite food blogs into the app and EatMe will show you a list of the latest articles from those blogs on the right panel."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "To view any of the articles, simply click on the title of the post."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Terminology:"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* `feed` - A food blog"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* `feed post` - A single post from a food blog"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a feed : `addfeed`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Adds a new feed to the app."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Format: `addfeed \\n [name of feed] \\a [Web address of the feed]`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "****"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* Adds a new feed with the given name and Web address."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* Fetches the 5 latest posts from the feed and displays them in the right panel."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* The Web address *must point to a valid RSS XML feed*."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* In order *to fetch the latest posts, you must be connected to the Internet*."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "If you are not connected to the Internet, you can still add feeds but feed posts will only be fetched when the app is restarted with Internet connectivity."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "****"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* `addfeed \\n Eatbook \\a https://eatbook.com/feed`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a feed : `deletefeed`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Deletes a feed from the app."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Format: `deletefeed \\n [name of feed]`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "****"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* Deletes the feed with the specified name and all its associated feed posts."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* The name *must match the feed\u0027s name exactly*."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "****"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "walnads"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "* `deletefeed \\n Eatbook`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003d\u003d Quick Reference"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|Type this...|For this..."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|`help`|Viewing help"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|`exit`|Exiting the app"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|`add`|Adding an eatery"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "|`delete`|Deleting an eatery"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|`find`|Finding an eatery"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "|`edit`|Editing an eatery"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|`close`|Marking an eatery as closed"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|`reopen`|Reopening a closed eatery"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|`review`|Reviewing an eatery"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "|`editreview`|Editing a review"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "|`deletereview`|Deleting a review"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|`addtag`|Tagging an eatery"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|`removetag`|Removing tags from an eatery"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|`list`|Listing all eateries"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|`show`|Viewing an eatery"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "|`load`|Load eateries from other file"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|`stats`|Showing overall statistics"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|`mode`|Toggling between main and todo modes"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "|`save`|Saving a todo eatery to the main eatery list"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|`addfeed`|Adding a feed"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|`deletefeed`|Deleting a feed"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "*Q*: How do I transfer my data to another computer?"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "walnads"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous EatMe folder."
      }
    ],
    "authorContributionMap": {
      "walnads": 75,
      "ROHITREDDYBALAM": 34,
      "JunHongT": 213,
      "dvrylc": 88,
      "-": 93
    }
  },
  {
    "path": "docs/UsingTravis.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Travis CI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/[Travis CI] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Travis CI can run the projects\u0027 tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken by the changes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "The current Travis CI set up performs the following things whenever someone push code to the repo:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs the `./gradlew clean test coverage coveralls -i` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* Renders documentation from asciidoc to html and automatically publishes them using GitHub Pages."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs additional link:#repository-wide-checks[repository-wide checks]."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customise your travis build further, you can learn more about Travis from https://docs.travis-ci.com/[Travis CI Documentation]."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Travis CI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://travis-ci.org/ and click `Sign in with GitHub`, then enter your GitHub account details if needed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image:signing_in.png[Signing into Travis CI]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `Review and add` as shown below:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image:review_and_add.png[Review and add]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "to Travis CI so that it can access your commits and build your code."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If repository cannot be found, click `Sync account`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".  This repo comes with a link:../.travis.yml[`.travis.yml`] that tells Travis what to do. So there is no need for you to create one yourself."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".  To see the CI in action, push a commit to the master branch!"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the Travis build."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "image:build_pending.png[Commit build]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a provided remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_build.png[Travis build]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".  If the build is successful, you should be able to check the coverage details of the tests at http://coveralls.io/[Coveralls]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enabling auto-publishing of documentation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure that you have followed the steps above to set up Travis CI."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".  On GitHub, create a new user account and give this account collaborator and admin access to the repo. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "   Using this account, generate a personal access token https://github.com/settings/tokens/new[here]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": "Eateryal access tokens are like passwords so make sure you keep them secret! If the personal access token is leaked, please delete it and generate a new one."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos. +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a description for the token. (e.g. `Travis CI - deploy docs to gh-pages`)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Check the `public_repo` checkbox."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Click `Generate Token` and copy your new personal access token."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "We will use this token to grant Travis access to the repo."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:generate_token.png[Generate token]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".  Click on the settings button next to the switch. In the Environment Variables section, add a new environment variable with"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* name: `GITHUB_TOKEN`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* value: personal access token copied in step 1"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Display value in build log: `OFF`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_add_token.png[Travis add token]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Make sure you set `Display value in build log` to `OFF`.* +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Otherwise, other people will be able to see the personal access token and thus have access this repo. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, make sure you *do not print `$GITHUB_TOKEN` to the logs* in Travis scripts as the logs are viewable by the public."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  Now, whenever there\u0027s a new commit to master branch, Travis will push the latest documentation to gh-pages branch."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "**To verify that it works,**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".  Trigger Travis to regenerate documentation. To do so, you need to push a new commit to the master branch of the fork. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   Suggested change: Remove the codacy badge from `README`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".  Wait for Travis CI to finish running the build on your new commit."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to the URL `\\https://\u003cyour-username-or-organization-name\u003e.github.io/addressbook-level3/`. You should see your `README` file displayed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Repository-wide checks"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, we also configure Travis CI to run some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[source,shell]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Implementing new checks"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Checks are implemented as executable `check-*` scripts within the `config/travis/` directory. The `run-checks.sh` script will automatically pick up and run files named as such."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts should print out errors in the following format:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "SEVERITY:FILENAME:LINE: MESSAGE"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts must exit with a non-zero exit code if any errors occur."
      }
    ],
    "authorContributionMap": {
      "jakq": 1,
      "-": 139
    }
  },
  {
    "path": "docs/diagrams/AddCreateSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \"ac:AddCommand\" LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "end box"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \"n:Name\" MODEL_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \"a:Address\" MODEL_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \"c:Category\" MODEL_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \"t:Tags\" MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \"e:Eatery\" MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"ac:AddCommand\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "create \"n:Name\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ac:AddCommand\" -\u003e \"n:Name\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"n:Name\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"n:Name\" -\u003e \"ac:AddCommand\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"n:Name\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "create \"a:Address\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ac:AddCommand\" -\u003e \"a:Address\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"a:Address\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"a:Address\" -\u003e \"ac:AddCommand\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"a:Address\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "create \"c:Category\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ac:AddCommand\" -\u003e \"c:Category\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"c:Category\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"c:Category\" -\u003e \"ac:AddCommand\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"c:Category\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "opt Tags were given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tcreate \"t:Tags\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "\t\"ac:AddCommand\" -\u003e \"t:Tags\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tactivate \"t:Tags\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "\t\"t:Tags\" -\u003e \"ac:AddCommand\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tdeactivate \"t:Tags\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "end"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "create \"e:Eatery\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ac:AddCommand\" -\u003e \"e:Eatery\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"e:Eatery\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"e:Eatery\"-\u003e \"ac:AddCommand\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"e:Eatery\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"ac:AddCommand\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "walnads": 51
    }
  },
  {
    "path": "docs/diagrams/AddFeedActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "title AddFeed"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "start"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ":User executes \"\"addfeed\"\" command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "note left"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "  Arguments should"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "  contain feed name"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "  and URL of RSS feed"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "end note"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "if (command is valid) then (yes)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    :Parse arguments into an"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \"\"AddFeedCommand\"\" object;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    :Execute \"\"AddFeedCommand\"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    note left"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Adds feed and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        fetches its latest"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        feed posts"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    end note"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    :Add new feed to feed list;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    if (internet is available) then (yes)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        :Fetch latest feed posts;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        :Update News Feed panel with"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        newly obtained feed posts;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    else (no)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    :Show success message to the user;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "else (no)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    :Throw an exception;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    :Show error message to the user;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "endif"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "stop"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 43
    }
  },
  {
    "path": "docs/diagrams/AddFeedSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "participant \":EatMeParser\" as EatMeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "participant \":AddFeedCommandParser\" as AddFeedCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "participant \"a:AddFeedCommand\" as AddFeedCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "participant \"f:Feed\" as Feed MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "participant \":FeedList\" as FeedList MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "[-\u003e LogicManager : execute(addfeed)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "LogicManager -\u003e EatMeParser : parseCommand(addfeed)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "activate EatMeParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "create AddFeedCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "EatMeParser -\u003e AddFeedCommandParser : parse(args)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "activate AddFeedCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "create Feed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "AddFeedCommandParser -\u003e Feed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "activate Feed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Feed --\u003e AddFeedCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "deactivate Feed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Feed -[hidden]-\u003e AddFeedCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "destroy Feed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "create AddFeedCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "AddFeedCommandParser -\u003e AddFeedCommand : f"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "activate AddFeedCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "AddFeedCommand --\u003e AddFeedCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "deactivate AddFeedCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "AddFeedCommandParser --\u003e EatMeParser : a"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "deactivate AddFeedCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "AddFeedCommandParser -[hidden]-\u003e EatMeParser : a"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "destroy AddFeedCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "EatMeParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "deactivate EatMeParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "LogicManager -\u003e AddFeedCommand : execute()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "activate AddFeedCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "AddFeedCommand -\u003e Model : addFeed(f)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Model -\u003e FeedList : addFeed(f)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "activate FeedList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "FeedList --\u003e Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "deactivate FeedList"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Model --\u003e AddFeedCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "AddFeedCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "deactivate AddFeedCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "AddFeedCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "destroy AddFeedCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "[\u003c--LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 72
    }
  },
  {
    "path": "docs/diagrams/AddSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \":LogicManager\" LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \":EatMeParser\" LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \"acp:AddCommandParser\" LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \"ac:AddCommand\" LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \"cr:CommandResult\" LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \":Model\" MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \":EateryList\" MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "[-\u003e \":LogicManager\" : execute(\"add \\\\n..\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \":LogicManager\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":LogicManager\" -\u003e \":EatMeParser\" : parseCommand(\"add \\\\n..\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \":EatMeParser\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "create \"acp:AddCommandParser\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":EatMeParser\" -\u003e \"acp:AddCommandParser\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"acp:AddCommandParser\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"acp:AddCommandParser\" --\u003e \":EatMeParser\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"acp:AddCommandParser\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":EatMeParser\" -\u003e \"acp:AddCommandParser\" : parse(\"\\\\n..\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"acp:AddCommandParser\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "ref over \"acp:AddCommandParser\" : create Eatery e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "create \"ac:AddCommand\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"acp:AddCommandParser\" -\u003e \"ac:AddCommand\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"ac:AddCommand\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ac:AddCommand\" --\u003e \"acp:AddCommandParser\" : ac"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"ac:AddCommand\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"acp:AddCommandParser\" --\u003e \":EatMeParser\" : ac"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"acp:AddCommandParser\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "destroy \"acp:AddCommandParser\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \":EatMeParser\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":LogicManager\" -\u003e \"ac:AddCommand\" : execute()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"ac:AddCommand\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ac:AddCommand\" -\u003e \":Model\" : hasEatery(e)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \":Model\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":Model\" -\u003e \":EateryList\" : hasEatery(e)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \":EateryList\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \":Model\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \":EateryList\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "opt Eatery e does not exist"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "\t\"ac:AddCommand\" -\u003e \":Model\" : addEatery(e)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tactivate \":Model\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "\t\":Model\" -\u003e \":EateryList\" : addEatery(e)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tactivate \":EateryList\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tdeactivate \":Model\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tdeactivate \":EateryList\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "end"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "create \"cr:CommandResult\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ac:AddCommand\" -\u003e \"cr:CommandResult\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"cr:CommandResult\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"cr:CommandResult\" --\u003e \"ac:AddCommand\" : cr"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"cr:CommandResult\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ac:AddCommand\" --\u003e \":LogicManager\" : cr"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"ac:AddCommand\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "walnads"
        },
        "content": "[\u003c-- \":LogicManager\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "walnads"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "walnads": 71
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate ui"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "ui -\u003e logic : \"execute(\"delete 1\")\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "logic -\u003e model : \"deleteEatery()\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate model"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "model --\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "logic -\u003e storage : saveEateryList()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate storage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "storage -\u003e storage : save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "storage --\u003e logic"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "logic --\u003e ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "ui --\u003e user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "walnads": 13,
      "-": 21
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jakq"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueEateryList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jakq"
        },
        "content": "UniqueTagList -[hidden]down- UniqueEateryList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jakq"
        },
        "content": "UniqueTagList -[hidden]down- UniqueEateryList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": "UniqueEateryList o-right-\u003e Eatery"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jakq"
        },
        "content": "Eatery o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": "Eatery *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": "Eatery *--\u003e Address"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jakq": 7,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/CloseClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jakq"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jakq"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \":LogicManager\" LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \":EatMeParser\" LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \"cp:CloseCommandParser\" LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \"c:CloseCommand\" LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \"cr:CommandResult\" LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jakq"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jakq"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \":Model\" MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \":EateryList\" MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \":UniqueEateryList\" MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jakq"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": "[-\u003e \":LogicManager\" : execute(\"close 1\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \":LogicManager\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":LogicManager\" -\u003e \":EatMeParser\" : parseCommand(\"close 1\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \":EatMeParser\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jakq"
        },
        "content": "create \"cp:CloseCommandParser\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":EatMeParser\" -\u003e \"cp:CloseCommandParser\" : parse(\"1\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \"cp:CloseCommandParser\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": "create \"c:CloseCommand\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"cp:CloseCommandParser\" -\u003e \"c:CloseCommand\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \"c:CloseCommand\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"c:CloseCommand\" --\u003e \"cp:CloseCommandParser\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \"c:CloseCommand\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"cp:CloseCommandParser\" --\u003e \":EatMeParser\" : c"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \"cp:CloseCommandParser\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jakq"
        },
        "content": "destroy \"cp:CloseCommandParser\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":EatMeParser\" --\u003e \":LogicManager\" : c"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \":EatMeParser\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":LogicManager\" -\u003e \"c:CloseCommand\" : execute()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \"c:CloseCommand\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"c:CloseCommand\" -\u003e \":Model\" : setEatery()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \":Model\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":Model\" -\u003e \":EateryList\" : setEatery()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \":EateryList\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \":UniqueEateryList\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":EateryList\" -\u003e \":UniqueEateryList\" : setEatery()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":UniqueEateryList\" -\u003e \":UniqueEateryList\" : set()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":UniqueEateryList\" --\u003e \":EateryList\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \":UniqueEateryList\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":EateryList\" --\u003e \":Model\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \":EateryList\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":Model\" --\u003e \"c:CloseCommand\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \":Model\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"c:CloseCommand\" -\u003e \":Model\" : updateFilteredEateryList()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \":Model\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":Model\" --\u003e \"c:CloseCommand\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \":Model\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jakq"
        },
        "content": "create \"cr:CommandResult\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"c:CloseCommand\" -\u003e \"cr:CommandResult\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \"cr:CommandResult\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"cr:CommandResult\" --\u003e \"c:CloseCommand\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \"cr:CommandResult\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"c:CloseCommand\" --\u003e \":LogicManager\" : cr"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \"c:CloseCommand\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jakq"
        },
        "content": "destroy \"c:CloseCommand\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jakq"
        },
        "content": "[\u003c-- \":LogicManager\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jakq"
        },
        "content": "@enduml"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jakq": 82
    }
  },
  {
    "path": "docs/diagrams/DeleteFeedActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "title DeleteFeed"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "start"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ":User executes \"\"deletefeed\"\" command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "note left"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "  Feed name must be"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "  supplied as an argument"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "end note"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "if (command is valid) then (yes)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    :Parse argument into an"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \"\"DeleteFeedCommand\"\" object;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    :Execute \"\"DeleteFeedCommand\"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    note left"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Deletes feed and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        its associated"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        feed posts"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    end note"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    :Delete feed from feed list;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    :Delete associated feed posts;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    :Show success message to the user;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "else (no)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    :Throw an exception;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    :Show error message to the user;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "endif"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "stop"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 36
    }
  },
  {
    "path": "docs/diagrams/DeleteFeedSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "participant \":EatMeParser\" as EatMeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "participant \":DeleteFeedCommandParser\" as DeleteFeedCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "participant \"d:DeleteFeedCommand\" as DeleteFeedCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "participant \":FeedList\" as FeedList MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "[-\u003e LogicManager : execute(deletefeed)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "LogicManager -\u003e EatMeParser : parseCommand(deletefeed)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "activate EatMeParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "create DeleteFeedCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "EatMeParser -\u003e DeleteFeedCommandParser : parse(args)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "activate DeleteFeedCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "create DeleteFeedCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "DeleteFeedCommandParser -\u003e DeleteFeedCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "activate DeleteFeedCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "DeleteFeedCommand --\u003e DeleteFeedCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "deactivate DeleteFeedCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "DeleteFeedCommandParser --\u003e EatMeParser : d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "deactivate DeleteFeedCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "DeleteFeedCommandParser -[hidden]-\u003e EatMeParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "destroy DeleteFeedCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "EatMeParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "deactivate EatMeParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "LogicManager -\u003e DeleteFeedCommand : execute()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "activate DeleteFeedCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "DeleteFeedCommand -\u003e Model : getFeedList()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Model --\u003e DeleteFeedCommand : feedList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "DeleteFeedCommand -\u003e Model : deleteFeed(f)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Model -\u003e FeedList : removeFeed(f)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "activate FeedList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "FeedList --\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "deactivate FeedList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Model --\u003e DeleteFeedCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "DeleteFeedCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "deactivate DeleteFeedCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "DeleteFeedCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "destroy DeleteFeedCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "[\u003c--LogicManager : result"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 68
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jakq"
        },
        "content": "DeleteCommand -\u003e Model : deleteEatery(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jakq": 1,
      "-": 68
    }
  },
  {
    "path": "docs/diagrams/EditEateryDescriptorSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \"ecp:EditCommandParser\" LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \"e:EditEateryDescriptor\" LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"ecp:EditCommandParser\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "create \"e:EditEateryDescriptor\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ecp:EditCommandParser\" -\u003e \"e:EditEateryDescriptor\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"e:EditEateryDescriptor\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"e:EditEateryDescriptor\" --\u003e \"ecp:EditCommandParser\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"e:EditEateryDescriptor\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ecp:EditCommandParser\" -\u003e \"e:EditEateryDescriptor\" : setAddress(..)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"e:EditEateryDescriptor\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"e:EditEateryDescriptor\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"ecp:EditCommandParser\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "walnads": 20
    }
  },
  {
    "path": "docs/diagrams/EditReviewActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "title EditReview"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "start"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ":User executes \"\"editreview\"\" command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "note left"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "  Arguments should"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "  contain valid review index,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "  review description,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "  cost, rating and date"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "end note"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "if (is a valid command) then (yes)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    :Parse arguments into a"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    \"\"EditReviewCommand\"\" object;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    if (any field edited) then (yes)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            :Execute EditReviewCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            note left"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                    Edits review"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            end note"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            :Edits the review;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                :Show success message to the user;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    else (no)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            : Throw an exception;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            : Show error message to the user;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "else (no)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    :Throw an exception;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    :Show error message to the user;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "endif"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "stop"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 45
    }
  },
  {
    "path": "docs/diagrams/EditSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \":LogicManager\" LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \":EatMeParser\" LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \"ecp:EditCommandParser\" LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \"ec:EditCommand\" LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \"cr:CommandResult\" LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \":Model\" MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \":EateryList\" MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "[-\u003e \":LogicManager\" : execute(\"edit 1 \\\\a..\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \":LogicManager\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":LogicManager\" -\u003e \":EatMeParser\" : parseCommand(\"edit 1 \\\\a..\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \":EatMeParser\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "create \"ecp:EditCommandParser\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":EatMeParser\" -\u003e \"ecp:EditCommandParser\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"ecp:EditCommandParser\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ecp:EditCommandParser\" --\u003e \":EatMeParser\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"ecp:EditCommandParser\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":EatMeParser\" -\u003e \"ecp:EditCommandParser\" : parse(\"\\\\a..\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"ecp:EditCommandParser\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "ref over \"ecp:EditCommandParser\" : create EditEateryDescriptor e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "create \"ec:EditCommand\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ecp:EditCommandParser\" -\u003e \"ec:EditCommand\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"ec:EditCommand\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ec:EditCommand\" --\u003e \"ecp:EditCommandParser\" : ec"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"ec:EditCommand\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ecp:EditCommandParser\" --\u003e \":EatMeParser\" : ec"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"ecp:EditCommandParser\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "destroy \"ecp:EditCommandParser\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \":EatMeParser\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":LogicManager\" -\u003e \"ec:EditCommand\" : execute()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"ec:EditCommand\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ec:EditCommand\" -\u003e \":Model\" : getFilteredEateryList()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \":Model\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":Model\" --\u003e \"ec:EditCommand\" : list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \":Model\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "ref over \"ec:EditCommand\" : create Eatery edited"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "opt Eatery edited is not a duplicate"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ec:EditCommand\" -\u003e \":Model\" : setEatery(edited)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \":Model\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":Model\" -\u003e \":EateryList\" : setEatery(edited)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \":EateryList\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \":EateryList\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ec:EditCommand\" -\u003e \":Model\" : updateFilteredEateryList()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \":Model\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "end"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "create \"cr:CommandResult\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ec:EditCommand\" -\u003e \"cr:CommandResult\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"cr:CommandResult\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"cr:CommandResult\" --\u003e \"ec:EditCommand\" : cr"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"cr:CommandResult\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"ec:EditCommand\" --\u003e \":LogicManager\" : cr"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"ec:EditCommand\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "walnads"
        },
        "content": "[\u003c-- \":LogicManager\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "walnads"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "walnads": 71
    }
  },
  {
    "path": "docs/diagrams/LoadClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jakq"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jakq"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \":LogicManager\" LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \":EatMeParser\" LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \"lp:LoadCommandParser\" LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \"l:LoadCommand\" LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \"cr:CommandResult\" LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jakq"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jakq"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \"up:UserPrefs\" MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jakq"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jakq"
        },
        "content": "[-\u003e \":LogicManager\" : execute(\"load \\u Alice\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \":LogicManager\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":LogicManager\" -\u003e \":EatMeParser\" : parseCommand(\"load \\u Alice\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \":EatMeParser\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": "create \"lp:LoadCommandParser\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":EatMeParser\" -\u003e \"lp:LoadCommandParser\" : parse(\"Alice\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \"lp:LoadCommandParser\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": "create \"l:LoadCommand\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"lp:LoadCommandParser\" -\u003e \"l:LoadCommand\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \"l:LoadCommand\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"l:LoadCommand\" --\u003e \"lp:LoadCommandParser\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \"l:LoadCommand\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"lp:LoadCommandParser\" --\u003e \":EatMeParser\" : l"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \"lp:LoadCommandParser\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": "destroy \"lp:LoadCommandParser\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":EatMeParser\" --\u003e \":LogicManager\" : l"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \":EatMeParser\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":LogicManager\" -\u003e \"l:LoadCommand\" : execute()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \"l:LoadCommand\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": "create \"up:UserPrefs\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"l:LoadCommand\" -\u003e \"up:UserPrefs\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \"up:UserPrefs\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"up:UserPrefs\" -\u003e \"up:UserPrefs\" : setAddressBookFilePath()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"up:UserPrefs\" --\u003e \"l:LoadCommand\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \"up:UserPrefs\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jakq"
        },
        "content": "create \"cr:CommandResult\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"l:LoadCommand\" -\u003e \"cr:CommandResult\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \"cr:CommandResult\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"cr:CommandResult\" --\u003e \"l:LoadCommand\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \"cr:CommandResult\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"l:LoadCommand\" --\u003e \":LogicManager\" : cr"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \"l:LoadCommand\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "destroy \"l:LoadCommand\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": "[\u003c-- \":LogicManager\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jakq"
        },
        "content": "@enduml"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jakq": 63
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "Class EatMeParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "LogicManager --\u003e\"1\" EatMeParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "EatMeParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "EatMeParser .left.\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "note left of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "walnads": 5,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/ModeCommandActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "title ModeCommand"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "start"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ":User executes \"\"Mode\"\" command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "if () then (Main Mode)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    :EatMe toggle to Todo Mode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    :Show success message to the user;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "else (Todo Mode)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    :EatMe toggle to Main Mode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    :Show success message to the user;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 20
    }
  },
  {
    "path": "docs/diagrams/ModeCommandSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "participant \":EatMeParser\" as EatMeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "participant \"m:ModeCommand\" as ModeCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "participant \":EateryList\" as EateryList MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "[-\u003e LogicManager : execute(mode)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "LogicManager -\u003e EatMeParser : parseCommand(mode)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "activate EatMeParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "create ModeCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "EatMeParser -\u003e ModeCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "activate ModeCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "ModeCommand --\u003e EatMeParser : m"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "deactivate ModeCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "EatMeParser --\u003e LogicManager : m"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "deactivate EatMeParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "LogicManager -\u003e ModeCommand : execute()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "activate ModeCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "ModeCommand -\u003e Model : toggle()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Model -\u003e EateryList : toggle()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "activate EateryList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "EateryList --\u003e Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "deactivate EateryList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Model --\u003e ModeCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "ModeCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "deactivate ModeCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "ModeCommand -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "destroy ModeCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "[\u003c--LogicManager : result"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 53
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "    Interface ReadOnlyFeedList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "    Interface ReadOnlyEateryList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    Interface ReadOnlyUserPrefs \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "    Class ReadOnlyEateryList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tClass ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tClass ReadOnlyFeedList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tClass UserPrefs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\tClass Model"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tClass ObservableList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\tClass ModelManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tClass EateryList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tClass FeedList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jakq"
        },
        "content": "    Package Eatery {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Class UniqueEateryList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": "\t\tClass Eatery"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tClass Name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "\t\tClass Address"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "\t\tClass Tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "\t\tClass Review"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "\t\tClass Category"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "    Package Feed {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Class Feed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Class FeedPost"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Class UniqueFeedList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "    Package Statistics {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Class Statistics"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "Model ..\u003e ObservableList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "ModelManager o..\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "UserPrefs ..|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "ModelManager o--\u003e \"1\" EateryList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "EateryList --|\u003e ReadOnlyEateryList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "EateryList *--\u003e \"1\" UniqueEateryList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jakq"
        },
        "content": "UniqueEateryList o--\u003e \"*\" Eatery"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": "ModelManager o--\u003e \"1\" FeedList"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "FeedList --|\u003e ReadOnlyFeedList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "FeedList *--\u003e \"1\" UniqueFeedList"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "UniqueFeedList o--\u003e \"*\" FeedPost"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": "ModelManager o--\u003e \"1\" Statistics"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "walnads"
        },
        "content": "ModelManager o-right-\u003e \"*\" Review : list of active reviews"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jakq"
        },
        "content": "Eatery *--\u003e Name"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jakq"
        },
        "content": "Eatery *--\u003e Address"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "walnads"
        },
        "content": "Eatery *--\u003e Category"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jakq"
        },
        "content": "Eatery *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "walnads"
        },
        "content": "Eatery *--\u003e \"*\" Review"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "walnads": 41,
      "jakq": 6,
      "-": 25
    }
  },
  {
    "path": "docs/diagrams/ReopenClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jakq"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jakq"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \":LogicManager\" LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \":EatMeParser\" LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \"rp:ReopenCommandParser\" LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \"r:ReopenCommand\" LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \"cr:CommandResult\" LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jakq"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jakq"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \":Model\" MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \":EateryList\" MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jakq"
        },
        "content": "\tparticipant \":UniqueEateryList\" MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jakq"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": "[-\u003e \":LogicManager\" : execute(\"reopen 1\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \":LogicManager\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":LogicManager\" -\u003e \":EatMeParser\" : parseCommand(\"reopen 1\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \":EatMeParser\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jakq"
        },
        "content": "create \"rp:ReopenCommandParser\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":EatMeParser\" -\u003e \"rp:ReopenCommandParser\" : parse(\"1\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \"rp:ReopenCommandParser\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": "create \"r:ReopenCommand\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"rp:ReopenCommandParser\" -\u003e \"r:ReopenCommand\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \"r:ReopenCommand\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"r:ReopenCommand\" --\u003e \"rp:ReopenCommandParser\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \"r:ReopenCommand\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"rp:ReopenCommandParser\" --\u003e \":EatMeParser\" : r"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \"rp:ReopenCommandParser\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jakq"
        },
        "content": "destroy \"rp:ReopenCommandParser\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":EatMeParser\" --\u003e \":LogicManager\" : r"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \":EatMeParser\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":LogicManager\" -\u003e \"r:ReopenCommand\" : execute()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \"r:ReopenCommand\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"r:ReopenCommand\" -\u003e \":Model\" : setEatery()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \":Model\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":Model\" -\u003e \":EateryList\" : setEatery()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \":EateryList\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \":UniqueEateryList\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":EateryList\" -\u003e \":UniqueEateryList\" : setEatery()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":UniqueEateryList\" -\u003e \":UniqueEateryList\" : set()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":UniqueEateryList\" --\u003e \":EateryList\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \":UniqueEateryList\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":EateryList\" --\u003e \":Model\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \":EateryList\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":Model\" --\u003e \"r:ReopenCommand\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \":Model\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"r:ReopenCommand\" -\u003e \":Model\" : updateFilteredEateryList()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \":Model\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jakq"
        },
        "content": "\":Model\" --\u003e \"r:ReopenCommand\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \":Model\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jakq"
        },
        "content": "create \"cr:CommandResult\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"r:ReopenCommand\" -\u003e \"cr:CommandResult\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jakq"
        },
        "content": "activate \"cr:CommandResult\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"cr:CommandResult\" --\u003e \"r:ReopenCommand\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \"cr:CommandResult\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jakq"
        },
        "content": "\"r:ReopenCommand\" --\u003e \":LogicManager\" : cr"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jakq"
        },
        "content": "deactivate \"r:ReopenCommand\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jakq"
        },
        "content": "destroy \"r:ReopenCommand\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jakq"
        },
        "content": "[\u003c-- \":LogicManager\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jakq"
        },
        "content": "@enduml"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jakq": 82
    }
  },
  {
    "path": "docs/diagrams/ReviewActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "title Review"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "start"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ":User executes \"\"review\"\" command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "note left"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "  Arguments should"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "  contain valid eatery index,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "  review description,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "  cost, rating and date"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "end note"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "if (is a valid command) then (yes)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    :Parse arguments into a"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    \"\"ReviewCommand\"\" object;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    :Execute \"\"ReviewCommand\"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    note left"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Adds review"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    end note"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    :Add new review to the specified eatery\u0027s list of reviews;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    :Show success message to the user;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "else (no)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    :Throw an exception;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    :Show error message to the user;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "endif"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "stop"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 35
    }
  },
  {
    "path": "docs/diagrams/ReviewSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "participant \":EatMeParser\" as EatMeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "participant \":ReviewCommandParser\" as ReviewCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "participant \"a:ReviewCommand\" as ReviewCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "participant \"r:Review\" as Review MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "participant \":Eatery\" as Eatery MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "[-\u003e LogicManager : execute(review)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "LogicManager -\u003e EatMeParser : parseCommand(review)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "activate EatMeParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "create ReviewCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "EatMeParser -\u003e ReviewCommandParser : parse(args)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "activate ReviewCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "create Review"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "ReviewCommandParser -\u003e Review"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "activate Review"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Review --\u003e ReviewCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "deactivate Review"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Review -[hidden]-\u003e ReviewCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "destroy Review"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "create ReviewCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "ReviewCommandParser -\u003e ReviewCommand : r"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "activate ReviewCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "ReviewCommand --\u003e ReviewCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "deactivate ReviewCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "ReviewCommandParser --\u003e EatMeParser : a"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "deactivate ReviewCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "ReviewCommandParser -[hidden]-\u003e EatMeParser : a"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "destroy ReviewCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "EatMeParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "deactivate EatMeParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "LogicManager -\u003e ReviewCommand : execute()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "activate ReviewCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "ReviewCommand -\u003e Eatery : addReview(r)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "activate Eatery"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Eatery --\u003e ReviewCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "deactivate Eatery"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "ReviewCommand -\u003e Model : updateFilteredEateryList()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "Model --\u003e ReviewCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "ReviewCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "deactivate ReviewCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "ReviewCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "destroy ReviewCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "[\u003c--LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 72
    }
  },
  {
    "path": "docs/diagrams/ReviewUseCaseDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "left to right direction"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "skinparam packageStyle rectangle"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "actor user"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "rectangle Review {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "  user -- (add review)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "  user -- (edit review)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "  user -- (delete review)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 11
    }
  },
  {
    "path": "docs/diagrams/SaveTodoCommandActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "title ModeCommand"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "start"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ":User executes \"\"SaveTodo\"\" command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "if () then (Main Mode)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    :Application display error massage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    stop"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "else (Todo Mode)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    :EatMe delete eatery from todo list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    :EatMe toggle to Main mode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    :EatMe construct add command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    if () then (User input missing field)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    :EatMe add eatery to main list;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    stop"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    else (else)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "stop"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 30
    }
  },
  {
    "path": "docs/diagrams/SaveTodoCommandSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "participant \":EatMeParser\" as EatMeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "participant \":SaveTodoCommandParser\" as SaveTodoCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "participant \"s:SaveTodoCommand\" as SaveTodo LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "participant \":EateryList\" as EateryList MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "[-\u003e LogicManager : execute(save)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "LogicManager -\u003e EatMeParser : parseCommand(save)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "activate EatMeParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "create SaveTodoCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "EatMeParser -\u003e SaveTodoCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "activate SaveTodoCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "SaveTodoCommandParser --\u003e EatMeParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "deactivate SaveTodoCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "EatMeParser -\u003e SaveTodoCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "activate SaveTodoCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "SaveTodoCommandParser -\u003e SaveTodo"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "activate SaveTodo"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "SaveTodo --\u003e SaveTodoCommandParser : s"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "deactivate SaveTodo"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "SaveTodoCommandParser --\u003e EatMeParser : s"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "deactivate SaveTodoCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "SaveTodoCommandParser -[hidden]-\u003e EatMeParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "destroy SaveTodoCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "EatMeParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "deactivate EatMeParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "LogicManager -\u003e SaveTodo : execute()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "activate SaveTodo"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "SaveTodo -\u003e Model : deleteEatery(eatery)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Model -\u003e EateryList : removeEatery(eatery)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "activate EateryList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "EateryList --\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Model --\u003e SaveTodo"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "SaveTodo -\u003e Model : toggle()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Model -\u003e EateryList : toggle()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "EateryList --\u003e Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "deactivate EateryList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Model --\u003e SaveTodo"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "SaveTodo --\u003e LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "deactivate SaveTodo"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "SaveTodo -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "destroy SaveTodo"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "[\u003c--LogicManager : result"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 74
    }
  },
  {
    "path": "docs/diagrams/StatsSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "    participant \":LogicManager\" LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \":EatMeParser\" LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \"s:StatsCommand\" LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tparticipant \"cr:CommandResult\" LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    participant \"stats:Statistics\" MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    participant \":Model\" MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "[-\u003e \":LogicManager\" : execute(\"stats\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \":LogicManager\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":LogicManager\" -\u003e \":EatMeParser\" : parseCommand(\"stats\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \":EatMeParser\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "create \"s:StatsCommand\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":EatMeParser\" -\u003e \"s:StatsCommand\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"s:StatsCommand\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"s:StatsCommand\" --\u003e \":EatMeParser\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"s:StatsCommand\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":EatMeParser\" --\u003e \":LogicManager\" : s"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \":EatMeParser\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":LogicManager\" -\u003e \"s:StatsCommand\" : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"s:StatsCommand\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "create \"stats:Statistics\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"s:StatsCommand\" -\u003e \"stats:Statistics\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"stats:Statistics\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"stats:Statistics\" --\u003e \"s:StatsCommand\" : stats"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"stats:Statistics\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"s:StatsCommand\" -\u003e \":Model\" : setStatistics(stats)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "create \"cr:CommandResult\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"s:StatsCommand\" -\u003e \"cr:CommandResult\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"cr:CommandResult\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"cr:CommandResult\" --\u003e \"s:StatsCommand\" : cr"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"cr:CommandResult\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"s:StatsCommand\" --\u003e \":LogicManager\" : cr"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"s:StatsCommand\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "destroy \"s:StatsCommand\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "[\u003c-- \":LogicManager\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "walnads": 51
    }
  },
  {
    "path": "docs/diagrams/StatsUiSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "box Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "    participant \":MainWindow\" UI_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "    participant \":StatsWindow\" UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "    participant \"clg:CustomLayeredGraph\" UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "    participant \"cp:CustomPiechart\"UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "    participant \":Logic\" LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    participant \":Model\" MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "[-\u003e \":MainWindow\" : showStats()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \":MainWindow\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":MainWindow\" -\u003e \":Logic\" : getStatistics()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \":Logic\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":Logic\" -\u003e \":Model\" : getStatistics()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \":Model\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":Model\" --\u003e \":Logic\" : stats"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \":Model\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":Logic\" --\u003e \":MainWindow\" : stats"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \":Logic\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":MainWindow\" -\u003e \":StatsWindow\" : initStats()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \":StatsWindow\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "create \"clg:CustomLayeredGraph\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":StatsWindow\" -\u003e \"clg:CustomLayeredGraph\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"clg:CustomLayeredGraph\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"clg:CustomLayeredGraph\" --\u003e \":StatsWindow\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"clg:CustomLayeredGraph\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "create \"cp:CustomPiechart\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":StatsWindow\" -\u003e \"cp:CustomPiechart\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "activate \"cp:CustomPiechart\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "\"cp:CustomPiechart\" --\u003e \":StatsWindow\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \"cp:CustomPiechart\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "deactivate \":StatsWindow\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "\":StatsWindow\" --\u003e \":MainWindow\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "[\u003c-- \":MainWindow\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "walnads": 49
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "interface EateryListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "interface FeedListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "class JsonAdaptedEatery"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "class JsonAdaptedFeed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "class JsonAdaptedFeedPost"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "class JsonAdaptedReview"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "class JsonAdaptedTag"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "class JsonEateryListStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "class JsonFeedListStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "class JsonSerializableEateryList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "class JsonSerializableFeedList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "StorageManager .up.|\u003e Storage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "StorageManager o-down-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "StorageManager o-down-\u003e EateryListStorage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "StorageManager o-down-\u003e FeedListStorage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "JsonUserPrefsStorage .up.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "JsonEateryListStorage .up.|\u003e EateryListStorage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "JsonFeedListStorage .up.|\u003e FeedListStorage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "JsonEateryListStorage ..\u003e JsonSerializableEateryList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "JsonSerializableEateryList --\u003e JsonAdaptedEatery"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "JsonAdaptedEatery --\u003e JsonAdaptedReview"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "JsonAdaptedEatery --\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "JsonFeedListStorage ..\u003e JsonSerializableFeedList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "JsonSerializableFeedList --\u003e JsonAdaptedFeed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "JsonAdaptedFeed --\u003e JsonAdaptedFeedPost"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "walnads": 30,
      "-": 10
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\tClass MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\tClass StatusBarFooter"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tClass ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\tClass CommandBox"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tClass HelpWindow"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tClass EateryCard"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tClass EateryListPanel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tClass FeedPostCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tClass FeedPostListPanel"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tClass StatsWindow"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tClass ReviewListPanel"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tClass UiPart"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tClass CustomLayeredGraph"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tClass CustomPiechart"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "EateryCard ..\u003e Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "StatsWindow ..\u003e Model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "FeedPostCard ..\u003e Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "UiManager -up-|\u003e Ui"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "UiManager --\u003e MainWindow"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "MainWindow *-down-\u003e HelpWindow"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "MainWindow *-down-\u003e \"2\" EateryListPanel"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "MainWindow *-down-\u003e FeedPostListPanel"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "MainWindow *-down-\u003e ReviewListPanel"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "MainWindow *-down-\u003e StatsWindow"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jakq"
        },
        "content": "EateryListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "FeedPostListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": "HelpWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "ResultDisplay ..\u003e ReviewListPanel"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": "ReviewListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "walnads"
        },
        "content": "StatsWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "walnads"
        },
        "content": "EateryCard --|\u003e UiPart"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "walnads"
        },
        "content": "FeedPostCard --|\u003e UiPart"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "walnads"
        },
        "content": "CustomLayeredGraph --|\u003e UiPart"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "walnads"
        },
        "content": "CustomPiechart --|\u003e UiPart"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "walnads"
        },
        "content": "EateryListPanel --\u003e EateryCard"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "walnads"
        },
        "content": "FeedPostListPanel --\u003e FeedPostCard"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "walnads"
        },
        "content": "StatsWindow --\u003e CustomLayeredGraph"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "walnads"
        },
        "content": "StatsWindow --\u003e CustomPiechart"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "walnads": 40,
      "jakq": 1,
      "-": 34
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Participant \":EatMeParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jakq"
        },
        "content": "ecp -\u003e ec ++: index, editEateryDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "jakq": 1,
      "-": 19
    }
  },
  {
    "path": "docs/team/JunHong.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d Teo Jun Hong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d PROJECT: EatMe"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d About the project"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "My team of 4 computing students and I were tasked with enhancing a basic command line interface (CLI) desktop application, AddressBook 3 (AB3),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "for our software engineering project. We had chose to modify it into a food diary application known as `EatMe`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "EatMe is a *food diary app for people who love good food*, allowing the user to: +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ". manage places they have been to,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ". keep track of their experience and expenditure"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ". be up-to-date with the latest food trends and events"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "EatMe is optimized for those who like the speed of a Command Line Interface (CLI) while still maintaining the user-friendliness of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "The image below shows the mockup of our project:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "image::Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "My main role is the implementation of the todo mode for EatMe."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "In the following sections, the enhancement will be described in more details, as well as relevant documentation from user and developer guide."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "This section show summary of my contribution to the team project."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* *Major enhancement*: added *the ability to toggle between modes and save eatery from todo mode to main mode*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** What it does: allows the user to toggle into `todo` mode, allowing user to add eateries which they had yet to visit, serving as a bucket list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "In addition, user will also be able to save an eatery after visiting without needing to type the whole command as the application will provide a quick way for user to fill in the missing fields."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Justification: Through the implementation of todo mode, a user can now keep a separate list of eateries which the user wish to go. This will be useful for the user as many might wish to keep a list of eateries which they hope to visit."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "With Todo mode, user will be able to have a broader selection of eateries when deciding on where to go."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "With the implementation of the Save Command, the application had also reduced the hassle of needing to retype the whole command to record the eatery into the main list through `save` command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. After implementation, the team and I now need to consider 2 different states of the application as we proceed in designing future features."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Credits: Both `mode` command and `SaveTodo` command are based on the AB3 template provided."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* *Minor enhancement*: Relevant updates to ui and model related to todo mode."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "*** Minor change to Help Window, allowing user to view url of EatMe site instead. (Pull requests https://github.com/AY1920S1-CS2103T-W11-3/main/pull/158[#158])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "*** Refactor test data to be relevant to our problem statement (Pull requests https://github.com/AY1920S1-CS2103T-W11-3/main/pull/112[#112])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "*** Organised User guide to more segments to allow user to have an easier time reading. (Pull request https://github.com/AY1920S1-CS2103T-W11-3/main/pull/159[#159])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "*** Update developer guide with content related to my code contribution (Pull requests https://github.com/AY1920S1-CS2103T-W11-3/main/pull/84[#84])"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "*** PRs reviewed (with regards to coding): https://github.com/AY1920S1-CS2103T-W11-3/main/pull/61[#61]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    , https://github.com/AY1920S1-CS2103T-W11-3/main/pull/88[#88], https://github.com/AY1920S1-CS2103T-W11-3/main/pull/96[#96]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    , https://github.com/AY1920S1-CS2103T-W11-3/main/pull/100[#100], https://github.com/AY1920S1-CS2103T-W11-3/main/pull/103[#103]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    , https://github.com/AY1920S1-CS2103T-W11-3/main/pull/155[#155], https://github.com/AY1920S1-CS2103T-W11-3/main/pull/162[#162]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    , https://github.com/AY1920S1-CS2103T-W11-3/main/pull/164[#164]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/nus-cs2103-AY1920S1/addressbook-level3/pull/27[1], https://github.com/nus-cs2103-AY1920S1/addressbook-level3/pull/8[2])"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "We had to update the original AB3 User Guide with instructions for the enhancements that we had added. The following is an excerpt from our EatMe User Guide, showing additions that I have made for the `mode` and `SaveTodo` features."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d Mode Command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Allows the user to toggle between Main mode and Todo mode."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format : `mode` +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Example Usage: +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* User start the application"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "image::startup.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* User input `mode`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "image::ExecuteMode.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* Application had switched to todo mode"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "image::todo.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d SaveTodo Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "This command removes a todo eatery from the todo list and provides a quick way to add it to the main list of eateries. +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format : `save`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Example Usage: +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* User start the application"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "image::startup.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* User execute `mode` command"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "image::ExecuteMode.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* User execute `save` with index of eatery he/she wanted to save."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "image::ExecuteSave.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* Application switch back to main mode, displaying incomplete command for user to finish inputting."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "image::SaveResult.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "The following section shows my contribution to the developer guide in regards to `Mode` and `SaveTodo` commands."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d Mode Command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Allows the user to toggle between Main mode and Todo mode. It extends \u0027Command\u0027, and once mode had been switched, will affect all other command functions."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "The mode is determined through the value of a boolean variable named \u0027isMainMode\u0027."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Given below is an example usage of how the Mode Command behaved."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Step 1: The user launches the application. Data from `addressbook` will be fetched and will be initialised as `Main Mode` by default."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Step 2: The user execute `mode` command and the mode of the application will be switched to `todo` mode, displaying items in the `todo` list instead."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Step 3: The user can execute `mode` command again, returning the application to `main` mode, showing the items stored in the `main` list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "The following sequence diagram shows how the `mode` command works:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "image::ModeCommandSequenceDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "image::ModeCommandActivity.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Mode execute"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* **Alternative 1 (current choice):** Toggle between mode through a boolean value."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Pros: Easy for implementation."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Cons: An additional factor to check when executing any other commands; Possibility of mis-manipulation of data."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support Mode Command"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* **Alternative 1 (current choice):** Maintain 2 separate lists for Main mode and Todo Mode."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Pros: Data between the 2 modes will be separated apart. Commands executed will only affect data stored in the list for the particular mode."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Cons: More effort required for maintenance purposes. Need to make sure that data from main list should not go into todo list, and vice versa"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d SaveTodo Command"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "This command allows the user to save an eatery from the todo list to the main eatery list. It extends \u0027Command\u0027."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Given below is an example usage of how the SaveTodo Command behaved."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Step 1: The user launches the application. Data from `addressbook` will be fetched and will be initialised as `Main Mode` by default."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Step 2: The user execute `mode` command and the mode of the application will be switched to `todo` mode, displaying items in the `todo` list instead."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Step 3: The user can execute `save 1`, indicating to the system the index of eatery to be saved."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Step 4: The eatery in the todo list will be removed and an add command will be constructed in the `CommandBox` for user to input any necessary fields before adding."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "The following sequence diagram shows how the `SaveTodo` command works:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "image::SaveTodoCommandSequence.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "image::SaveTodoCommandActivity.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Mode execute"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* **Alternative 1 (current choice):** Construct the commands as a string before displaying to the user."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Pros: User-friendly. User will be able to add the eatery to the main list with minimum effort."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Cons: Unable to save directly to the main list from todo list. Possible situation can be that the user did not `add` the new eatery after executing `saveTodo` command."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "This situation will result in the user requiring to type the whole `add` command on his own as information will not be saved."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* **Alternative 2** Allow eatery to have the same attributes fields as eatery in main list"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Pros: As eatery in todo list and main list have the same attributes, it will be possible to `save` the eatery directly to the main list without further input from the user."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "** Cons: User will be required to include additional field when `adding` an eatery in the todo list. Field entered may be irrelevant as user had yet to visit the eatery."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support SaveTodo Command"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* No additional data structure is required for `SaveTodo` command"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JunHongT": 177
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Eatery` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Eatery`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": "The `address` field in `Eatery` is actually an instance of the `seedu.address.model.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jakq"
        },
        "content": "Other usages like in `EditEateryDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditEateryDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jakq"
        },
        "content": ". Safe delete the field `address` in `EditEateryDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": "For example, removing the `address` field from the `Eatery` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jakq"
        },
        "content": "For example, there is a `$address` in each `EateryCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jakq"
        },
        "content": "A quick look at the `EateryCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jakq"
        },
        "content": ".EateryCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jakq"
        },
        "content": ".EateryCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jakq"
        },
        "content": ".invalidEateryAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jakq"
        },
        "content": "  \"eateries\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jakq"
        },
        "content": "    \"name\": \"Eatery with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "jakq": 14,
      "-": 103
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "`seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jakq"
        },
        "content": "command and store any possible changes in an `EditEateryDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jakq"
        },
        "content": "`editEateryDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jakq"
        },
        "content": "    Eatery personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jakq"
        },
        "content": "    Eatery editedEatery \u003d createEditedEatery(personToEdit, editEateryDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jakq"
        },
        "content": "    if (!personToEdit.isSameEatery(editedEatery) \u0026\u0026 model.hasEatery(editedEatery)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jakq"
        },
        "content": "    model.setEatery(personToEdit, editedEatery);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jakq"
        },
        "content": "    model.updateFilteredEateryList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jakq"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedEatery));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jakq"
        },
        "content": "    eateries.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jakq"
        },
        "content": "        source.getEateryList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jakq"
        },
        "content": "              .map(JsonAdaptedEatery::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jakq"
        },
        "content": ". It appears that a `JsonAdaptedEatery` is created for each `Eatery` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jakq"
        },
        "content": ".. Add a new field to `Eatery`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "jakq": 13,
      "-": 245
    }
  },
  {
    "path": "src/main/java/seedu/eatme/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/eatme/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/eatme/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.EateryList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.FeedList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyEateryList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyFeedList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.storage.EateryListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.storage.FeedListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.storage.JsonEateryListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.storage.JsonFeedListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.storage.Storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.ui.Ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.ui.UiManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing EatMe ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryListStorage eateryListStorage \u003d new JsonEateryListStorage(userPrefs.getEateryListFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        FeedListStorage feedListStorage \u003d new JsonFeedListStorage(userPrefs.getFeedListFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        storage \u003d new StorageManager(eateryListStorage, feedListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s eatery list and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * The data from the sample eatery list will be used instead if {@code storage}\u0027s eatery list is not found,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * or an empty eatery list will be used instead if errors occur when reading {@code storage}\u0027s eatery list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Optional\u003cReadOnlyEateryList\u003e eateryListOptional;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ReadOnlyEateryList initialEateryList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Optional\u003cReadOnlyFeedList\u003e feedListOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ReadOnlyFeedList initialFeedList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            eateryListOptional \u003d storage.readEateryList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            if (!eateryListOptional.isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample EateryList\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            initialEateryList \u003d eateryListOptional.orElseGet(SampleDataUtil::getSampleEateryList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            feedListOptional \u003d storage.readFeedList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            if (!feedListOptional.isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                logger.info(\"Feed list file not found. Will be starting with an empty FeedList\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            initialFeedList \u003d feedListOptional.orElseGet(SampleDataUtil::getSampleFeedList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            logger.warning(\"Data file not in the correct format. \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    + \"Will be starting with an empty EateryList and FeedList\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            initialEateryList \u003d new EateryList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            initialFeedList \u003d new FeedList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    + \"Will be starting with an empty EateryList and FeedList\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            initialEateryList \u003d new EateryList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            initialFeedList \u003d new FeedList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new ModelManager(initialEateryList, initialFeedList, userPrefs);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty EatMe\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        logger.info(\"Starting EatMe \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping EatMe ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 65,
      "jakq": 1,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/eatme/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/eatme/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/eatme/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static final String LOG_FILE \u003d \"eatme.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/eatme/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static final String MESSAGE_INVALID_EATERY_DISPLAYED_INDEX \u003d \"The eatery index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static final String MESSAGE_EATERIES_LISTED_OVERVIEW \u003d \"%1$d eateries listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String MESSAGE_INVALID_REVIEW_DISPLAYED_INDEX \u003d \"The review index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 1,
      "dvrylc": 1,
      "jakq": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/eatme/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/eatme/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/eatme/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/eatme/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/eatme/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/eatme/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/eatme/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/eatme/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/eatme/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/eatme/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code search}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Ignores case, and matches based on string. No full word match is required."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *       containsStringIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *       containsStringIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true // not a full word match"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *       containsStringIgnoreCase(\"ABc def\", \"xyz\") \u003d\u003d false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @param search   cannot be null, cannot be empty"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static boolean containsStringIgnoreCase(String sentence, String search) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(search);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String preppedSearch \u003d search.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        checkArgument(!preppedSearch.isEmpty(), \"Search parameter cannot be empty\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return Pattern.compile(Pattern.quote(preppedSearch), Pattern.CASE_INSENSITIVE).matcher(sentence).find();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 27,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.FeedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyEateryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyFeedList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.statistics.Statistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns the EateryList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @see seedu.eatme.model.Model#getEateryList()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    ReadOnlyEateryList getEateryList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of eateries"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": "    ObservableList\u003cEatery\u003e getFilteredEateryList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of todos */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    ObservableList\u003cEatery\u003e getFilteredTodoList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /** Returns an unmodifiable view of the active reviews */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    ObservableList\u003cReview\u003e getActiveReviews();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    boolean isMainMode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns the user prefs\u0027 eatery list file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    Path getEateryListFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns the FeedList."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @see FeedList#getFeedList() ()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    ReadOnlyFeedList getFeedList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns the user prefs\u0027 feed list file path."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    Path getFeedListFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Saves the feed list to disk."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    void saveFeedList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Gets the statistics of the eateries and reviews."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "walnads"
        },
        "content": "    Statistics getStatistics();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 5,
      "dvrylc": 40,
      "JunHongT": 5,
      "jakq": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.EatMeParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyEateryList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyFeedList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.statistics.Statistics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final EatMeParser eatMeParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        eatMeParser \u003d new EatMeParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Command command \u003d eatMeParser.parseCommand(commandText, isMainMode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            storage.saveEateryList(model.getEateryList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            storage.saveFeedList(model.getFeedList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public ReadOnlyEateryList getEateryList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return model.getEateryList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public ObservableList\u003cEatery\u003e getFilteredEateryList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return model.getFilteredEateryList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public ObservableList\u003cEatery\u003e getFilteredTodoList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return model.getFilteredTodoList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public ObservableList\u003cReview\u003e getActiveReviews() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return model.getActiveReviews();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public boolean isMainMode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return model.isMainMode();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Path getEateryListFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return model.getEateryListFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public ReadOnlyFeedList getFeedList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return model.getFeedList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Path getFeedListFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return model.getFeedListFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void saveFeedList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            storage.saveFeedList(model.getFeedList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            logger.warning(FILE_OPS_ERROR_MESSAGE + ioe);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return model.getStatistics();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 5,
      "dvrylc": 48,
      "JunHongT": 10,
      "jakq": 2,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Adds a eatery to the eatery list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_USAGE_MAIN \u003d COMMAND_WORD + \": Adds a eatery to the eatery list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_NAME + \" [name] \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_ADDRESS + \" [address] \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_CATEGORY + \" [category] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"{\" + PREFIX_TAG + \" [tag]} ...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_NAME + \" Fei Fei Wanton Mee \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_ADDRESS + \" 62 Joo Chiat Place \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_CATEGORY + \" Chinese \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_TAG + \" delicious\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_USAGE_TODO \u003d COMMAND_WORD + \": Adds a eatery to the todo list.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_NAME + \" [name] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_ADDRESS + \" [address] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"{\" + PREFIX_TAG + \" [tag]} ...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_NAME + \" Fei Fei Wanton Mee \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_ADDRESS + \" 62 Joo Chiat Place \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_TAG + \" delicious\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Eatery successfully added: %s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EATERY \u003d \"This eatery already exists!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private final Eatery toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Eatery}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public AddCommand(Eatery eatery) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireNonNull(eatery);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": "        toAdd \u003d eatery;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (model.hasEatery(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jakq"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EATERY);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jakq"
        },
        "content": "        model.addEatery(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 28,
      "JunHongT": 3,
      "jakq": 8,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/AddFeedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.Feed;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Adds a feed to the feed list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class AddFeedCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addfeed\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a feed to the feed list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_NAME + \" [name] \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_ADDRESS + \" [address]\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_NAME + \" Eatbook \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_ADDRESS + \" https://eatbook.sg/feed\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Feed successfully added: %s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FEED \u003d \"This feed already exists!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final Feed toAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Creates an AddFeedCommand to add the specified {@code Feed}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public AddFeedCommand(Feed feed) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(feed);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        toAdd \u003d feed;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (model.hasFeed(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FEED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        model.addFeed(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                || (other instanceof AddFeedCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddFeedCommand) other).toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 57
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/AddTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.model.Model.PREDICATE_SHOW_ALL_EATERIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Adds tags to an existing eatery in the eatme application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class AddTagCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addtag\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds tags to the eatery identified \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            + \"by the index number used in the displayed eatery list.\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            + \"The new tags will be added to the existing tags.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Parameters: [index] (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_TAG + \" [tag]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_TAG + \" good \" + PREFIX_TAG + \" elder-friendly\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String ADD_TAG_SUCCESS \u003d \"Tags successfully added\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final EditEateryDescriptor editEateryDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param index of the eatery in the displayed list to be edited."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param editEateryDescriptor details of the tags to be added."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public AddTagCommand(Index index, EditEateryDescriptor editEateryDescriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(editEateryDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.editEateryDescriptor \u003d editEateryDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        List\u003cEatery\u003e lastShownList \u003d model.isMainMode() ? model.getFilteredEateryList() : model.getFilteredTodoList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Eatery eateryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Eatery editedEatery \u003d createEditedEatery(eateryToEdit, editEateryDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        editedEatery.setReviews(eateryToEdit.getReviews());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        model.setEatery(eateryToEdit, editedEatery);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        model.updateFilteredEateryList(PREDICATE_SHOW_ALL_EATERIES);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new CommandResult(ADD_TAG_SUCCESS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Creates and returns a {@code Eatery} with the details of {@code eateryToEdit}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * edited with {@code editEateryDescriptor}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private static Eatery createEditedEatery(Eatery eateryToEdit, EditEateryDescriptor editEateryDescriptor) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Name name \u003d eateryToEdit.getName();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Address address \u003d eateryToEdit.getAddress();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Category category \u003d eateryToEdit.getCategory();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        editEateryDescriptor.addTags(eateryToEdit.getTags());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editEateryDescriptor.getTags();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return new Eatery(name, address, category, updatedTags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (!(other instanceof AddTagCommand)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        AddTagCommand e \u003d (AddTagCommand) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                \u0026\u0026 editEateryDescriptor.equals(e.editEateryDescriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Contains the details of the new tags to be added."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static class EditEateryDescriptor {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public EditEateryDescriptor() {}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public EditEateryDescriptor(EditEateryDescriptor toCopy) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            addTags(toCopy.tags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         * Adds {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public void addTags(Set\u003cTag\u003e newTag) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            for (Tag t : newTag) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                this.tags.add(t);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         * @return the tags corresponding to this object."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            if (!(other instanceof EditEateryDescriptor)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            EditEateryDescriptor e \u003d (EditEateryDescriptor) other;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 134,
      "dvrylc": 18,
      "JunHongT": 1
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.EateryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Clears the eatery list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Eatery list successfully cleared\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        model.setEateryList(new EateryList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/CloseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jakq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.model.Model.PREDICATE_SHOW_ALL_EATERIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Sets the isOpen field of an existing eatery in the eatery list to false."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class CloseCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"close\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": "            + \": Closes the eatery identified by the index number used in the displayed eatery list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Parameters: [index] (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jakq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_EATERY_ALREADY_CLOSED \u003d \"This eatery is already closed!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_CLOSED_EATERY_SUCCESS \u003d \"Eatery successfully closed: %s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * @param targetIndex of the eatery in the filtered eatery list to close"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public CloseCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jakq"
        },
        "content": "        List\u003cEatery\u003e lastShownList \u003d model.getFilteredEateryList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jakq"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery eateryToClose \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (!eateryToClose.getIsOpen()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": "            throw new CommandException(MESSAGE_EATERY_ALREADY_CLOSED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery closedEatery \u003d createClosedEatery(eateryToClose);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": "        model.setEatery(eateryToClose, closedEatery);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jakq"
        },
        "content": "        model.updateFilteredEateryList(PREDICATE_SHOW_ALL_EATERIES);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CLOSED_EATERY_SUCCESS, closedEatery.getName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jakq"
        },
        "content": "                || (other instanceof CloseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jakq"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((CloseCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Creates and returns a {@code Eatery} with the details of {@code eateryToEdit}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * edited with {@code editEateryDescriptor}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private static Eatery createClosedEatery(Eatery eateryToClose) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assert eateryToClose !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Name name \u003d eateryToClose.getName();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Address address \u003d eateryToClose.getAddress();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Category category \u003d eateryToClose.getCategory();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Set\u003cTag\u003e tags \u003d eateryToClose.getTags();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery closedEatery \u003d new Eatery(name, false, address, category, tags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jakq"
        },
        "content": "        closedEatery.setReviews(eateryToClose.getReviews());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return closedEatery;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jakq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 16,
      "jakq": 72
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final Eatery eateryToShow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final Review reviewToShow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /** Statistics information should be shown to the user. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private final boolean showStats;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * The application should save to-do eatery to eatery list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private final boolean wantToSave;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public CommandResult(String feedbackToUser, Eatery eateryToShow, Review reviewToShow,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "                         boolean showHelp, boolean exit, boolean wantToSave, boolean showStats) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.eateryToShow \u003d eateryToShow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.reviewToShow \u003d reviewToShow;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.wantToSave \u003d wantToSave;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.showStats \u003d showStats;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this(feedbackToUser, null, null, false, false, false, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser} and {@code eateryToShow},"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public CommandResult(String feedbackToUser, Eatery eateryToShow) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this(feedbackToUser, eateryToShow, null, false, false, false, false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser} and {@code reviewToShow},"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * and other fields are set to their default value."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public CommandResult(String feedbackToUser, Review reviewToShow) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this(feedbackToUser, null, reviewToShow, false, false, false, false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * and {@code eateryToShow} set to its default value"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean wantToSave, boolean showStats) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this(feedbackToUser, null, null, showHelp, exit, wantToSave, showStats);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Eatery getEateryToShow() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return eateryToShow;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public boolean wantToSave() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return wantToSave;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public boolean isShowStats() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return showStats;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 (Objects.equals(eateryToShow, otherCommandResult.eateryToShow))"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                \u0026\u0026 (Objects.equals(reviewToShow, otherCommandResult.reviewToShow))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return Objects.hash(feedbackToUser, eateryToShow, reviewToShow, showHelp, exit);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 10,
      "ROHITREDDYBALAM": 16,
      "dvrylc": 34,
      "JunHongT": 7,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Deletes a eatery identified using it\u0027s displayed index from the eatery list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": "            + \": Deletes the eatery identified by the index number used in the displayed eatery list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Parameters: [index] (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_DELETE_EATERY_SUCCESS \u003d \"Eatery successfully deleted: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        List\u003cEatery\u003e lastShownList \u003d model.isMainMode() ? model.getFilteredEateryList() : model.getFilteredTodoList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery eateryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": "        model.deleteEatery(eateryToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EATERY_SUCCESS, eateryToDelete.getName()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 10,
      "JunHongT": 1,
      "jakq": 4,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/DeleteFeedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.Feed;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Deletes a feed identified using its name from the feed list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class DeleteFeedCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletefeed\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \": Deletes the feed identified using its name from the feed list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Parameters: \" + PREFIX_NAME + \" [name]\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \" Eatbook\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_DELETE_FEED_SUCCESS \u003d \"Feed successfully deleted: %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_MISSING_FEED \u003d \"Feed does not exist!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public DeleteFeedCommand(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Feed feedToDelete \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        for (Feed f : model.getFeedList().getFeedList()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            if (f.getName().equals(name)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                feedToDelete \u003d f;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (feedToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_FEED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        model.deleteFeed(feedToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FEED_SUCCESS, feedToDelete.getName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                || (other instanceof DeleteFeedCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 name.equals(((DeleteFeedCommand) other).name)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 57
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/DeleteReviewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Deletes an existing eatery\u0027s review."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class DeleteReviewCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletereview\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            + \": Deletes the review identified by the index number used in the displayed review list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Parameters: [index] (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_DELETE_REVIEW_SUCCESS \u003d \"Review successfully deleted\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public DeleteReviewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        List\u003cReview\u003e lastShownList \u003d model.getActiveReviews();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REVIEW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Review reviewToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        lastShownList.remove(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        model.getActiveEatery().setReviews(lastShownList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new CommandResult(MESSAGE_DELETE_REVIEW_SUCCESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                || (other instanceof DeleteReviewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteReviewCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 45,
      "dvrylc": 9
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.model.Model.PREDICATE_SHOW_ALL_EATERIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Edits the details of an existing eatery in the eatery list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the eatery identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": "            + \"by the index number used in the displayed eatery list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Parameters: [index] (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"{\" + PREFIX_NAME + \" [name]} \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"{\" + PREFIX_ADDRESS + \" [address]} \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"{\" + PREFIX_CATEGORY + \" [category]} \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"{\" + PREFIX_TAG + \" [tag]} ...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_ADDRESS + \" 100 Orchard Road\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_EDIT_EATERY_SUCCESS \u003d \"Eatery successfully edited: %s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EATERY \u003d \"This eatery already exists!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private final EditEateryDescriptor editEateryDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * @param index of the eatery in the filtered eatery list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * @param editEateryDescriptor details to edit the eatery with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public EditCommand(Index index, EditEateryDescriptor editEateryDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireNonNull(editEateryDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jakq"
        },
        "content": "        this.editEateryDescriptor \u003d new EditEateryDescriptor(editEateryDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jakq"
        },
        "content": "        List\u003cEatery\u003e lastShownList \u003d model.getFilteredEateryList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jakq"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery eateryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery editedEatery \u003d createEditedEatery(eateryToEdit, editEateryDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (!eateryToEdit.isSameEatery(editedEatery) \u0026\u0026 model.hasEatery(editedEatery)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jakq"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EATERY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jakq"
        },
        "content": "        model.setEatery(eateryToEdit, editedEatery);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jakq"
        },
        "content": "        model.updateFilteredEateryList(PREDICATE_SHOW_ALL_EATERIES);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EATERY_SUCCESS, editedEatery.getName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Creates and returns a {@code Eatery} with the details of {@code eateryToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * edited with {@code editEateryDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private static Eatery createEditedEatery(Eatery eateryToEdit, EditEateryDescriptor editEateryDescriptor) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assert eateryToEdit !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Name updatedName \u003d editEateryDescriptor.getName().orElse(eateryToEdit.getName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Address updatedAddress \u003d editEateryDescriptor.getAddress().orElse(eateryToEdit.getAddress());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Category updatedCategory \u003d editEateryDescriptor.getCategory().orElse(eateryToEdit.getCategory());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editEateryDescriptor.getTags().orElse(eateryToEdit.getTags());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Eatery newEatery \u003d new Eatery(updatedName, updatedAddress, updatedCategory, updatedTags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        newEatery.setReviews(eateryToEdit.getReviews());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return newEatery;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jakq"
        },
        "content": "                \u0026\u0026 editEateryDescriptor.equals(e.editEateryDescriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Stores the details to edit the eatery with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * corresponding field value of the eatery."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static class EditEateryDescriptor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jakq"
        },
        "content": "        private boolean isOpen;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "walnads"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jakq"
        },
        "content": "        public EditEateryDescriptor() {}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jakq"
        },
        "content": "        public EditEateryDescriptor(EditEateryDescriptor toCopy) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "walnads"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, address, category, tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "walnads"
        },
        "content": "        public void setCategory(Category category) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "walnads"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "walnads"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jakq"
        },
        "content": "            if (!(other instanceof EditEateryDescriptor)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jakq"
        },
        "content": "            EditEateryDescriptor e \u003d (EditEateryDescriptor) other;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "walnads"
        },
        "content": "                    \u0026\u0026 getCategory().equals(e.getCategory())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 15,
      "ROHITREDDYBALAM": 3,
      "dvrylc": 27,
      "jakq": 31,
      "-": 136
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/EditReviewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.OptionalInt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Edits the details of an eatery\u0027s existing review."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class EditReviewCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editreview\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the review identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            + \"by the index number used in the displayed review list. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Parameters: [index] (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"{\" + PREFIX_DESCRIPTION + \" [description]} \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"{\" + PREFIX_COST + \" [cost]} \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"{\" + PREFIX_RATING + \" [rating]} \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"{\" + PREFIX_DATE + \" [date] (in dd/mm/yyyy format)}\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_COST + \" 15\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_EDITED_REVIEW_SUCCESS \u003d \"Review successfully edited\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final EditReviewDescriptor editReviewDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param index of the review in the review list to edit"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param editReviewDescriptor details to edit the review with"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public EditReviewCommand(Index index, EditReviewDescriptor editReviewDescriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(editReviewDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.editReviewDescriptor \u003d new EditReviewDescriptor(editReviewDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        List\u003cReview\u003e lastShownList \u003d model.getActiveReviews();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Eatery activeEatery \u003d model.getActiveEatery();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Review reviewToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Review editedReview \u003d createEditedReview(reviewToEdit, editReviewDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        lastShownList.set(index.getZeroBased(), editedReview);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        activeEatery.setReviews(lastShownList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new CommandResult(MESSAGE_EDITED_REVIEW_SUCCESS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Creates and returns a {@code Review} with the details of {@code reviewToEdit}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * edited with {@code editReviewDescriptor}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private static Review createEditedReview(Review reviewToEdit, EditReviewDescriptor editReviewDescriptor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assert reviewToEdit !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String updatedDescription \u003d editReviewDescriptor.getDescription().orElse(reviewToEdit.getDescription());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        double updatedCost \u003d editReviewDescriptor.getCost().orElse(reviewToEdit.getCost());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        int updatedRating \u003d editReviewDescriptor.getRating().orElse(reviewToEdit.getRating());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Date updatedDate \u003d editReviewDescriptor.getDate().orElse(reviewToEdit.getDate());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return new Review(updatedDescription, updatedCost, updatedRating, updatedDate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (!(other instanceof EditReviewCommand)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        EditReviewCommand e \u003d (EditReviewCommand) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                \u0026\u0026 editReviewDescriptor.equals(e.editReviewDescriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Stores the details to edit the review with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * corresponding field value of the review."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static class EditReviewDescriptor {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        private OptionalDouble cost;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        private OptionalInt rating;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public EditReviewDescriptor() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         * Copy constructor"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public EditReviewDescriptor(EditReviewDescriptor toCopy) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            setCost(toCopy.cost);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            setRating(toCopy.rating);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         * @return"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, cost, rating, date);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public void setDescription(String description) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public void setCost(OptionalDouble cost) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            this.cost \u003d cost;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public OptionalDouble getCost() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            if (cost \u003d\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                return OptionalDouble.empty();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return cost;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public void setRating(OptionalInt rating) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            this.rating \u003d rating;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public OptionalInt getRating() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            if (rating \u003d\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                return OptionalInt.empty();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return rating;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            if (!(other instanceof EditReviewDescriptor)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            EditReviewDescriptor e \u003d (EditReviewDescriptor) other;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return getCost().equals(e.getCost())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                    \u0026\u0026 getRating().equals(e.getRating())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 171,
      "dvrylc": 21
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting EatMe as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 1,
      "dvrylc": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.EateryAttributesContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Finds and lists all eateries in eatery list whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all eateries whose attributes contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"the specified constraints (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"{\" + PREFIX_NAME + \" [name]} \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"{\" + PREFIX_ADDRESS + \" [address]} \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"{\" + PREFIX_CATEGORY + \" [category]} \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"{\" + PREFIX_TAG + \" [tag]} ...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_CATEGORY + \" chinese \" + PREFIX_TAG + \" delicious\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final EateryAttributesContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public FindCommand(EateryAttributesContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": "        model.updateFilteredEateryList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": "                String.format(Messages.MESSAGE_EATERIES_LISTED_OVERVIEW, model.getFilteredEateryList().size()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 19,
      "jakq": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Help window successfully opened\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 1,
      "dvrylc": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.model.Model.PREDICATE_SHOW_ALL_EATERIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Lists all eateries in the eatery list to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All eateries successfully listed\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": "        model.updateFilteredEateryList(PREDICATE_SHOW_ALL_EATERIES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 5,
      "jakq": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/LoadCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jakq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_USER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jakq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Loads all eateries from the specified JSON file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jakq"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class LoadCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"load\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Loads the specified user profile.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Parameters: \" + PREFIX_USER + \" [username]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_USER + \" john\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_SUCCESS_LOADED \u003d \"User profile successfully loaded: %s. Please relaunch EatMe!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_ALREADY_LOADED \u003d \"This user profile is already loaded!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_PROFILE_NOT_FOUND \u003d \"Profile not found! Please check that user profile exists.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public final Path toLoad;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Creates a LoadCommand to add the specified {@code Path}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public LoadCommand(Path eateryListFilePath) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(eateryListFilePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        toLoad \u003d eateryListFilePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public LoadCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jakq"
        },
        "content": "        toLoad \u003d Paths.get(\"data\", System.getProperty(\"user.name\") + \".json\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (model.getEateryListFilePath().equals(toLoad)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ALREADY_LOADED, toLoad));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (!new File(toLoad.toString()).exists()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new CommandException(MESSAGE_PROFILE_NOT_FOUND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        userPrefs.setEateryListFilePath(toLoad);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "        model.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS_LOADED, toLoad));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jakq"
        },
        "content": "                || (other instanceof LoadCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jakq"
        },
        "content": "                \u0026\u0026 toLoad.equals(((LoadCommand) other).toLoad));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jakq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 17,
      "jakq": 51
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/ModeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.model.Model.PREDICATE_SHOW_ALL_EATERIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Toggles between main and todo mode."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class ModeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mode\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Mode successfully changed: %s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        model.toggle();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        model.updateFilteredEateryList(PREDICATE_SHOW_ALL_EATERIES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.isMainMode() ? \"main mode\" : \"todo mode\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 6,
      "JunHongT": 19
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/RemoveTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.model.Model.PREDICATE_SHOW_ALL_EATERIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Removes tag from an existing eatery in the eatme application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class RemoveTagCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"removetag\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes tags from the eatery identified \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            + \"by the index number used in the displayed eatery list.\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            + \"The tags will be removed from the existing tags.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Parameters: [index] (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"{\" + PREFIX_TAG + \" [tag]} ...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_TAG + \" good\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String REMOVE_TAG_SUCCESS \u003d \"Tags successfully removed\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final EditEateryDescriptor editEateryDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param index of the eatery in the displayed list to be edited."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param editEateryDescriptor details of the tags to be removed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public RemoveTagCommand(Index index, EditEateryDescriptor editEateryDescriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(editEateryDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.editEateryDescriptor \u003d editEateryDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        List\u003cEatery\u003e lastShownList \u003d model.isMainMode() ? model.getFilteredEateryList() : model.getFilteredTodoList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Eatery eateryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Eatery editedEatery \u003d createEditedEatery(eateryToEdit, editEateryDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        editedEatery.setReviews(eateryToEdit.getReviews());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        model.setEatery(eateryToEdit, editedEatery);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        model.updateFilteredEateryList(PREDICATE_SHOW_ALL_EATERIES);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new CommandResult(REMOVE_TAG_SUCCESS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Creates and returns a {@code Eatery} with the details of {@code eateryToEdit}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * edited with {@code editEateryDescriptor}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private static Eatery createEditedEatery(Eatery eateryToEdit, EditEateryDescriptor editEateryDescriptor) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Name name \u003d eateryToEdit.getName();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Address address \u003d eateryToEdit.getAddress();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Category category \u003d eateryToEdit.getCategory();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editEateryDescriptor.removeTags(eateryToEdit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return new Eatery(name, address, category, updatedTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (!(other instanceof RemoveTagCommand)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        RemoveTagCommand e \u003d (RemoveTagCommand) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                \u0026\u0026 editEateryDescriptor.equals(e.editEateryDescriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Contains the details of the new tags to be deleted."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static class EditEateryDescriptor {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        private Set\u003cTag\u003e tagsToRemove \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public EditEateryDescriptor() {}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public EditEateryDescriptor(EditEateryDescriptor toCopy) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            addTags(toCopy.tagsToRemove);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         * Adds {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public void addTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            this.tagsToRemove.addAll(tags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         * @return the tags corresponding to this object."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return tagsToRemove;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         * Removes the tags from an eatery\u0027s list of according to user input."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public Set\u003cTag\u003e removeTags(Eatery eatery) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            Set\u003cTag\u003e listAfterRemoving \u003d new HashSet\u003c\u003e(eatery.getTags());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            for (Tag t : this.tagsToRemove) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                listAfterRemoving.remove(t);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return listAfterRemoving;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            if (!(other instanceof EditEateryDescriptor)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            EditEateryDescriptor e \u003d (EditEateryDescriptor) other;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 145,
      "dvrylc": 17,
      "JunHongT": 1
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/ReopenCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jakq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.model.Model.PREDICATE_SHOW_ALL_EATERIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Sets the isOpen field of an existing eatery in the eatery list to true."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class ReopenCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reopen\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": "            + \": Reopens the eatery identified by the index number used in the displayed eatery list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Parameters: [index] (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jakq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_EATERY_ALREADY_OPENED \u003d \"This eatery is already open!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_REOPENED_EATERY_SUCCESS \u003d \"Eatery successfully reopened: %s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * @param targetIndex of the eatery in the filtered eatery list to close"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public ReopenCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jakq"
        },
        "content": "        List\u003cEatery\u003e lastShownList \u003d model.getFilteredEateryList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jakq"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery eateryToReopen \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (eateryToReopen.getIsOpen()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": "            throw new CommandException(MESSAGE_EATERY_ALREADY_OPENED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery reopenedEatery \u003d createReopenedEatery(eateryToReopen);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": "        model.setEatery(eateryToReopen, reopenedEatery);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jakq"
        },
        "content": "        model.updateFilteredEateryList(PREDICATE_SHOW_ALL_EATERIES);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REOPENED_EATERY_SUCCESS, reopenedEatery.getName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jakq"
        },
        "content": "                || (other instanceof ReopenCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jakq"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ReopenCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Creates and returns a {@code Eatery} with the details of {@code eateryToEdit}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * edited with {@code editEateryDescriptor}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private static Eatery createReopenedEatery(Eatery eateryToReopen) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assert eateryToReopen !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Name name \u003d eateryToReopen.getName();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Address address \u003d eateryToReopen.getAddress();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Category category \u003d eateryToReopen.getCategory();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Set\u003cTag\u003e tags \u003d eateryToReopen.getTags();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery reopenedEatery \u003d new Eatery(name, address, category, tags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jakq"
        },
        "content": "        reopenedEatery.setReviews(eateryToReopen.getReviews());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return reopenedEatery;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jakq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 16,
      "jakq": 72
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/ReviewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Adds review to an existing eatery in the eatery list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class ReviewCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"review\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a review to the eatery identified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            + \"by the index number used in the last eatery listing. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Parameters: [index] (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_DESCRIPTION + \" [description] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_COST + \" [cost per person] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_RATING + \" [rating]\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_DATE + \" [date] (in dd/MM/YYYY format)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + PREFIX_DESCRIPTION + \" Great noodles! \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            + PREFIX_COST + \" 6.20 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            + PREFIX_RATING + \" 4 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            + PREFIX_DATE + \" 14/02/2020\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_ADD_REVIEW_SUCCESS \u003d \"Review successfully added\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_WRONG_MODE \u003d \"Adding of reviews is unavailable in todo mode!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final Review review;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param index of the eatery to which review is added."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param review to be added to the eatery."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public ReviewCommand (Index index, Review review) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireAllNonNull(index, review);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.review \u003d review;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        List\u003cEatery\u003e lastShownList \u003d model.getFilteredEateryList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (model.isMainMode()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            Eatery eateryToAddReview \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            eateryToAddReview.addReview(review);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            model.updateFilteredEateryList(Model.PREDICATE_SHOW_ALL_EATERIES);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_MODE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new CommandResult(MESSAGE_ADD_REVIEW_SUCCESS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 51,
      "dvrylc": 22,
      "JunHongT": 4
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/SaveTodoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Deletes a eatery identified using it\u0027s displayed index from the eatery list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class SaveTodoCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"save\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \": Saves the eatery identified by the index number in the displayed todo list to the main list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Parameters: [index] (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_INVALID_MODE \u003d \"Save command is not available in Main mode!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_REMINDER_TO_USER \u003d \"Please add the category for this eatery \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        + \"to the command:\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public SaveTodoCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (model.isMainMode()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MODE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        List\u003cEatery\u003e lastShownList \u003d model.getFilteredTodoList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery eateryToSave \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String name \u003d eateryToSave.getName().fullName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String address \u003d eateryToSave.getAddress().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder tags \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        for (Tag tag : eateryToSave.getTags()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            tags.append(PREFIX_TAG + \" \" + tag.getName() + \" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String pendingCommand \u003d String.format(\"add %s %s %s %s %s %s\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            PREFIX_NAME, name, PREFIX_ADDRESS, address, tags.toString().trim(), PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        model.deleteEatery(eateryToSave);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        model.toggle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String res \u003d MESSAGE_REMINDER_TO_USER + pendingCommand;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return new CommandResult(res, false, false, true, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                || (other instanceof SaveTodoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SaveTodoCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 1,
      "dvrylc": 18,
      "JunHongT": 58
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/ShowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Shows a eatery identified using it\u0027s displayed index from the eatery list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \": Shows the eatery identified by the index number used in the displayed eatery list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Parameters: [index] (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_SHOW_EATERY_SUCCESS \u003d \"Eatery successfully shown: %s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public ShowCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        List\u003cEatery\u003e lastShownList \u003d model.isMainMode() ? model.getFilteredEateryList() : model.getFilteredTodoList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Eatery eateryToShow \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        List\u003cReview\u003e reviews \u003d eateryToShow.getReviews();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Collections.sort(reviews);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        model.updateActiveReviews(reviews);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        model.setActiveEatery(eateryToShow);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                String.format(MESSAGE_SHOW_EATERY_SUCCESS, eateryToShow.getName().fullName), eateryToShow);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                || (other instanceof ShowCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ShowCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 1,
      "dvrylc": 60
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/StatsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.statistics.Statistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.statistics.exceptions.CannotGenerateStatisticsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.statistics.exceptions.NoAvailableDataException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": " * Shows overall statistics gathered from the reviews of all the eateries in the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "            + \": Presents a visual overview of all your eateries and reviews.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final String MESSAGE_STATS_SUCCESS \u003d \"Currently generating your statistics.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final String MESSAGE_STATS_ERROR_WRONGMODE \u003d \"Can\u0027t execute statistics in Todo mode.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final String MESSAGE_STATS_ERROR_UNKNOWN \u003d \"Unable to generate statistics due to unknown error.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final String MESSAGE_STATS_ERROR_NODATA \u003d \"No available review data to create statistics currently.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public final boolean canExecute;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public StatsCommand(boolean isMainMode) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.canExecute \u003d isMainMode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (!canExecute) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new CommandException(MESSAGE_STATS_ERROR_WRONGMODE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            Statistics stats \u003d new Statistics(model.getEateryList().getEateryList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "            model.setStatistics(stats);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new CommandResult(MESSAGE_STATS_SUCCESS, false, false, false, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (NoAvailableDataException n) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new CommandException(MESSAGE_STATS_ERROR_NODATA);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (CannotGenerateStatisticsException c) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new CommandException(MESSAGE_STATS_ERROR_UNKNOWN);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 47,
      "dvrylc": 7
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_CATEGORY, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE_MAIN));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Eatery eatery \u003d new Eatery(name, address, category, tagList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return new AddCommand(eatery);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 4,
      "dvrylc": 13,
      "JunHongT": 1,
      "jakq": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/AddFeedCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.AddFeedCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.Feed;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Parses input arguments and creates a new AddFeedCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class AddFeedCommandParser implements Parser\u003cAddFeedCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddFeedCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * and returns an AddFeedCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public AddFeedCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFeedCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()).fullName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()).value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Feed feed \u003d new Feed(name, address);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new AddFeedCommand(feed);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 48
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/AddTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.AddTagCommand.EditEateryDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Parses user input and returns a new AddTag command object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class AddTagCommandParser implements Parser\u003cAddTagCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTagCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * and returns an AddTagCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public AddTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argumentMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        EditEateryDescriptor editEateryDescriptor \u003d new EditEateryDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        editEateryDescriptor.addTags(parseTagsForAdding(argumentMultimap.getAllValues(PREFIX_TAG)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return new AddTagCommand(index, editEateryDescriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private Set\u003cTag\u003e parseTagsForAdding(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return ParserUtil.parseTags(tagSet);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 48,
      "dvrylc": 8
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/AddTodoCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class AddTodoCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_CATEGORY, PREFIX_TAG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                || arePrefixesPresent(argMultimap, PREFIX_CATEGORY) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE_TODO));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery eatery \u003d new Eatery(name, address, tagList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return new AddCommand(eatery);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 12,
      "JunHongT": 43
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"\\\\n\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"\\\\a\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"\\\\c\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"\\\\t\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"\\\\d\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final Prefix PREFIX_COST \u003d new Prefix(\"\\\\p\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final Prefix PREFIX_RATING \u003d new Prefix(\"\\\\r\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"\\\\w\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static final Prefix PREFIX_USER \u003d new Prefix(\"\\\\u\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 4,
      "ROHITREDDYBALAM": 4,
      "dvrylc": 1,
      "jakq": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/CloseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jakq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.CloseCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jakq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jakq"
        },
        "content": " * Parses input arguments and creates a new CloseCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jakq"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class CloseCommandParser implements Parser\u003cCloseCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CloseCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * and returns a CloseCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public CloseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": "            requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jakq"
        },
        "content": "            return new CloseCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CloseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 5,
      "jakq": 25
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jakq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": "            requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 5,
      "jakq": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/DeleteFeedCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.DeleteFeedCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Parses input arguments and creates a new DeleteFeedCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class DeleteFeedCommandParser implements Parser\u003cDeleteFeedCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteFeedCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * and returns an DeleteFeedCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public DeleteFeedCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteFeedCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()).fullName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new DeleteFeedCommand(name);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 43
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/DeleteReviewCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.DeleteReviewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Parses delete review commands input by user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class DeleteReviewCommandParser implements Parser\u003cDeleteReviewCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteReviewCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * and returns a DeleteReviewCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public DeleteReviewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return new DeleteReviewCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteReviewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 25,
      "dvrylc": 5
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/EatMeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.AddFeedCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.CloseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.DeleteFeedCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.DeleteReviewCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.EditReviewCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.LoadCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ModeCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.RemoveTagCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ReopenCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ReviewCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.SaveTodoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class EatMeParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public Command parseCommand(String userInput, boolean isMainMode) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            if (isMainMode) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                return new AddTodoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jakq"
        },
        "content": "        case CloseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jakq"
        },
        "content": "            return new CloseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jakq"
        },
        "content": "        case ReopenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jakq"
        },
        "content": "            return new ReopenCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        case ModeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            return new ModeCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        case ReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return new ReviewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        case SaveTodoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            return new SaveTodoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        case AddFeedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return new AddFeedCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        case DeleteFeedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return new DeleteFeedCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "walnads"
        },
        "content": "        case StatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new StatsCommand(isMainMode);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        case ShowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return new ShowCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        case AddTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return new AddTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        case RemoveTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return new RemoveTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        case EditReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return new EditReviewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        case DeleteReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return new DeleteReviewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jakq"
        },
        "content": "        case LoadCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jakq"
        },
        "content": "            return new LoadCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 4,
      "ROHITREDDYBALAM": 15,
      "dvrylc": 37,
      "JunHongT": 14,
      "jakq": 9,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.EditCommand.EditEateryDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_CATEGORY, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jakq"
        },
        "content": "        EditEateryDescriptor editEateryDescriptor \u003d new EditEateryDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": "            editEateryDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jakq"
        },
        "content": "            editEateryDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "            editEateryDescriptor.setCategory(ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editEateryDescriptor::setTags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (!editEateryDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return new EditCommand(index, editEateryDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 5,
      "ROHITREDDYBALAM": 1,
      "dvrylc": 11,
      "jakq": 6,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/EditReviewCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.OptionalInt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.EditReviewCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.EditReviewCommand.EditReviewDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Parses edit review commands input by user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class EditReviewCommandParser implements Parser\u003cEditReviewCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Parses the given string of {@code args} in the context of"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * edit review command and returns a new editcommand object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public EditReviewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_COST, PREFIX_RATING, PREFIX_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argumentMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                    EditReviewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        EditReviewCommand.EditReviewDescriptor editReviewDescriptor \u003d new EditReviewDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            editReviewDescriptor.setDescription(ParserUtil"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                    .parseReviewDescription(argumentMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_COST).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            editReviewDescriptor.setCost(OptionalDouble.of(ParserUtil"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                    .parseReviewCost(argumentMultimap.getValue(PREFIX_COST).get())));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_RATING).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            editReviewDescriptor.setRating(OptionalInt.of(ParserUtil"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                    .parseReviewRating(argumentMultimap.getValue(PREFIX_RATING).get())));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                editReviewDescriptor.setDate(ParserUtil"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                        .parseReviewDate(argumentMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                throw new ParseException(String.format(EditReviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (!editReviewDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new ParseException(EditReviewCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return new EditReviewCommand(index, editReviewDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 65,
      "dvrylc": 10
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.EateryAttributesContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_CATEGORY, PREFIX_TAG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        List\u003cString\u003e nameKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        List\u003cString\u003e addressKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        List\u003cString\u003e categoryKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        List\u003cString\u003e tagKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            nameKeywords \u003d argMultimap.getAllValues(PREFIX_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            addressKeywords \u003d argMultimap.getAllValues(PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            categoryKeywords \u003d argMultimap.getAllValues(PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            tagKeywords \u003d argMultimap.getAllValues(PREFIX_TAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (nameKeywords.isEmpty() \u0026\u0026 addressKeywords.isEmpty()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 categoryKeywords.isEmpty() \u0026\u0026 tagKeywords.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new FindCommand(new EateryAttributesContainsKeywordsPredicate("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                nameKeywords, addressKeywords, categoryKeywords, tagKeywords));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 39,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/LoadCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_USER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.LoadCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jakq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": " * Parses input arguments and creates a new LoadCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jakq"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class LoadCommandParser implements Parser\u003cLoadCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoadCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * and returns a LoadCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jakq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public LoadCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": "            return new LoadCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_USER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (argMultimap.getValue(PREFIX_USER).isEmpty()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": "                || argMultimap.getValue(PREFIX_USER).get().isEmpty()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jakq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoadCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": "        args \u003d ParserUtil.parseFile(argMultimap.getValue(PREFIX_USER).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Path fileToLoad \u003d Paths.get(\"data\", args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return new LoadCommand(fileToLoad);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 5,
      "jakq": 34
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (!Tag.isValidTag(trimmedTag)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return Tag.create(trimmedTag);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Parses {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "walnads"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String trimmedCat \u003d category.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (!Category.isValidCategory(trimmedCat)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return Category.create(trimmedCat);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Trims leading and trailing white spaces."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param reviewDescription"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @throws ParseException if the given {@code reviewDescription} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static String parseReviewDescription(String reviewDescription) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(reviewDescription);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String trimmedDescription \u003d reviewDescription.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (!Review.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new ParseException(Review.REVIEW_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return trimmedDescription;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Parses {@code reviewCost} to double value."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @throws ParseException if the given {@code reviewCost} is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static double parseReviewCost(String reviewCost) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(reviewCost);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String trimmedCost \u003d reviewCost.trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (!Review.isValidCost(Double.valueOf(trimmedCost))) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new ParseException(Review.REVIEW_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return Double.valueOf(trimmedCost);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Parses {@code reviewRating} to integer value corresponding to rating."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @throws ParseException if the given {@code reviewRating} is invalid."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static int parseReviewRating(String reviewRating) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(reviewRating);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String trimmedRating \u003d reviewRating.trim();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (!Review.isValidRating(reviewRating)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new ParseException(Review.REVIEW_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return Integer.valueOf(trimmedRating);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Parses {@code reviewDate} to corresponding date."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static Date parseReviewDate(String reviewDate) throws java.text.ParseException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(reviewDate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String trimmedDate \u003d reviewDate.trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        DateFormat df \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return df.parse(trimmedDate);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Parses {@code file} into corresponding JSON filename."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static String parseFile(String file) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return file.endsWith(\".json\") ? file : file + \".json\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 17,
      "ROHITREDDYBALAM": 56,
      "dvrylc": 9,
      "jakq": 10,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/RemoveTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.RemoveTagCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Parses user input and returns a Removetag command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class RemoveTagCommandParser implements Parser\u003cRemoveTagCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTagCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * and returns an AddTagCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public RemoveTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argumentMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        RemoveTagCommand.EditEateryDescriptor editEateryDescriptor \u003d new RemoveTagCommand.EditEateryDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        editEateryDescriptor.addTags(parseTagsForRemoving(argumentMultimap.getAllValues(PREFIX_TAG)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return new RemoveTagCommand(index, editEateryDescriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private Set\u003cTag\u003e parseTagsForRemoving(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return ParserUtil.parseTags(tagSet);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "walnads": 1,
      "ROHITREDDYBALAM": 48,
      "dvrylc": 7
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/ReopenCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jakq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ReopenCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jakq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jakq"
        },
        "content": " * Parses input arguments and creates a new ReopenCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jakq"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class ReopenCommandParser implements Parser\u003cReopenCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReopenCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * and returns a ReopenCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public ReopenCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": "            requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jakq"
        },
        "content": "            return new ReopenCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReopenCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 5,
      "jakq": 25
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/ReviewCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ReviewCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Parses review type of commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class ReviewCommandParser implements Parser\u003cReviewCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Parses input and returns a review command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public ReviewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                PREFIX_COST, PREFIX_RATING, PREFIX_DATE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argumentMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            String reviewDescription \u003d ParserUtil"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                    .parseReviewDescription(argumentMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            double reviewCost \u003d ParserUtil.parseReviewCost(argumentMultimap.getValue(PREFIX_COST).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            int reviewRating \u003d ParserUtil.parseReviewRating(argumentMultimap.getValue(PREFIX_RATING).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            Date reviewDate \u003d ParserUtil.parseReviewDate(argumentMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            Review review \u003d new Review(reviewDescription, reviewCost, reviewRating, reviewDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return new ReviewCommand(index, review);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } catch (ParseException | java.text.ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReviewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 40,
      "dvrylc": 10
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/SaveTodoCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.SaveTodoCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " * Parses input arguments and creates a new SaveTodoCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class SaveTodoCommandParser implements Parser\u003cSaveTodoCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SaveTodoCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * and returns a SaveTodoCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public SaveTodoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            return new SaveTodoCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SaveTodoCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 5,
      "JunHongT": 26
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/ShowCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Parses input arguments and creates a new ShowCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class ShowCommandParser implements Parser\u003cShowCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ShowCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * and returns a ShowCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public ShowCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return new ShowCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 32
    }
  },
  {
    "path": "src/main/java/seedu/eatme/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/EateryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.UniqueEateryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jakq"
        },
        "content": " * Duplicates are not allowed (by .isSameEatery comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class EateryList implements ReadOnlyEateryList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private boolean isMainMode \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EateryList.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private final UniqueEateryList eateries;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private final UniqueEateryList todo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": "        eateries \u003d new UniqueEateryList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        todo \u003d new UniqueEateryList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public EateryList() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Creates an EateryList using the eateries in the {@code toBeCopied}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public EateryList(ReadOnlyEateryList toBeCopied) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Replaces the contents of the eatery list with {@code eateries}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * {@code eateries} must not contain duplicate eateries."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void setEateries(List\u003cEatery\u003e eateries, List\u003cEatery\u003e todos) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": "        this.eateries.setEateries(eateries);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.todo.setEateries(todos);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Resets the existing data of this {@code EateryList} with {@code newData}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void resetData(ReadOnlyEateryList newData) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        setEateries(newData.getEateryList(), newData.getTodoList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jakq"
        },
        "content": "    //// eatery-level operations"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns true if a eatery with the same identity as {@code eatery} exists in the eatery list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public boolean hasEatery(Eatery eatery) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireNonNull(eatery);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (isMainMode) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jakq"
        },
        "content": "            return eateries.contains(eatery);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            return todo.contains(eatery);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Adds a eatery to the eatery list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * The eatery must not already exist in the eatery list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void addEatery(Eatery e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (isMainMode) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jakq"
        },
        "content": "            eateries.add(e);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            todo.add(e);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Replaces the given eatery {@code target} in the list with {@code editedEatery}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * {@code target} must exist in the eatery list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * The eatery identity of {@code editedEatery} must not be the same as another existing eatery in the eatery list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void setEatery(Eatery target, Eatery editedEatery) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireNonNull(editedEatery);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (isMainMode) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jakq"
        },
        "content": "            eateries.setEatery(target, editedEatery);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            todo.setEatery(target, editedEatery);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Removes {@code key} from this {@code EateryList}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * {@code key} must exist in the eatery list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void removeEatery(Eatery key) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (isMainMode) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jakq"
        },
        "content": "            eateries.remove(key);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            todo.remove(key);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Toggle between Main mode and To-do mode."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void toggle() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        isMainMode \u003d !isMainMode;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public boolean isMainMode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return isMainMode;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return String.format(\"%d eateries: %s\", eateries.asUnmodifiableObservableList().size(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "walnads"
        },
        "content": "                eateries.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public ObservableList\u003cEatery\u003e getEateryList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return eateries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public ObservableList\u003cEatery\u003e getTodoList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return todo.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                || (other instanceof EateryList // instanceof handles nulls"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 eateries.equals(((EateryList) other).eateries));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return eateries.hashCode();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 3,
      "dvrylc": 20,
      "JunHongT": 40,
      "jakq": 21,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/FeedList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.Feed;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.UniqueFeedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Wraps all data at the feed list level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class FeedList implements ReadOnlyFeedList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final UniqueFeedList feeds;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        feeds \u003d new UniqueFeedList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public FeedList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Creates a FeedList using the Feeds in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public FeedList(ReadOnlyFeedList toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Replaces the contents of the feed list with {@code feeds}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * {@code feeds} must not contain duplicate feeds."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeeds(List\u003cFeed\u003e feeds) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.feeds.setFeeds(feeds);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Resets the existing data of this {@code FeedList} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void resetData(ReadOnlyFeedList newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        setFeeds(newData.getFeedList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    //// feed-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns true if a feed with the same identity as {@code feed} exists in the feed list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public boolean hasFeed(Feed feed) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(feed);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return feeds.contains(feed);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Adds a feed to the feed list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * The feed must not already exist in the feed list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void addFeed(Feed p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        feeds.add(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Replaces the given feed {@code target} in the list with {@code editedFeed}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * {@code target} must exist in the feed list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * The identity of {@code editedFeed} must not be the same as another existing feed in the feed list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeed(Feed target, Feed editedFeed) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(editedFeed);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        feeds.setFeed(target, editedFeed);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Removes {@code key} from this {@code FeedList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * {@code key} must exist in the feed list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void removeFeed(Feed key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        feeds.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return feeds.asUnmodifiableObservableList().size() + \" feeds\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public ObservableList\u003cFeed\u003e getFeedList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return feeds.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                || (other instanceof FeedList // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 feeds.equals(((FeedList) other).feeds));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return feeds.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 120
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.Feed;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.statistics.Statistics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": "    Predicate\u003cEatery\u003e PREDICATE_SHOW_ALL_EATERIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns the user prefs\u0027 eatery list file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    Path getEateryListFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Sets the user prefs\u0027 eatery list file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    void setEateryListFilePath(Path eateryListFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Replaces eatery list data with the data in {@code eateryList}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    void setEateryList(ReadOnlyEateryList eateryList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns the EateryList"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    ReadOnlyEateryList getEateryList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns true if a eatery with the same identity as {@code eatery} exists in the eatery list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jakq"
        },
        "content": "    boolean hasEatery(Eatery eatery);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Deletes the given eatery."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * The eatery must exist in the eatery list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": "    void deleteEatery(Eatery target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Adds the given eatery."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * {@code eatery} must not already exist in the eatery list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jakq"
        },
        "content": "    void addEatery(Eatery eatery);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Replaces the given eatery {@code target} with {@code editedEatery}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * {@code target} must exist in the eatery list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * The eatery identity of {@code editedEatery} must not be the same as another existing eatery in the eatery list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jakq"
        },
        "content": "    void setEatery(Eatery target, Eatery editedEatery);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Sets {@code eatery} as the active eatery."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    void setActiveEatery(Eatery eatery);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Returns the active eatery."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    Eatery getActiveEatery();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns an unmodifiable view of the filtered eatery list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jakq"
        },
        "content": "    ObservableList\u003cEatery\u003e getFilteredEateryList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns an unmodifiable view of the filtered list"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    ObservableList\u003cEatery\u003e getFilteredTodoList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Updates the filter of the filtered eatery list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jakq"
        },
        "content": "    void updateFilteredEateryList(Predicate\u003cEatery\u003e predicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns an unmodifiable view of the active reviews"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    ObservableList\u003cReview\u003e getActiveReviews();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Updates the list of active reviews based on the given {@code reviews}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    void updateActiveReviews(List\u003cReview\u003e reviews);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Switch between main mode and to-do mode."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    void toggle();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Return status of mode, Main or To-do."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    boolean isMainMode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns the user prefs\u0027 feed list file path."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    Path getFeedListFilePath();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Sets the user prefs\u0027 feed list file path."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    void setFeedListFilePath(Path feedListFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Replaces feed list data with the data in {@code feedList}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    void setFeedList(ReadOnlyFeedList feedList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns the FeedList"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    ReadOnlyFeedList getFeedList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns true if a feed with the same identity as {@code feed} exists in the eatery list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    boolean hasFeed(Feed feed);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Deletes the given feed."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * The feed must exist in the feed list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    void deleteFeed(Feed target);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Adds the given feed."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * {@code feed} must not already exist in the feed list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    void addFeed(Feed feed);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Replaces the given feed {@code target} with {@code editedFeed}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * {@code target} must exist in the feed list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * The feed identity of {@code editedFeed} must not be the same as another existing feed in the feed list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    void setFeed(Feed target, Feed editedFeed);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Sets the statistics of the eateries and reviews to {@code stats}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "walnads"
        },
        "content": "    void setStatistics(Statistics stats);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Gets the statistics of the eateries and reviews."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "walnads"
        },
        "content": "    Statistics getStatistics();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 10,
      "ROHITREDDYBALAM": 10,
      "dvrylc": 88,
      "JunHongT": 10,
      "jakq": 12,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.Feed;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.statistics.Statistics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Represents the in-memory model of the eatery list data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final EateryList eateryList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final FeedList feedList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private FilteredList\u003cEatery\u003e filteredTodo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private FilteredList\u003cEatery\u003e filteredEateries;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Statistics stats;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private ObservableList\u003cReview\u003e activeReviews;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private Eatery activeEatery;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Initializes a ModelManager with the given eateryList, feedList and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public ModelManager(ReadOnlyEateryList eateryList, ReadOnlyFeedList feedList, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireAllNonNull(eateryList, feedList, userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        logger.fine(\"Initializing with eatery list: \" + eateryList + \", feed list: \" + feedList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.eateryList \u003d new EateryList(eateryList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.feedList \u003d new FeedList(feedList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        filteredEateries \u003d new FilteredList\u003c\u003e(this.eateryList.getEateryList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        filteredTodo \u003d new FilteredList\u003c\u003e(this.eateryList.getTodoList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        activeReviews \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this(new EateryList(), new FeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Path getEateryListFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return userPrefs.getEateryListFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setEateryListFilePath(Path eateryListFilePath) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(eateryListFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        userPrefs.setEateryListFilePath(eateryListFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Path getFeedListFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return userPrefs.getFeedListFilePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeedListFilePath(Path feedListFilePath) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(feedListFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        userPrefs.setFeedListFilePath(feedListFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EateryList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setEateryList(ReadOnlyEateryList eateryList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.eateryList.resetData(eateryList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public ReadOnlyEateryList getEateryList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return eateryList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public boolean hasEatery(Eatery eatery) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireNonNull(eatery);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return eateryList.hasEatery(eatery);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void deleteEatery(Eatery target) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        eateryList.removeEatery(target);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void addEatery(Eatery eatery) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        eateryList.addEatery(eatery);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jakq"
        },
        "content": "        updateFilteredEateryList(PREDICATE_SHOW_ALL_EATERIES);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void setEatery(Eatery target, Eatery editedEatery) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireAllNonNull(target, editedEatery);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        eateryList.setEatery(target, editedEatery);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void setActiveEatery(Eatery eatery) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.activeEatery \u003d eatery;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public Eatery getActiveEatery() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return this.activeEatery;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jakq"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Eatery List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Eatery} backed by the internal list of"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * {@code versionedEateryList}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public ObservableList\u003cEatery\u003e getFilteredEateryList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return filteredEateries;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public ObservableList\u003cEatery\u003e getFilteredTodoList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return filteredTodo;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void updateFilteredEateryList(Predicate\u003cEatery\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (eateryList.isMainMode()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jakq"
        },
        "content": "            filteredEateries.setPredicate(predicate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            filteredTodo.setPredicate(predicate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Active Review Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns an unmodifiable view of the active reviews"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public ObservableList\u003cReview\u003e getActiveReviews() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return activeReviews;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Updates the list of active reviews based on the given {@code reviews}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void updateActiveReviews(List\u003cReview\u003e reviews) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        activeReviews.clear();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        activeReviews.addAll(reviews);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d General \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void toggle() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        eateryList.toggle();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public boolean isMainMode() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return eateryList.isMainMode();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FeedList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeedList(ReadOnlyFeedList feedList) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.feedList.resetData(feedList);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public ReadOnlyFeedList getFeedList() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return feedList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public boolean hasFeed(Feed feed) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(feed);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return feedList.hasFeed(feed);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void deleteFeed(Feed target) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        feedList.removeFeed(target);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void addFeed(Feed feed) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        feedList.addFeed(feed);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeed(Feed target, Feed editedFeed) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireAllNonNull(target, editedFeed);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        feedList.setFeed(target, editedFeed);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "walnads"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void setStatistics(Statistics stats) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.stats \u003d stats;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return stats;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Utilities \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return eateryList.equals(other.eateryList)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 feedList.equals(other.feedList)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jakq"
        },
        "content": "                \u0026\u0026 filteredEateries.equals(other.filteredEateries);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 11,
      "ROHITREDDYBALAM": 11,
      "dvrylc": 112,
      "JunHongT": 22,
      "jakq": 14,
      "-": 105
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/ReadOnlyEateryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Unmodifiable view of an eatery list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public interface ReadOnlyEateryList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns an unmodifiable view of the eatery list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * This list will not contain any duplicate eateries."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jakq"
        },
        "content": "    ObservableList\u003cEatery\u003e getEateryList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Returns an unmodifiable view of the todos list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * This list will not contain any duplicate todos."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    ObservableList\u003cEatery\u003e getTodoList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 5,
      "JunHongT": 5,
      "jakq": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/ReadOnlyFeedList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.Feed;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Unmodifiable view of the feed list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public interface ReadOnlyFeedList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns an unmodifiable view of the feed list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * This list will not contain any duplicate feeds."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    ObservableList\u003cFeed\u003e getFeedList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 17
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    Path getEateryListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    Path getFeedListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 4,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Path eateryListFilePath \u003d Paths.get(\"data\", System.getProperty(\"user.name\") + \".json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Path feedListFilePath \u003d Paths.get(\"data\", \"feedlist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        setEateryListFilePath(newUserPrefs.getEateryListFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        setFeedListFilePath(newUserPrefs.getFeedListFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Path getEateryListFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return eateryListFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setEateryListFilePath(Path eateryListFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(eateryListFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.eateryListFilePath \u003d eateryListFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Path getFeedListFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return feedListFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeedListFilePath(Path feedListFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(feedListFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.feedListFilePath \u003d feedListFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 eateryListFilePath.equals(o.eateryListFilePath)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 feedListFilePath.equals(o.feedListFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return Objects.hash(guiSettings, eateryListFilePath, feedListFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + eateryListFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        sb.append(\"\\nLocal feed file location : \" + feedListFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 23,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/eatery/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Represents a Eatery\u0027s address in the eatery list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 3,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/eatery/Category.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": " * Represents an Eatery\u0027s category in the EatMe application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Category implements Comparable\u003cCategory\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "            \"Categories should only contain alphabets and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"([A-Za-z]\\\\w+[ A-Za-z]*|^[A-Za-z]+)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private static int categoryId \u003d -1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private static HashMap\u003cString, Category\u003e categories \u003d new HashMap\u003cString, Category\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Constructs a {@code Category}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param name A valid category name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Category(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "        checkArgument(isValidCategory(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "        categoryId \u003d categoryId + 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.id \u003d categoryId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Returns a new Category object if Category with the same name doesn\u0027t exist,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * else it returns the existing Category object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static Category create(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Category category \u003d categories.get(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (category \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "            Category newCategory \u003d new Category(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "            categories.put(newCategory.getName(), newCategory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return newCategory;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return category;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Returns true if a given string is a valid category."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static boolean isValidCategory(String test) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "walnads"
        },
        "content": "                || (other instanceof Category)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "walnads"
        },
        "content": "                \u0026\u0026 name.equals(((Category) other).name);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public int compareTo(Category otherCategory) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return name.compareTo(otherCategory.getName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 91,
      "dvrylc": 2
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/eatery/Eatery.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Represents a Eatery in the eatery list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class Eatery {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private final boolean isOpen;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final List\u003cReview\u003e reviews \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Used when adding a eatery for the first time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Eatery(Name name, Address address, Category category, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "        requireAllNonNull(name, address, category, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": "        this.isOpen \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jakq"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Used when adding eatery to To-do list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Category not needed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public Eatery(Name name, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        requireAllNonNull(name, address, tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.isOpen \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.category \u003d new Category(\"Not Applicable\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Used for editing open or close"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public Eatery(Name name, boolean isOpen, Address address, Category category, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireAllNonNull(name, address, category);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jakq"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jakq"
        },
        "content": "        this.isOpen \u003d isOpen;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jakq"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public boolean getIsOpen() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return isOpen;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void addReview(Review review) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        reviews.add(review);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public List\u003cReview\u003e getReviews() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return reviews;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public int getNumberOfReviews() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return reviews.size();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public double getTotalExpense() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "walnads"
        },
        "content": "        double totalExpenditure \u003d 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (Review r : reviews) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "walnads"
        },
        "content": "            totalExpenditure \u003d totalExpenditure + r.getCost();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return totalExpenditure;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setReviews(List\u003cReview\u003e reviews) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.reviews.clear();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.reviews.addAll(reviews);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Returns true if both eateries of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * This defines a weaker notion of equality between two eateries."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public boolean isSameEatery(Eatery otherEatery) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (otherEatery \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return otherEatery !\u003d null"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                \u0026\u0026 otherEatery.getName().equals(getName())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                \u0026\u0026 otherEatery.getAddress().equals(getAddress());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Returns true if both eateries have the same identity and data fields."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * This defines a stronger notion of equality between two eateries."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (!(other instanceof Eatery)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery otherEatery \u003d (Eatery) other;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return otherEatery.getName().equals(getName())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jakq"
        },
        "content": "                \u0026\u0026 otherEatery.getIsOpen() \u003d\u003d (getIsOpen())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jakq"
        },
        "content": "                \u0026\u0026 otherEatery.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "walnads"
        },
        "content": "                \u0026\u0026 otherEatery.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jakq"
        },
        "content": "                \u0026\u0026 otherEatery.getTags().equals(getTags());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return Objects.hash(name, isOpen, address, reviews, tags);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "walnads"
        },
        "content": "                .append(\" Category: \")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "walnads"
        },
        "content": "                .append(getCategory())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 26,
      "ROHITREDDYBALAM": 13,
      "dvrylc": 9,
      "JunHongT": 14,
      "jakq": 34,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/eatery/EateryAttributesContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Tests that a {@code Eatery}\u0027s attributes ({@code Name}, {@code Address}, {@code Category}, {@code Tags})"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class EateryAttributesContainsKeywordsPredicate implements Predicate\u003cEatery\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final List\u003cString\u003e nameKeywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final List\u003cString\u003e addressKeywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final List\u003cString\u003e categoryKeywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final List\u003cString\u003e tagKeywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public EateryAttributesContainsKeywordsPredicate(List\u003cString\u003e nameKeywords, List\u003cString\u003e addressKeywords,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                                                     List\u003cString\u003e categoryKeywords, List\u003cString\u003e tagKeywords) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.nameKeywords \u003d nameKeywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.addressKeywords \u003d addressKeywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.categoryKeywords \u003d categoryKeywords;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.tagKeywords \u003d tagKeywords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public EateryAttributesContainsKeywordsPredicate(List\u003cString\u003e nameKeywords) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.nameKeywords \u003d nameKeywords;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.addressKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.categoryKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.tagKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public boolean test(Eatery eatery) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        boolean nameMatch \u003d !nameKeywords.isEmpty() \u0026\u0026 nameKeywords.stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(eatery.getName().fullName, keyword));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        boolean addressMatch \u003d !addressKeywords.isEmpty() \u0026\u0026 addressKeywords.stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsStringIgnoreCase(eatery.getAddress().value, keyword));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        boolean categoryMatch \u003d !categoryKeywords.isEmpty() \u0026\u0026 categoryKeywords.stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(eatery.getCategory().getName(), keyword));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        boolean tagMatch \u003d !tagKeywords.isEmpty() \u0026\u0026 tagKeywords.stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                        eatery.getTags().stream().map(Tag::getName).collect(Collectors.joining(\" \")), keyword));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return nameMatch || addressMatch || categoryMatch || tagMatch;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                || (other instanceof EateryAttributesContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 nameKeywords.equals(((EateryAttributesContainsKeywordsPredicate) other).nameKeywords)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 addressKeywords.equals(((EateryAttributesContainsKeywordsPredicate) other).addressKeywords)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 categoryKeywords.equals(((EateryAttributesContainsKeywordsPredicate) other).categoryKeywords)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 tagKeywords.equals(((EateryAttributesContainsKeywordsPredicate) other).tagKeywords));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 59
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/eatery/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Represents a Eatery\u0027s name in the eatery list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public int compareTo(Name o) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return fullName.compareTo(o.fullName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 5,
      "dvrylc": 3,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/eatery/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jakq"
        },
        "content": " * Tests that a {@code Eatery}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cEatery\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public boolean test(Eatery eatery) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(eatery.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 2,
      "jakq": 4,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/eatery/Review.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Represents an Eatery\u0027s review in the EatMe application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class Review implements Comparable\u003cReview\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String REVIEW_CONSTRAINTS \u003d \"Review description should not be empty,\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            + \" Cost cannot be negative and cannot exceed 10000 and\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            + \" Rating should be an integer between 0 and 5.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String DESCRIPTION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Validate rating by converting t0 String and checking"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * if it has only one digit between 0 and 5."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String RATING_VALIDATION_INDEX \u003d \"[0-5]\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final double cost;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final int rating;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Constructs a {@code Review}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param cost        Cost of the meal being reviewed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param rating      Rating out of 5 for the meal being reviewed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public Review(String description, double cost, int rating, Date date) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        requireAllNonNull(description, cost, rating, date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        checkArgument(isValidReview(description, cost, rating), REVIEW_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Returns true if the given review is a valid review."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static boolean isValidReview(String description, double cost, int rating) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return isValidDescription(description) \u0026\u0026 isValidCost(cost)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                \u0026\u0026 isValidRating(String.valueOf(rating));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Returns true if the given review description is valid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return test.matches(DESCRIPTION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Returns true if the given cost is valid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static boolean isValidCost(double test) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return (test \u003e\u003d 0 \u0026\u0026 test \u003c 10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Returns true if the given rating is valid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static boolean isValidRating(String test) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return test.matches(RATING_VALIDATION_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public double getCost() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return this.cost;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public int getRating() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return this.rating;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        builder.append(getDescription())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                .append(getCost())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                .append(\" Rating: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                .append(getRating())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                .append(getDate().toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (!(other instanceof Review)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Review otherReview \u003d (Review) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return otherReview.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                \u0026\u0026 otherReview.getCost() \u003d\u003d getCost()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                \u0026\u0026 otherReview.getRating() \u003d\u003d getRating()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                \u0026\u0026 otherReview.getDate().equals(getDate());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return Objects.hash(description, cost, rating, date);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public int compareTo(Review other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return other.date.compareTo(this.date);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 127,
      "dvrylc": 8
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/eatery/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": " * Represents an Eatery\u0027s tag in the EatMe application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "            \"Tags should only contain alphabets and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * The first character of the tag must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(^[A-Za-z]+[A-Za-z_-]+[A-Za-z]$|^[A-Za-z]+)\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private static int tagId \u003d -1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private static HashMap\u003cString, Tag\u003e tags \u003d new HashMap\u003cString, Tag\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param name A valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Tag(String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        checkArgument(isValidTag(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "        tagId \u003d tagId + 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.id \u003d tagId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Returns a new Tag object if Tag with the same name doesn\u0027t exist,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * else it returns the existing Tag object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static Tag create(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Tag t \u003d tags.get(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (t \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "            Tag newTag \u003d new Tag(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "            tags.put(newTag.getName(), newTag);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return newTag;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return t;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Returns true if the a given string is a valid tag."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static boolean isValidTag(String test) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return String.format(\"[%s]\", name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "walnads"
        },
        "content": "                || (other instanceof Tag)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "walnads"
        },
        "content": "                \u0026\u0026 name.equals(((Tag) other).name);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 86,
      "dvrylc": 2
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/eatery/UniqueEateryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jakq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jakq"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jakq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.exceptions.DuplicateEateryException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.exceptions.EateryNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jakq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jakq"
        },
        "content": " * A list of eateries that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jakq"
        },
        "content": " * A eatery is considered unique by comparing using {@code Eatery#isSameEatery(Eatery)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": " * eateries uses Eatery#isSameEatery(Eatery) for equality so as to ensure that the eatery being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": " * unique in terms of identity in the UniqueEateryList. However, the removal of a eatery uses Eatery#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": " * as to ensure that the eatery with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jakq"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": " * @see Eatery#isSameEatery(Eatery)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jakq"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class UniqueEateryList implements Iterable\u003cEatery\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private final ObservableList\u003cEatery\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private final ObservableList\u003cEatery\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jakq"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Returns true if the list contains an equivalent eatery as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public boolean contains(Eatery toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEatery);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Adds a eatery to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * The eatery must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void add(Eatery toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": "            throw new DuplicateEateryException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jakq"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Replaces the eatery {@code target} in the list with {@code editedEatery}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * The eatery identity of {@code editedEatery} must not be the same as another existing eatery in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void setEatery(Eatery target, Eatery editedEatery) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireAllNonNull(target, editedEatery);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jakq"
        },
        "content": "            throw new EateryNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (!target.isSameEatery(editedEatery) \u0026\u0026 contains(editedEatery)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jakq"
        },
        "content": "            throw new DuplicateEateryException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jakq"
        },
        "content": "        internalList.set(index, editedEatery);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Removes the equivalent eatery from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * The eatery must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void remove(Eatery toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jakq"
        },
        "content": "            throw new EateryNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void setEateries(UniqueEateryList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jakq"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Replaces the contents of this list with {@code eateries}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * {@code eateries} must not contain duplicate eateries."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void setEateries(List\u003cEatery\u003e eateries) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jakq"
        },
        "content": "        requireAllNonNull(eateries);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (!eateriesAreUnique(eateries)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jakq"
        },
        "content": "            throw new DuplicateEateryException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jakq"
        },
        "content": "        internalList.setAll(eateries);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public ObservableList\u003cEatery\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public Iterator\u003cEatery\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jakq"
        },
        "content": "                || (other instanceof UniqueEateryList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jakq"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueEateryList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Returns true if {@code eateries} contains only unique eateries."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private boolean eateriesAreUnique(List\u003cEatery\u003e eateries) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jakq"
        },
        "content": "        for (int i \u003d 0; i \u003c eateries.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jakq"
        },
        "content": "            for (int j \u003d i + 1; j \u003c eateries.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jakq"
        },
        "content": "                if (eateries.get(i).isSameEatery(eateries.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jakq"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jakq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jakq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jakq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 4,
      "jakq": 133
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/eatery/exceptions/DuplicateEateryException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jakq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jakq"
        },
        "content": " * Signals that the operation will result in duplicate Eaterys (Eaterys are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jakq"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jakq"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class DuplicateEateryException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public DuplicateEateryException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jakq"
        },
        "content": "        super(\"Operation would result in duplicate eateries\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jakq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "jakq": 10
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/eatery/exceptions/EateryNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jakq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jakq"
        },
        "content": " * Signals that the operation is unable to find the specified eatery."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jakq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class EateryNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "jakq": 5
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/eatery/exceptions/ReviewNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Signals that the operation is unable to find the specified review."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class ReviewNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 5,
      "dvrylc": 1
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/feed/Feed.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.feed;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.jsoup.Jsoup;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Represents a feed in the feed list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Guarantees: details are present and not null, `name` and `address` field values are validated, immutable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class Feed {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final Set\u003cFeedPost\u003e posts \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Feed(String name, String address) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireAllNonNull(name, address);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Fetches the most recent 5 posts from this feed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @return List of maximum 5 posts."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Set\u003cFeedPost\u003e fetchPosts() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String feedData \u003d this.fetchFeedData();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (feedData \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return this.posts;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            Set\u003cFeedPost\u003e feedPosts \u003d this.parseFeedData(feedData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return feedPosts;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Fetches the feed\u0027s data as a String. This method first attempts to fetch data from the feed\u0027s remote"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * address. If unsuccessful, it returns the cached feed data."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @return String representing the feed data."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private String fetchFeedData() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        StringBuilder feedData \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        int matchCount \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            // Fetch remote"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            URL url \u003d new URL(address);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            HttpURLConnection conn \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            BufferedReader in \u003d new BufferedReader(new InputStreamReader(conn.getInputStream()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            String titleBuffer \u003d in.readLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            String linkBuffer;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            // Filter data"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            while ("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    titleBuffer !\u003d null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                            \u0026\u0026 (linkBuffer \u003d in.readLine()) !\u003d null"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                            \u0026\u0026 matchCount \u003c 5"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            ) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                titleBuffer \u003d titleBuffer.strip();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                linkBuffer \u003d linkBuffer.strip();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                if (titleBuffer.contains(\"\u003ctitle\u003e\") \u0026\u0026 linkBuffer.contains(\"\u003clink\u003e\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    feedData.append(String.format(\"%s%n\", titleBuffer));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    feedData.append(String.format(\"%s%n\", linkBuffer));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    matchCount \u003d matchCount + 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                titleBuffer \u003d linkBuffer;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            // Cleanup"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            conn.disconnect();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            LogsCenter.getLogger(Feed.class).info("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    String.format(\"[Feed: %s] Successfully fetched remote feed data\", name));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            LogsCenter.getLogger(Feed.class).warning("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    String.format(\"[Feed: %s] Failed to fetch remote feed data, using local cache\", name));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return feedData.length() \u003d\u003d 0 ? null : feedData.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Parses the raw feed data into a set of feed posts."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @param feedData String representing the raw feed data."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @return Set of feed posts."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Set\u003cFeedPost\u003e parseFeedData(String feedData) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Set\u003cFeedPost\u003e feedPosts \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            Scanner sc \u003d new Scanner(feedData);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            String titleBuffer;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            String linkBuffer;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            String title;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            String link;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            while (sc.hasNextLine()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    \u0026\u0026 (titleBuffer \u003d sc.nextLine()) !\u003d null"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    \u0026\u0026 (linkBuffer \u003d sc.nextLine()) !\u003d null"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            ) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                title \u003d Jsoup.parse(titleBuffer).text()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                        .replace(\"\u003ctitle\u003e\", \"\").replace(\"\u003c/title\u003e\", \"\").strip();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                link \u003d Jsoup.parse(linkBuffer).text()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                        .replace(\"\u003clink\u003e\", \"\").replace(\"\u003c/link\u003e\", \"\").strip();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                FeedPost feedPost \u003d new FeedPost(name, title, link);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                feedPosts.add(feedPost);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            this.setPosts(feedPosts);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            LogsCenter.getLogger(Feed.class).info("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    String.format(\"[Feed: %s] Successfully parsed feed posts and updated local cache\", name));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            LogsCenter.getLogger(Feed.class).warning("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    String.format(\"[Feed: %s] Failed to parse feed posts\", name));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return feedPosts;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setPosts(Set\u003cFeedPost\u003e posts) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.posts.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.posts.addAll(posts);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Set\u003cFeedPost\u003e getPosts() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return posts;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns true if both feeds have the same name and address."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (!(other instanceof Feed)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Feed otherFeed \u003d (Feed) other;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return otherFeed.getName().equals(getName())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 otherFeed.getAddress().equals(getAddress());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return Objects.hash(name, address);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return String.format(\"%s: %s\", getName(), getAddress());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 192
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/feed/FeedPost.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.feed;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Represents a post in the feed list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class FeedPost {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final String source;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public FeedPost(String source, String title, String address) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireAllNonNull(source, title, address);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.source \u003d source;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public String getSource() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return source;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns true if both posts have the same source, title and address."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (!(other instanceof FeedPost)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        FeedPost otherFeedPost \u003d (FeedPost) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return otherFeedPost.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 otherFeedPost.getSource().equals(getSource())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 otherFeedPost.getAddress().equals(getAddress());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return Objects.hash(source, title, address);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return String.format(\"[%s] %s: %s\", getSource(), getTitle(), getAddress());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 68
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/feed/UniqueFeedList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.feed;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.exceptions.DuplicateFeedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.exceptions.FeedNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * A list of feeds that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * A feed is considered unique by comparing using {@code Feed#equals(Feed)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * @see Feed#equals(Object)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class UniqueFeedList implements Iterable\u003cFeed\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final ObservableList\u003cFeed\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final ObservableList\u003cFeed\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns true if the list contains an equivalent feed as the given argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public boolean contains(Feed toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Adds a feed to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * The feed must not already exist in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void add(Feed toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new DuplicateFeedException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Replaces the feed {@code target} in the list with {@code editedFeed}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * The feed identity of {@code editedFeed} must not be the same as another existing feed in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeed(Feed target, Feed editedFeed) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireAllNonNull(target, editedFeed);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new FeedNotFoundException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (!target.equals(editedFeed) \u0026\u0026 contains(editedFeed)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new DuplicateFeedException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        internalList.set(index, editedFeed);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Removes the equivalent feed from the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * The feed must exist in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void remove(Feed toRemove) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new FeedNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeeds(UniqueFeedList replacement) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Replaces the contents of this list with {@code feeds}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * {@code feeds} must not contain duplicate feeds."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeeds(List\u003cFeed\u003e feeds) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireAllNonNull(feeds);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (!feedsAreUnique(feeds)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new DuplicateFeedException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        internalList.setAll(feeds);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public ObservableList\u003cFeed\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Iterator\u003cFeed\u003e iterator() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                || (other instanceof UniqueFeedList // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueFeedList) other).internalList));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns true if {@code feeds} contains only unique feeds."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private boolean feedsAreUnique(List\u003cFeed\u003e feeds) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        for (int i \u003d 0; i \u003c feeds.size() - 1; i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            for (int j \u003d i + 1; j \u003c feeds.size(); j++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                if (feeds.get(i).equals(feeds.get(j))) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 132
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/feed/exceptions/DuplicateFeedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.feed.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Signals that the operation will result in duplicate Feeds."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class DuplicateFeedException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public DuplicateFeedException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        super(\"Operation would result in duplicate feeds\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 10
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/feed/exceptions/FeedNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.feed.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Signals that the operation is unable to find the specified feed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class FeedNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 6
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/statistics/Statistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.statistics.exceptions.CannotGenerateStatisticsException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.statistics.exceptions.NoAvailableDataException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": " * This class represents a type of statistic that can be generated from the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final String MAX_VARIABLE \u003d \"max\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final String MIN_VARIABLE \u003d \"min\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public final TreeMap\u003cCategory, Double\u003e graphCategoryAvgExpense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public final TreeMap\u003cCategory, Double\u003e graphCategoryTotalExpense;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public final TreeMap\u003cCategory, Integer\u003e chartCategoryTotalVisited;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public final List\u003cEatery\u003e mostExpEatery;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public final List\u003cEatery\u003e leastExpEatery;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public final List\u003cEatery\u003e mostVisitedEatery;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public final List\u003cEatery\u003e leastVisitedEatery;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private List\u003cEatery\u003e eateries;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private TreeMap\u003cCategory, List\u003cEatery\u003e\u003e groupByCategory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private List\u003cEatery\u003e sortByExpense;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private List\u003cEatery\u003e sortByVisit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Statistics(List\u003cEatery\u003e allEateries) throws NoAvailableDataException, CannotGenerateStatisticsException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.eateries \u003d getEateriesWithReviews(allEateries);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (eateries.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new NoAvailableDataException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "        // needed for stats"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.groupByCategory \u003d groupEaterybyCategory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.sortByExpense \u003d sortEateriesByExpense();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.sortByVisit \u003d sortEateriesByVisit();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "        // generate stats"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "            this.graphCategoryAvgExpense \u003d generateCategoryCostAvg();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "            this.graphCategoryTotalExpense \u003d generateCategoryCostTotal();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "            this.chartCategoryTotalVisited \u003d generateCategoryVisit();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "            this.mostExpEatery \u003d getMostExpEateries();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "            this.leastExpEatery \u003d getLeastExpEateries();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "            this.mostVisitedEatery \u003d getMostVisited();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "            this.leastVisitedEatery \u003d getLeastVisited();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new CannotGenerateStatisticsException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static List\u003cEatery\u003e getEateriesWithReviews(List\u003cEatery\u003e eateries) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "walnads"
        },
        "content": "        List\u003cEatery\u003e filteredEateries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (Eatery e : eateries) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "walnads"
        },
        "content": "            if (e.getNumberOfReviews() \u003e 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "walnads"
        },
        "content": "                filteredEateries.add(e);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return filteredEateries;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static HashMap\u003cString, Double\u003e getMaxMinValue(TreeMap\u003c? extends Object, Double\u003e stats) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "walnads"
        },
        "content": "        HashMap\u003cString, Double\u003e maxMinMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "walnads"
        },
        "content": "        double min \u003d 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "walnads"
        },
        "content": "        double max \u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (Map.Entry\u003c? extends Object, Double\u003e entry : stats.entrySet()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "walnads"
        },
        "content": "            if (entry.getValue() \u003e max) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "walnads"
        },
        "content": "                max \u003d entry.getValue();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "walnads"
        },
        "content": "            if (entry.getValue() \u003c min) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "walnads"
        },
        "content": "                min \u003d entry.getValue();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "walnads"
        },
        "content": "        maxMinMap.put(MAX_VARIABLE, max);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "walnads"
        },
        "content": "        maxMinMap.put(MIN_VARIABLE, min);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return maxMinMap;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Groups the eateries by categories; to be used when generating statistics to do with categories."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private TreeMap\u003cCategory, List\u003cEatery\u003e\u003e groupEaterybyCategory() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "walnads"
        },
        "content": "        TreeMap\u003cCategory, List\u003cEatery\u003e\u003e groupedByCategory \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (Eatery e : eateries) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "walnads"
        },
        "content": "            if (groupedByCategory.containsKey(e.getCategory())) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "walnads"
        },
        "content": "                groupedByCategory.get(e.getCategory()).add(e);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "walnads"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "walnads"
        },
        "content": "                groupedByCategory.put(e.getCategory(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "walnads"
        },
        "content": "                groupedByCategory.get(e.getCategory()).add(e);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return groupedByCategory;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Generates a list that sorts the eateries by the number of reviews (i.e. visits)."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return a list of {@link Eatery} sorted by the number of visits."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private List\u003cEatery\u003e sortEateriesByVisit() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "walnads"
        },
        "content": "        PriorityQueue\u003cEatery\u003e sortedVisits \u003d new PriorityQueue\u003c\u003e(eateries.size(), new Comparator\u003cEatery\u003e() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "walnads"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "walnads"
        },
        "content": "            public int compare(Eatery e1, Eatery e2) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "walnads"
        },
        "content": "                return e1.getNumberOfReviews() \u003d\u003d e2.getNumberOfReviews() ? e1.getName().compareTo(e2.getName())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "walnads"
        },
        "content": "                        : e1.getNumberOfReviews() - e2.getNumberOfReviews();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "walnads"
        },
        "content": "        });"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "walnads"
        },
        "content": "        sortedVisits.addAll(eateries);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "walnads"
        },
        "content": "        List\u003cEatery\u003e sortedVisitsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (int i \u003d 0; i \u003c eateries.size(); i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "walnads"
        },
        "content": "            sortedVisitsList.add((Eatery) sortedVisits.poll());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return sortedVisitsList;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Generates a list that sorts the eateries by the total expense (i.e. total cost for every review in"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * the eatery)."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return a list of {@link Eatery} sorted by the total expense."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private List\u003cEatery\u003e sortEateriesByExpense() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "walnads"
        },
        "content": "        PriorityQueue\u003cEatery\u003e sortedExpense \u003d new PriorityQueue\u003c\u003e(eateries.size(), new Comparator\u003cEatery\u003e() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "walnads"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "walnads"
        },
        "content": "            public int compare(Eatery e1, Eatery e2) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "walnads"
        },
        "content": "                double e1Expense \u003d e1.getTotalExpense() / e1.getNumberOfReviews();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "walnads"
        },
        "content": "                double e2Expense \u003d e2.getTotalExpense() / e2.getNumberOfReviews();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "walnads"
        },
        "content": "                return e1Expense \u003d\u003d e2Expense ? e1.getName().compareTo(e2.getName())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "walnads"
        },
        "content": "                        : (int) (e1Expense - e2Expense);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "walnads"
        },
        "content": "        });"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "walnads"
        },
        "content": "        sortedExpense.addAll(eateries);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "walnads"
        },
        "content": "        List\u003cEatery\u003e sortedExpenseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (int i \u003d 0; i \u003c eateries.size(); i++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "walnads"
        },
        "content": "            sortedExpenseList.add((Eatery) sortedExpense.poll());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return sortedExpenseList;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Calculates the total amount spent for all categories; used to create the charts."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private TreeMap\u003cCategory, Double\u003e generateCategoryCostTotal() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Map\u003cCategory, List\u003cEatery\u003e\u003e duplicateMap \u003d new TreeMap\u003c\u003e(groupEaterybyCategory());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "walnads"
        },
        "content": "        TreeMap\u003cCategory, Double\u003e statsMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (Map.Entry\u003cCategory, List\u003cEatery\u003e\u003e entry : duplicateMap.entrySet()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "walnads"
        },
        "content": "            double total \u003d 0;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "walnads"
        },
        "content": "            for (Eatery e : entry.getValue()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "walnads"
        },
        "content": "                total \u003d total + e.getTotalExpense();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "walnads"
        },
        "content": "            statsMap.put(entry.getKey(), total);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return statsMap;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Calculates the average amount spent for all categories; used to create the charts."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private TreeMap\u003cCategory, Double\u003e generateCategoryCostAvg() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Map\u003cCategory, List\u003cEatery\u003e\u003e duplicateMap \u003d new TreeMap\u003c\u003e(groupEaterybyCategory());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "walnads"
        },
        "content": "        TreeMap\u003cCategory, Double\u003e statsMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (Map.Entry\u003cCategory, List\u003cEatery\u003e\u003e entry : duplicateMap.entrySet()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "walnads"
        },
        "content": "            double total \u003d 0;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "walnads"
        },
        "content": "            int numberOfReviews \u003d 0;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "walnads"
        },
        "content": "            for (Eatery e : entry.getValue()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "walnads"
        },
        "content": "                numberOfReviews \u003d e.getNumberOfReviews();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "walnads"
        },
        "content": "                total \u003d total + e.getTotalExpense();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "walnads"
        },
        "content": "            statsMap.put(entry.getKey(), total / numberOfReviews);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return statsMap;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Calculates the total number of visits to eateries in the different categories; used to create the charts."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private TreeMap\u003cCategory, Integer\u003e generateCategoryVisit() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Map\u003cCategory, List\u003cEatery\u003e\u003e duplicateMap \u003d new TreeMap\u003c\u003e(groupEaterybyCategory());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "walnads"
        },
        "content": "        TreeMap\u003cCategory, Integer\u003e statsMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (Map.Entry\u003cCategory, List\u003cEatery\u003e\u003e entry : duplicateMap.entrySet()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "walnads"
        },
        "content": "            int numberOfVisits \u003d 0;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "walnads"
        },
        "content": "            for (Eatery e : entry.getValue()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "walnads"
        },
        "content": "                numberOfVisits \u003d numberOfVisits + e.getNumberOfReviews();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "walnads"
        },
        "content": "            statsMap.put(entry.getKey(), numberOfVisits);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return statsMap;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private List\u003cEatery\u003e getMostExpEateries() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "walnads"
        },
        "content": "        List\u003cEatery\u003e mostExp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "walnads"
        },
        "content": "        List\u003cEatery\u003e sortByExpenseCopy \u003d new ArrayList\u003c\u003e(sortByExpense);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "walnads"
        },
        "content": "        int size \u003d sortByExpense.size() \u003e 3 ? 3 : sortByExpense.size();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Collections.reverse(sortByExpenseCopy);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "walnads"
        },
        "content": "            mostExp.add(sortByExpenseCopy.get(i));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return mostExp;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private List\u003cEatery\u003e getLeastExpEateries() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "walnads"
        },
        "content": "        List\u003cEatery\u003e leastExp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "walnads"
        },
        "content": "        int size \u003d sortByExpense.size() \u003e 3 ? 3 : sortByExpense.size();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "walnads"
        },
        "content": "            leastExp.add(sortByExpense.get(i));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return leastExp;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private List\u003cEatery\u003e getMostVisited() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "walnads"
        },
        "content": "        List\u003cEatery\u003e mostVisited \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "walnads"
        },
        "content": "        List\u003cEatery\u003e sortByVisitCopy \u003d new ArrayList\u003c\u003e(sortByVisit);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "walnads"
        },
        "content": "        int size \u003d sortByVisit.size() \u003e 3 ? 3 : sortByVisit.size();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Collections.reverse(sortByVisitCopy);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "walnads"
        },
        "content": "            mostVisited.add(sortByVisitCopy.get(i));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return mostVisited;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private List\u003cEatery\u003e getLeastVisited() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "walnads"
        },
        "content": "        List\u003cEatery\u003e leastVisited \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "walnads"
        },
        "content": "        int size \u003d sortByVisit.size() \u003e 3 ? 3 : sortByVisit.size();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "walnads"
        },
        "content": "            leastVisited.add(sortByVisit.get(i));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return leastVisited;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "walnads"
        },
        "content": "                || (other instanceof Statistics // instanceof handles nulls"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "walnads"
        },
        "content": "                \u0026\u0026 eateries.equals(((Statistics) other).eateries));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 268,
      "dvrylc": 5
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/statistics/exceptions/CannotGenerateStatisticsException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.statistics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": " * Represents a statistics error that happens when there is an unknown error preventing the app from generating"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " * statistics."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class CannotGenerateStatisticsException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public CannotGenerateStatisticsException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(\"Unable to generate statistics due to unknown error.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 10,
      "dvrylc": 1
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/statistics/exceptions/NoAvailableDataException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.statistics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": " * Represents a statistics error that happens when there is no data to generate any form of statistics."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class NoAvailableDataException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public NoAvailableDataException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(\"Unable to generate statistics due to unknown error.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 9,
      "dvrylc": 1
    }
  },
  {
    "path": "src/main/java/seedu/eatme/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.EateryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.FeedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyEateryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyFeedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.Feed;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Contains utility methods for populating {@code EateryList} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static Eatery[] getSampleEateries() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return new Eatery[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            new Eatery(new Name(\"Ali Nachia Briyani Dam\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                new Address(\"5 Tanjong Pagar Plaza, #02-04, Singapore 081005\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                new Category(\"Malay\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                getTagSet(\"nice\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            new Eatery(new Name(\"Fei Fei Wanton Mee\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                new Address(\"62 Joo Chiat Place, Singapore 427785\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "                new Category(\"Chinese\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                getTagSet(\"delicious\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            new Eatery(new Name(\"Swee Choon Tim Sum\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                new Address(\"191 Jalan Besar, Singapore 208882\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "                new Category(\"Chinese\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                getTagSet(\"supper\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            new Eatery(new Name(\"Janggut Laksa\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jakq"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                new Address(\"1 Queensway, Queensway Shopping Centre, #01-59, Singapore 149053\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                new Category(\"Peranakan\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                getTagSet(\"delicious\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            new Eatery(new Name(\"Seng Hiang Food Stall\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jakq"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                new Address(\"Blk 85 Bedok North Street 4, Fengshan Market \u0026 FoodCentre, Singapore 460085\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "                new Category(\"Chinese\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                getTagSet(\"hawker\", \"cheap\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            new Eatery(new Name(\"Selegie Soya Bean\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jakq"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                new Address(\"990 Upper Serangoon Road, Singapore 534734\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                new Category(\"Chinese\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                getTagSet(\"dessert\"))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static ReadOnlyEateryList getSampleEateryList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryList sampleEl \u003d new EateryList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": "        for (Eatery sampleEatery : getSampleEateries()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            sampleEl.addEatery(sampleEatery);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return sampleEl;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static ReadOnlyFeedList getSampleFeedList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        FeedList sampleFl \u003d new FeedList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        sampleFl.addFeed(new Feed(\"Seth Lui\", \"https://sethlui.com/feed\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        sampleFl.addFeed(new Feed(\"Eatbook\", \"https://eatbook.sg/feed\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return sampleFl;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 4,
      "dvrylc": 23,
      "JunHongT": 22,
      "jakq": 8,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/eatme/storage/EateryListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.EateryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyEateryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Represents a storage for {@link EateryList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public interface EateryListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    Path getEateryListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns EateryList data as a {@link ReadOnlyEateryList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    Optional\u003cReadOnlyEateryList\u003e readEateryList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @see #getEateryListFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    Optional\u003cReadOnlyEateryList\u003e readEateryList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Saves the given {@link ReadOnlyEateryList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @param eateryList cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    void saveEateryList(ReadOnlyEateryList eateryList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @see #saveEateryList(ReadOnlyEateryList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    void saveEateryList(ReadOnlyEateryList eateryList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 46
    }
  },
  {
    "path": "src/main/java/seedu/eatme/storage/FeedListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyFeedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Represents a storage for {@link seedu.eatme.model.FeedList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public interface FeedListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    Path getFeedListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns FeedList data as a {@link ReadOnlyFeedList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    Optional\u003cReadOnlyFeedList\u003e readFeedList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @see #getFeedListFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    Optional\u003cReadOnlyFeedList\u003e readFeedList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Saves the given {@link ReadOnlyFeedList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @param feedList cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    void saveFeedList(ReadOnlyFeedList feedList) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @see #saveFeedList(ReadOnlyFeedList)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    void saveFeedList(ReadOnlyFeedList feedList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 47
    }
  },
  {
    "path": "src/main/java/seedu/eatme/storage/JsonAdaptedEatery.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": " * Jackson-friendly version of {@link Eatery}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": "class JsonAdaptedEatery {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Eatery\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private final String isOpen;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final List\u003cJsonAdaptedReview\u003e reviews \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Constructs a {@code JsonAdaptedEatery} with the given eatery details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public JsonAdaptedEatery(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": "                             @JsonProperty(\"isOpen\") String isOpen,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                             @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "                             @JsonProperty(\"category\") String category,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                             @JsonProperty(\"reviews\") List\u003cJsonAdaptedReview\u003e reviews,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jakq"
        },
        "content": "        this.isOpen \u003d isOpen;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (reviews !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            this.reviews.addAll(reviews);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Converts a given {@code Eatery} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public JsonAdaptedEatery(Eatery source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jakq"
        },
        "content": "        isOpen \u003d String.valueOf(source.getIsOpen());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": "        category \u003d source.getCategory().getName();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        reviews.addAll(source.getReviews().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                .map(JsonAdaptedReview::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Converts this Jackson-friendly adapted eatery object into the model\u0027s {@code Eatery} object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted eatery."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public Eatery toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        final List\u003cReview\u003e eateryReviews \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        for (JsonAdaptedReview review : reviews) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            eateryReviews.add(review.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jakq"
        },
        "content": "        final List\u003cTag\u003e eateryTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jakq"
        },
        "content": "            eateryTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (isOpen \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jakq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"isOpen\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (!isOpen.equals(\"true\") \u0026\u0026 !isOpen.equals(\"false\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jakq"
        },
        "content": "            throw new IllegalValueException(\"isOpen has to be either true or false, not blank or anything else.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jakq"
        },
        "content": "        final boolean modelIsOpen \u003d Boolean.parseBoolean(isOpen.toLowerCase());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                    Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (category \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "walnads"
        },
        "content": "                    Category.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (!Category.isValidCategory(category)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "walnads"
        },
        "content": "        final Category modelCategory \u003d new Category(category);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        final List\u003cReview\u003e modelReviews \u003d new ArrayList\u003c\u003e(eateryReviews);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jakq"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(eateryTags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Eatery eatery \u003d new Eatery(modelName, modelIsOpen, modelAddress, modelCategory, modelTags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        eatery.setReviews(modelReviews);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return eatery;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 13,
      "ROHITREDDYBALAM": 19,
      "dvrylc": 9,
      "jakq": 26,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/eatme/storage/JsonAdaptedFeed.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.Feed;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.FeedPost;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Jackson-friendly version of {@link Feed}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "class JsonAdaptedFeed {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Feed\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final Set\u003cJsonAdaptedFeedPost\u003e posts \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Constructs a {@code JsonAdaptedFeed} with the given feed details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public JsonAdaptedFeed(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                           @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                           @JsonProperty(\"posts\") Set\u003cJsonAdaptedFeedPost\u003e posts) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.posts.addAll(posts);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Converts a given {@code Feed} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public JsonAdaptedFeed(Feed source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        address \u003d source.getAddress();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.posts.addAll(source.getPosts().stream().map(JsonAdaptedFeedPost::new).collect(Collectors.toSet()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Converts this Jackson-friendly adapted feed object into the model\u0027s {@code Feed} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted feed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Feed toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"name\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"address\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Feed feed \u003d new Feed(name, address);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Set\u003cFeedPost\u003e feedPosts \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        for (JsonAdaptedFeedPost feedPost : this.posts) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            feedPosts.add(feedPost.toModelType());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        feed.setPosts(feedPosts);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return feed;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 70
    }
  },
  {
    "path": "src/main/java/seedu/eatme/storage/JsonAdaptedFeedPost.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.FeedPost;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Jackson-friendly version of {@link FeedPost}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "class JsonAdaptedFeedPost {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"FeedPost\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final String source;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Constructs a {@code JsonAdaptedFeedPost} with the given feed post details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public JsonAdaptedFeedPost(@JsonProperty(\"source\") String source,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                               @JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                               @JsonProperty(\"address\") String address) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.source \u003d source;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Converts a given {@code FeedPost} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public JsonAdaptedFeedPost(FeedPost source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.source \u003d source.getSource();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.title \u003d source.getTitle();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.address \u003d source.getAddress();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Converts this Jackson-friendly adapted feed post object into the model\u0027s {@code FeedPost} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted feed post."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public FeedPost toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (source \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"source\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"title\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"address\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new FeedPost(source, title, address);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 60
    }
  },
  {
    "path": "src/main/java/seedu/eatme/storage/JsonAdaptedReview.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Jackson friendly version of {@code Review}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "class JsonAdaptedReview {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final double cost;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final int rating;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public JsonAdaptedReview(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                             @JsonProperty(\"cost\") double cost,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                             @JsonProperty(\"rating\") int rating,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                             @JsonProperty(\"date\") Date date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public JsonAdaptedReview(Review review) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        description \u003d review.getDescription();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        cost \u003d review.getCost();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        rating \u003d review.getRating();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        date \u003d review.getDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Converts this Jackson-friendly adapted review object into the model\u0027s {@code Review} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted review."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public Review toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (!Review.isValidDescription(description)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new IllegalValueException(Review.REVIEW_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (!Review.isValidCost(cost)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new IllegalValueException(Review.REVIEW_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (!Review.isValidRating(String.valueOf(rating))) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new IllegalValueException((Review.REVIEW_CONSTRAINTS));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return new Review(description, cost, rating, date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 57,
      "dvrylc": 3
    }
  },
  {
    "path": "src/main/java/seedu/eatme/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "        tagName \u003d source.getName();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (!Tag.isValidTag(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 2,
      "dvrylc": 3,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/eatme/storage/JsonEateryListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyEateryList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * A class to access EateryList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class JsonEateryListStorage implements EateryListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonEateryListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public JsonEateryListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Path getEateryListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Optional\u003cReadOnlyEateryList\u003e readEateryList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return readEateryList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Similar to {@link #readEateryList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Optional\u003cReadOnlyEateryList\u003e readEateryList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Optional\u003cJsonSerializableEateryList\u003e jsonEateryList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                filePath, JsonSerializableEateryList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (!jsonEateryList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return Optional.of(jsonEateryList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void saveEateryList(ReadOnlyEateryList eateryList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        saveEateryList(eateryList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Similar to {@link #saveEateryList(ReadOnlyEateryList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void saveEateryList(ReadOnlyEateryList eateryList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(eateryList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableEateryList(eateryList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 80
    }
  },
  {
    "path": "src/main/java/seedu/eatme/storage/JsonFeedListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyFeedList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * A class to access FeedList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class JsonFeedListStorage implements FeedListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFeedListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public JsonFeedListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Path getFeedListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Optional\u003cReadOnlyFeedList\u003e readFeedList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return readFeedList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Similar to {@link #readFeedList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Optional\u003cReadOnlyFeedList\u003e readFeedList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Optional\u003cJsonSerializableFeedList\u003e jsonFeedList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                filePath, JsonSerializableFeedList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (jsonFeedList.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return Optional.of(jsonFeedList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void saveFeedList(ReadOnlyFeedList feedList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        saveFeedList(feedList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Similar to {@link #saveFeedList(ReadOnlyFeedList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void saveFeedList(ReadOnlyFeedList feedList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(feedList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFeedList(feedList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 79
    }
  },
  {
    "path": "src/main/java/seedu/eatme/storage/JsonSerializableEateryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.EateryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyEateryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * An Immutable EateryList that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "@JsonRootName(value \u003d \"eaterylist\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "class JsonSerializableEateryList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EATERY \u003d \"Eateries list contains duplicate eatery(ies).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private final List\u003cJsonAdaptedEatery\u003e eateries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private final List\u003cJsonAdaptedEatery\u003e todos \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Constructs a {@code JsonSerializableEateryList} with the given eateries."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public JsonSerializableEateryList(@JsonProperty(\"eateries\") List\u003cJsonAdaptedEatery\u003e eateries) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jakq"
        },
        "content": "        this.eateries.addAll(eateries);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Converts a given {@code ReadOnlyEateryList} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableEateryList}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public JsonSerializableEateryList(ReadOnlyEateryList source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": "        eateries.addAll(source.getEateryList().stream().map(JsonAdaptedEatery::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        todos.addAll(source.getTodoList().stream().map(JsonAdaptedEatery::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Converts this eatery list into the model\u0027s {@code EateryList} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public EateryList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryList eateryList \u003d new EateryList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "        for (JsonAdaptedEatery jsonAdaptedEatery : eateries) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": "            Eatery eatery \u003d jsonAdaptedEatery.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            if (eateryList.hasEatery(eatery)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EATERY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            eateryList.addEatery(eatery);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        eateryList.toggle();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        for (JsonAdaptedEatery jsonAdaptedEatery : todos) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            Eatery eatery \u003d jsonAdaptedEatery.toModelType();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            if (eateryList.hasEatery(eatery)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EATERY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            eateryList.addEatery(eatery);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return eateryList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 22,
      "JunHongT": 11,
      "jakq": 7,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/eatme/storage/JsonSerializableFeedList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.FeedList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyFeedList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.Feed;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * An Immutable FeedList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "@JsonRootName(value \u003d \"feeds\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "class JsonSerializableFeedList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FEED \u003d \"Feed list contains duplicate feed(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final List\u003cJsonAdaptedFeed\u003e feeds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Constructs a {@code JsonSerializableFeedList} with the given feeds."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public JsonSerializableFeedList(@JsonProperty(\"feeds\") List\u003cJsonAdaptedFeed\u003e feeds) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.feeds.addAll(feeds);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Converts a given {@code ReadOnlyFeedList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFeedList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public JsonSerializableFeedList(ReadOnlyFeedList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        feeds.addAll(source.getFeedList().stream().map(JsonAdaptedFeed::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Converts this feed list into the model\u0027s {@code FeedList} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public FeedList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        FeedList feedList \u003d new FeedList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        for (JsonAdaptedFeed jsonAdaptedFeed : feeds) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            Feed feed \u003d jsonAdaptedFeed.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            if (feedList.hasFeed(feed)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FEED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            feedList.addFeed(feed);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return feedList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 60
    }
  },
  {
    "path": "src/main/java/seedu/eatme/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/eatme/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyEateryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyFeedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public interface Storage extends EateryListStorage, UserPrefsStorage, FeedListStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    Path getEateryListFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    Optional\u003cReadOnlyEateryList\u003e readEateryList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    void saveEateryList(ReadOnlyEateryList eateryList) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    Path getFeedListFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    Optional\u003cReadOnlyFeedList\u003e readFeedList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    void saveFeedList(ReadOnlyFeedList feedList) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 19,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/eatme/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyEateryList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyFeedList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Manages storage of EatMe data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private EateryListStorage eateryListStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private FeedListStorage feedListStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public StorageManager(EateryListStorage eateryListStorage, FeedListStorage feedListStorage,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.eateryListStorage \u003d eateryListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.feedListStorage \u003d feedListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EateryList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Path getEateryListFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return eateryListStorage.getEateryListFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Optional\u003cReadOnlyEateryList\u003e readEateryList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return readEateryList(eateryListStorage.getEateryListFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Optional\u003cReadOnlyEateryList\u003e readEateryList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return eateryListStorage.readEateryList(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void saveEateryList(ReadOnlyEateryList eateryList) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        saveEateryList(eateryList, eateryListStorage.getEateryListFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void saveEateryList(ReadOnlyEateryList eateryList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        eateryListStorage.saveEateryList(eateryList, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FeedList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Path getFeedListFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return feedListStorage.getFeedListFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Optional\u003cReadOnlyFeedList\u003e readFeedList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return readFeedList(feedListStorage.getFeedListFilePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Optional\u003cReadOnlyFeedList\u003e readFeedList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return feedListStorage.readFeedList(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void saveFeedList(ReadOnlyFeedList feedList) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        saveFeedList(feedList, feedListStorage.getFeedListFilePath());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void saveFeedList(ReadOnlyFeedList feedList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        feedListStorage.saveFeedList(feedList, filePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 54,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/eatme/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Represents a storage for {@link seedu.eatme.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Saves the given {@link seedu.eatme.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/eatme/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, String pending) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        commandTextField.setText(pending);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "         * @see seedu.eatme.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return commandTextField.getText();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 5,
      "JunHongT": 11,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/eatme/ui/CustomLayeredGraph.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.statistics.Statistics;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": " * Creates a custom, layered graph to display the total and average costs graphs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class CustomLayeredGraph extends UiPart\u003cNode\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private static final String FXML \u003d \"CustomLayeredGraph.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private final int prefTickSpace \u003d 20;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private final TreeMap\u003c? extends Object, Double\u003e totalData;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private final TreeMap\u003c? extends Object, Double\u003e avgData;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private HBox customLegend;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private StackPane layeredGraph;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private CategoryAxis xAxis;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public CustomLayeredGraph(String title, TreeMap\u003c? extends Object, Double\u003e totalData, TreeMap\u003c? extends Object,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "            Double\u003e avgData) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.totalData \u003d totalData;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.avgData \u003d avgData;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.title.setText(title);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.title.setStyle(\"-fx-font-weight: bold; -fx-font-size: 15px; -fx-padding: 10 0 15 0;\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "        initAxis();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "        layeredGraph.getChildren().addAll(createTotalChart(), createAvgChart());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "        initCustomLegend();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Initialises the x-axis and y-axis for the custom graph."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private void initAxis() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.xAxis \u003d new CategoryAxis(FXCollections.observableList(totalData.keySet()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "walnads"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "walnads"
        },
        "content": "                .map(c -\u003e ((Object) c).toString())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "walnads"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Map\u003cString, Double\u003e pair \u003d Statistics.getMaxMinValue(totalData);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "walnads"
        },
        "content": "        int lowerBound \u003d (int) Math.ceil(pair.get(Statistics.MIN_VARIABLE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "walnads"
        },
        "content": "        int upperBound \u003d (int) Math.ceil(pair.get(Statistics.MAX_VARIABLE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.yAxis \u003d new NumberAxis(lowerBound, upperBound + 1, 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.xAxis.setLabel(\"Category\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.yAxis.setLabel(\"Cost\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Creates a bar chart that displays the total costs."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private BarChart\u003cString, Number\u003e createTotalChart() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "walnads"
        },
        "content": "        BarChart\u003cString, Number\u003e totalChart \u003d new BarChart\u003cString, Number\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "walnads"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e series1 \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (Map.Entry\u003c? extends Object, Double\u003e entry : totalData.entrySet()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "walnads"
        },
        "content": "            String category \u003d entry.getKey().toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "walnads"
        },
        "content": "            Number cost \u003d entry.getValue();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "walnads"
        },
        "content": "            series1.getData().add(new XYChart.Data\u003cString, Number\u003e(category, cost));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "walnads"
        },
        "content": "        totalChart.getData().addAll(series1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "walnads"
        },
        "content": "        totalChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return totalChart;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Creates a line chart that displays the average cost."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private LineChart\u003cString, Number\u003e createAvgChart() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "walnads"
        },
        "content": "        LineChart\u003cString, Number\u003e avgChart \u003d new LineChart\u003cString, Number\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "walnads"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e series2 \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (Map.Entry\u003c? extends Object, Double\u003e entry : avgData.entrySet()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "walnads"
        },
        "content": "            String category \u003d entry.getKey().toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "walnads"
        },
        "content": "            Number cost \u003d entry.getValue();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "walnads"
        },
        "content": "            series2.getData().add(new XYChart.Data\u003cString, Number\u003e(category, cost));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "walnads"
        },
        "content": "        avgChart.setAnimated(false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "walnads"
        },
        "content": "        avgChart.setCreateSymbols(true);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "walnads"
        },
        "content": "        avgChart.setAlternativeRowFillVisible(false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "walnads"
        },
        "content": "        avgChart.setAlternativeColumnFillVisible(false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "walnads"
        },
        "content": "        avgChart.setHorizontalGridLinesVisible(false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "walnads"
        },
        "content": "        avgChart.setVerticalGridLinesVisible(false);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "walnads"
        },
        "content": "        avgChart.getXAxis().setVisible(false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "walnads"
        },
        "content": "        avgChart.getYAxis().setVisible(false);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "walnads"
        },
        "content": "        avgChart.getData().addAll(series2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "walnads"
        },
        "content": "        avgChart.getStylesheets().add(\"view/Chart.css\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "walnads"
        },
        "content": "        avgChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return avgChart;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Creates the custom legend for the layered graph."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private void initCustomLegend() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Circle circle1 \u003d new Circle(15.0f, 15.0f, 8.f);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Label label1 \u003d new Label();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "walnads"
        },
        "content": "        label1.setText(\"Total cost\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "walnads"
        },
        "content": "        circle1.setFill(Color.ORANGERED);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "walnads"
        },
        "content": "        label1.setStyle(\"-fx-padding: 0 15 0 2;\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Circle circle2 \u003d new Circle(15.0f, 15.0f, 8.f);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Label label2 \u003d new Label();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "walnads"
        },
        "content": "        label2.setText(\"Average cost\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "walnads"
        },
        "content": "        circle2.setFill(Color.BLACK);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "walnads"
        },
        "content": "        label2.setStyle(\"-fx-padding: 0 0 0 2;\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.customLegend.getChildren().addAll(circle1, label1, circle2, label2);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "walnads"
        },
        "content": "        customLegend.setStyle(\"-fx-padding: 0 0 10 0\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 143,
      "dvrylc": 2
    }
  },
  {
    "path": "src/main/java/seedu/eatme/ui/CustomPieChart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": " * Creates a custom pie chart."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class CustomPieChart extends UiPart\u003cNode\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private static final String FXML \u003d \"CustomPieChart.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private final TreeMap\u003cCategory, Integer\u003e chartData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private VBox container;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public CustomPieChart(String title, TreeMap\u003cCategory, Integer\u003e chartData) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.chartData \u003d chartData;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.title.setText(title);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.title.setStyle(\"-fx-font-weight: bold; -fx-font-size: 15px; -fx-padding: 0 0 15 0;\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.container.getChildren().add(createChart());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Creates the pie chart object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private PieChart createChart() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "        TreeMap\u003cCategory, Integer\u003e duplicateMap \u003d chartData;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (Map.Entry\u003cCategory, Integer\u003e entry : duplicateMap.entrySet()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "            pieChartData.add(new PieChart.Data(entry.getKey().getName(), entry.getValue()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "        PieChart pieChart \u003d new PieChart();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "        pieChart.setData(pieChartData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return pieChart;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 52,
      "dvrylc": 2
    }
  },
  {
    "path": "src/main/java/seedu/eatme/ui/EateryCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jakq"
        },
        "content": " * An UI component that displays information of a {@code Eatery}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class EateryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private static final String FXML \u003d \"EateryListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public final Eatery eatery;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public EateryCard(Eatery eatery, int displayedIndex, boolean isMainMode) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jakq"
        },
        "content": "        this.eatery \u003d eatery;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jakq"
        },
        "content": "        name.setText(eatery.getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jakq"
        },
        "content": "        address.setText(eatery.getAddress().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jakq"
        },
        "content": "        eatery.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            .sorted(Comparator.comparing(Tag::getName))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(String.format(\"#%s\", tag.getName()))));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (isMainMode) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            category.setMinHeight(18);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            category.setPrefHeight(18);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            category.setText(eatery.getCategory().getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jakq"
        },
        "content": "        if (!(other instanceof EateryCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": "        EateryCard card \u003d (EateryCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jakq"
        },
        "content": "                \u0026\u0026 eatery.equals(card.eatery);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 1,
      "dvrylc": 5,
      "JunHongT": 7,
      "jakq": 11,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/eatme/ui/EateryListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jakq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jakq"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jakq"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jakq"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jakq"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jakq"
        },
        "content": " * Panel containing the list of eateries."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jakq"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class EateryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private static final String FXML \u003d \"EateryListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EateryListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private ListView\u003cEatery\u003e eateryListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private boolean isMainMode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public EateryListPanel(ObservableList\u003cEatery\u003e eateryList, boolean isMainMode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": "        eateryListView.setItems(eateryList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": "        eateryListView.setCellFactory(listView -\u003e new EateryListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.isMainMode \u003d isMainMode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Eatery} using a {@code EateryCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": "    class EateryListViewCell extends ListCell\u003cEatery\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jakq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jakq"
        },
        "content": "        protected void updateItem(Eatery eatery, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jakq"
        },
        "content": "            super.updateItem(eatery, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jakq"
        },
        "content": "            if (empty || eatery \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                setGraphic(new EateryCard(eatery, getIndex() + 1, isMainMode).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                if (!eatery.getIsOpen()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    setStyle(\"-fx-background-color: rgba(218, 88, 65, 0.25);\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jakq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 7,
      "JunHongT": 6,
      "jakq": 41
    }
  },
  {
    "path": "src/main/java/seedu/eatme/ui/FeedPostCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.scene.control.Hyperlink;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.FeedPost;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * An UI component that displays information of a {@code FeedPost}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class FeedPostCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static final String FXML \u003d \"FeedPostCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public final FeedPost feedPost;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Label source;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Hyperlink link;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public FeedPostCard(FeedPost feedPost) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.feedPost \u003d feedPost;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        source.setText(feedPost.getSource());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        link.setText(feedPost.getTitle());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        link.setOnAction((ActionEvent e) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                Desktop.getDesktop().browse(new URI(feedPost.getAddress()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                LogsCenter.getLogger(FeedPostCard.class).warning(\"Unable to open browser\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (!(other instanceof FeedPostCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        FeedPostCard card \u003d (FeedPostCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return feedPost.equals(card.feedPost);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 68
    }
  },
  {
    "path": "src/main/java/seedu/eatme/ui/FeedPostListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyFeedList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.Feed;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.FeedPost;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Panel containing the list of feed posts."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class FeedPostListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static final String FXML \u003d \"FeedPostListPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FeedPostListPanel.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private ListView\u003cFeedPost\u003e feedPostListView;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public FeedPostListPanel(ReadOnlyFeedList feedList, Logic logic) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ObservableList\u003cFeedPost\u003e feedPostList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        feedPostListView.setItems(feedPostList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        feedPostListView.setCellFactory(listView -\u003e new FeedPostListViewCell());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        fetchPosts(feedPostList, feedList.getFeedList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ObservableList\u003cFeed\u003e observableFeedList \u003d feedList.getFeedList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ListChangeListener\u003cFeed\u003e listener \u003d change -\u003e updatePosts(feedPostList, change);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        observableFeedList.addListener(listener);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Detects the changes made in a `ListChangeListener.Change` object and updates the post list accordingly."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * If feeds are added, trigger a thread to fetch its posts. If feeds are removed, remove all its posts from the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * feed list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @param feedPostList Observable list of feed posts"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @param change Object representing a change in the feed list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private void updatePosts(ObservableList\u003cFeedPost\u003e feedPostList, ListChangeListener.Change\u003c? extends Feed\u003e change) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        change.next();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        List\u003cFeed\u003e added \u003d change.getAddedSubList().stream().filter(Objects::nonNull).collect(Collectors.toList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        List\u003cFeed\u003e removed \u003d change.getRemoved().stream().filter(Objects::nonNull).collect(Collectors.toList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (added.size() \u003e 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            fetchPosts(feedPostList, added);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (removed.size() \u003e 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            for (Feed f : removed) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                feedPostList.removeIf(feedPost -\u003e feedPost.getSource().equals(f.getName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Fires off a thread that fetches posts from a list of feeds and adds them to the post list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @param feedPostList Observable list of feed posts."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @param feedList List of input feeds."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private void fetchPosts(ObservableList\u003cFeedPost\u003e feedPostList, List\u003cFeed\u003e feedList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Runnable feedPostFetch \u003d () -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            for (Feed feed : feedList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                Set\u003cFeedPost\u003e feedPosts \u003d feed.fetchPosts();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                this.logic.saveFeedList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    feedPostList.addAll(feedPosts);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        };"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        new Thread(feedPostFetch).start();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code FeedPost} using a {@code FeedPostCard}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    class FeedPostListViewCell extends ListCell\u003cFeedPost\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        protected void updateItem(FeedPost feedPost, boolean empty) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            super.updateItem(feedPost, empty);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            if (empty || feedPost \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                setGraphic(new FeedPostCard(feedPost).getRoot());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 108
    }
  },
  {
    "path": "src/main/java/seedu/eatme/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-w11-3.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 2,
      "JunHongT": 1,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/eatme/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private EateryListPanel eateryListPanel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private EateryListPanel todoListPanel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private StatsWindow statsWindow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private FeedPostListPanel feedPostListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private ReviewListPanel reviewListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private VBox commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private StackPane eateryListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private VBox resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private StackPane feedPostListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private VBox statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "walnads"
        },
        "content": "        statsWindow \u003d new StatsWindow();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        eateryListPanel \u003d new EateryListPanel(logic.getFilteredEateryList(), true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jakq"
        },
        "content": "        eateryListPanelPlaceholder.getChildren().add(eateryListPanel.getRoot());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        feedPostListPanel \u003d new FeedPostListPanel(logic.getFeedList(), logic);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        feedPostListPanelPlaceholder.getChildren().add(feedPostListPanel.getRoot());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        reviewListPanel \u003d new ReviewListPanel(logic.getActiveReviews());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        resultDisplay \u003d new ResultDisplay(reviewListPanel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getEateryListFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    void fillDataParts() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        eateryListPanel \u003d new EateryListPanel(logic.getFilteredEateryList(), true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        todoListPanel \u003d new EateryListPanel(logic.getFilteredTodoList(), false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (logic.isMainMode()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            eateryListPanelPlaceholder.getChildren().addAll(eateryListPanel.getRoot());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            eateryListPanelPlaceholder.getChildren().addAll(todoListPanel.getRoot());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Displays the statistics window."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private void showStats() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (!statsWindow.isShowing()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "walnads"
        },
        "content": "            statsWindow.initStats(logic.getStatistics());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "walnads"
        },
        "content": "            statsWindow.show();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "walnads"
        },
        "content": "            statsWindow.initStats(logic.getStatistics());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "walnads"
        },
        "content": "            statsWindow.focus();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Display pending command generated from to-do in commandbox."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private void handleSaveTodo(String pendingCommand) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String[] resTokens \u003d pendingCommand.split(\":\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand, resTokens[1]);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        commandBoxPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        commandBoxPlaceholder.getChildren().addAll(commandBox.getRoot());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public EateryListPanel getEateryListPanel() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return eateryListPanel;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @see seedu.eatme.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            if (commandResult.wantToSave()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                handleSaveTodo(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "walnads"
        },
        "content": "            if (commandResult.isShowStats()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "walnads"
        },
        "content": "                showStats();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            fillDataParts();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            resultDisplay.setFeedbackToUser(e);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 19,
      "dvrylc": 26,
      "JunHongT": 35,
      "jakq": 5,
      "-": 133
    }
  },
  {
    "path": "src/main/java/seedu/eatme/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.net.URLEncoder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Base64;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private static final String K \u003d \"QUl6YVN5QmtSOTlwR0EwSElTUFQxSFA2d1NLOFd2cTBPZGdCbU9J\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static final String WEBVIEW_WRAPPER \u003d \"\u003chtml style\u003d\\\"background: #424242;\\\"\u003e%s\u003c/html\u003e\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static final String MAPS_WRAPPER \u003d \"\u003ciframe width\u003d\\\"100%%\\\" height\u003d\\\"330\\\" frameborder\u003d\\\"0\\\" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"style\u003d\\\"border:0\\\" src\u003d\\\"https://www.google.com/maps/embed/v1/search?q\u003d%s\u0026key\u003d%s\\\" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            + \"allowfullscreen\u003e\u003c/iframe\u003e\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final ReviewListPanel reviewListPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Label commandFeedback;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Label eateryName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Label eateryCategory;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Label eateryAddress;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private FlowPane eateryTags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private WebView eateryMap;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Label reviewHeader;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private StackPane reviewListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public ResultDisplay(ReviewListPanel reviewListPanel) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        eateryMap.getEngine().loadContent(String.format(WEBVIEW_WRAPPER, \"\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.reviewListPanel \u003d reviewListPanel;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeedbackToUser(CommandResult commandResult) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        reset();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String feedbackToUser \u003d commandResult.getFeedbackToUser();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Eatery eateryToShow \u003d commandResult.getEateryToShow();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        commandFeedback.setText(feedbackToUser);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (eateryToShow !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            // Basic info"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            eateryName.setText(eateryToShow.getIsOpen()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    ? eateryToShow.getName().fullName : String.format(\"%s [closed]\", eateryToShow.getName().fullName));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            eateryCategory.setText(eateryToShow.getCategory().getName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            eateryAddress.setText(eateryToShow.getAddress().value);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            // Tags"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            eateryToShow.getTags().stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    .sorted(Comparator.comparing(Tag::getName))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    .forEach(tag -\u003e eateryTags.getChildren().add(new Label(String.format(\"#%s\", tag.getName()))));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            // Map"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            String doc \u003d String.format(MAPS_WRAPPER,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    URLEncoder.encode(eateryToShow.getAddress().value, StandardCharsets.UTF_8),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    new String(Base64.getDecoder().decode(K)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            eateryMap.getEngine().loadContent(String.format(WEBVIEW_WRAPPER, doc));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            // Reviews"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            reviewHeader.setText(\"Reviews\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            reviewListPanelPlaceholder.getChildren().add(reviewListPanel.getRoot());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeedbackToUser(Exception e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        requireNonNull(e);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        reset();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        commandFeedback.setText(e.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Resets the UI to its initial empty state."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private void reset() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        commandFeedback.setText(\"\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        eateryName.setText(\"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        eateryCategory.setText(\"\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        eateryAddress.setText(\"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        eateryTags.getChildren().clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        eateryMap.getEngine().loadContent(String.format(WEBVIEW_WRAPPER, \"\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        reviewHeader.setText(\"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        reviewListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 1,
      "dvrylc": 92,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/eatme/ui/ReviewCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * An UI component that displays information of a {@code Review}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class ReviewCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static final String FXML \u003d \"ReviewListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public final Review review;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Label cost;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Label ratingActive;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Label rating;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public ReviewCard(Review review, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.review \u003d review;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        date.setText(String.format(\"%d. %s\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                displayedIndex, new SimpleDateFormat(\"dd/MM/yyyy\").format(review.getDate())));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        description.setText(review.getDescription());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        cost.setText(String.format(\"$%.2f\", review.getCost()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ratingActive.setText(\"★\".repeat(review.getRating()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        rating.setText(\"★\".repeat(5 - review.getRating()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        if (!(other instanceof ReviewCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ReviewCard card \u003d (ReviewCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return date.getText().equals(card.date.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u0026\u0026 review.equals(card.review);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 72
    }
  },
  {
    "path": "src/main/java/seedu/eatme/ui/ReviewListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Panel containing the list of reviews."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class ReviewListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static final String FXML \u003d \"ReviewListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ReviewListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private ListView\u003cReview\u003e reviewListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public ReviewListPanel(ObservableList\u003cReview\u003e reviews) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        reviewListView.setItems(reviews);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        reviewListView.setCellFactory(listView -\u003e new ReviewListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Review} using a {@code ReviewCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    class ReviewListViewCell extends ListCell\u003cReview\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        protected void updateItem(Review review, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            super.updateItem(review, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            if (empty || review \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                setGraphic(new ReviewCard(review, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 46
    }
  },
  {
    "path": "src/main/java/seedu/eatme/ui/StatsWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.statistics.Statistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": " * Creates the statistics window that displays multiple statistics."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class StatsWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private static final String FXML \u003d \"StatsWindow.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private HBox chartDisplayView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private HBox numDisplayView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public StatsWindow(Stage root) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "        root.setOnCloseRequest((WindowEvent event) -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "            numDisplayView.getChildren().clear();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "            chartDisplayView.getChildren().clear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public StatsWindow() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Shows the statistics window."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Checks if the statistics window is currently showing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Hides the statistics window."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Focuses the statistics window if it\u0027s already open."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "walnads"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Initialises the charts and graphs."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param statistics contains the data used to generate the charts and graphs."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void initStats(Statistics statistics) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "walnads"
        },
        "content": "        numDisplayView.getChildren().clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "walnads"
        },
        "content": "        chartDisplayView.getChildren().clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "walnads"
        },
        "content": "        initCharts(statistics);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "walnads"
        },
        "content": "        initNum(statistics);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Creates the graphs and charts needed for the statistics."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private void initCharts(Statistics statistics) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "walnads"
        },
        "content": "        CustomLayeredGraph graph \u003d new CustomLayeredGraph(\"How much you spent per category\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "walnads"
        },
        "content": "                statistics.graphCategoryTotalExpense,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "walnads"
        },
        "content": "                statistics.graphCategoryAvgExpense);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "walnads"
        },
        "content": "        CustomPieChart pieChart \u003d new CustomPieChart(\"How many times visited per category\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "walnads"
        },
        "content": "                statistics.chartCategoryTotalVisited);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "walnads"
        },
        "content": "        chartDisplayView.getChildren().addAll(graph.getRoot(), pieChart.getRoot());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "walnads"
        },
        "content": "        chartDisplayView.setStyle(\"-fx-padding: 20 0 0 0\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Creates other miscellaneous statistics that do not require graph or chart representation."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private void initNum(Statistics statistics) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "walnads"
        },
        "content": "        TextFlow mostExpEateries \u003d new TextFlow();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "walnads"
        },
        "content": "        mostExpEateries.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Text titleMostExp \u003d new Text(\"Top 3 eateries you spent the most at\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "walnads"
        },
        "content": "        titleMostExp.setStyle(\"-fx-font-weight: bold; -fx-font-size: 15px\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "walnads"
        },
        "content": "        mostExpEateries.getChildren().add(titleMostExp);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (int i \u003d 0; i \u003c statistics.mostExpEatery.size(); i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "walnads"
        },
        "content": "            mostExpEateries.getChildren().add(new Text(String.format(\"%d. %s\\n\", i + 1,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "walnads"
        },
        "content": "                    statistics.mostExpEatery.get(i).getName())));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "walnads"
        },
        "content": "        TextFlow leastExpEateries \u003d new TextFlow();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "walnads"
        },
        "content": "        leastExpEateries.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "walnads"
        },
        "content": "        leastExpEateries.setStyle(String.format(\"-fx-padding: 0 20 0 20\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Text titleLeastExp \u003d new Text(\"Top 3 eateries you spent the least at\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "walnads"
        },
        "content": "        titleLeastExp.setStyle(\"-fx-font-weight: bold; -fx-font-size: 15px\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "walnads"
        },
        "content": "        leastExpEateries.getChildren().add(titleLeastExp);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (int i \u003d 0; i \u003c statistics.leastExpEatery.size(); i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "walnads"
        },
        "content": "            leastExpEateries.getChildren().add(new Text(String.format(\"%d. %s\\n\", i + 1,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "walnads"
        },
        "content": "                    statistics.leastExpEatery.get(i).getName())));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "walnads"
        },
        "content": "        TextFlow mostVisitedEateries \u003d new TextFlow();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "walnads"
        },
        "content": "        mostVisitedEateries.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Text titleMostVisited \u003d new Text(\"Top 3 eateries you visited the most\\n\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "walnads"
        },
        "content": "        titleMostVisited.setStyle(\"-fx-font-weight: bold; -fx-font-size: 15px\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "walnads"
        },
        "content": "        mostVisitedEateries.getChildren().add(titleMostVisited);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (int i \u003d 0; i \u003c statistics.mostVisitedEatery.size(); i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "walnads"
        },
        "content": "            mostVisitedEateries.getChildren().add(new Text(String.format(\"%d. %s\\n\", i + 1,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "walnads"
        },
        "content": "                    statistics.mostVisitedEatery.get(i).getName())));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "walnads"
        },
        "content": "        TextFlow leastVisitedEateries \u003d new TextFlow();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "walnads"
        },
        "content": "        leastVisitedEateries.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "walnads"
        },
        "content": "        leastVisitedEateries.setStyle(String.format(\"-fx-padding: 0 0 0 20\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Text titleLeastVisited \u003d new Text(\"Top 3 eateries you visited the least\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "walnads"
        },
        "content": "        titleLeastVisited.setStyle(\"-fx-font-weight: bold; -fx-font-size: 15px\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "walnads"
        },
        "content": "        leastVisitedEateries.getChildren().add(titleLeastVisited);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (int i \u003d 0; i \u003c statistics.leastVisitedEatery.size(); i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "walnads"
        },
        "content": "            leastVisitedEateries.getChildren().add(new Text(String.format(\"%d. %s\\n\", i + 1,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "walnads"
        },
        "content": "                    statistics.leastVisitedEatery.get(i).getName())));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "walnads"
        },
        "content": "        numDisplayView.getChildren().addAll(mostExpEateries, leastExpEateries, mostVisitedEateries,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "walnads"
        },
        "content": "                leastVisitedEateries);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "walnads"
        },
        "content": "        numDisplayView.setStyle(\"-fx-padding: 0 10 0 10\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 147,
      "dvrylc": 2
    }
  },
  {
    "path": "src/main/java/seedu/eatme/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/eatme/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/eatme/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 5,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/eatme/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/Chart.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": ".chart-plot-background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": "-fx-background-color: transparent;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": ".default-color0.chart-series-line {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "-fx-stroke: black;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": ".default-color0.chart-line-symbol {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "-fx-background-color: black, white;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 11
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003cTextField xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"commandTextField\" minWidth\u003d\"280\" prefWidth\u003d\"280\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "           onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command\"/\u003e"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 2,
      "-": 4
    }
  },
  {
    "path": "src/main/resources/view/CustomLayeredGraph.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "    \u003cLabel fx:id\u003d\"title\" alignment\u003d\"TOP_CENTER\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "    \u003cStackPane fx:id\u003d\"layeredGraph\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    \u003cHBox fx:id\u003d\"customLegend\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "walnads": 12
    }
  },
  {
    "path": "src/main/resources/view/CustomPieChart.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003cVBox fx:id\u003d\"container\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "    \u003cLabel fx:id\u003d\"title\" alignment\u003d\"TOP_CENTER\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "walnads": 10
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jakq"
        },
        "content": "#filterField, #eateryListPanel, #eateryWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jakq": 1,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/EatMeDarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "// Background"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".root, .list-cell, .text-field, .list-view {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-background-color: #424242;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".list-cell:selected {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-background-color: derive(#424242, 20%);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "FlowPane \u003e Label {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-background-color: #ffca28;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "// \u003d\u003d\u003d Type \u003d\u003d\u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Label, TextField {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-text-fill: #fafafa;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-font: normal 13 sans-serif;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".h1 {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-font: bold 19 sans-serif;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".h2 {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-font: bold 16 sans-serif;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".hyperlink {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-text-fill: #ffca28;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-font: normal 13 sans-serif;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".hyperlink:hover,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".hyperlink:visited {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-underline: false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "FlowPane \u003e Label {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-text-fill: #424242;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".rating-active {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-text-fill: #ffca28;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "// \u003d\u003d\u003d Borders \u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "VBox {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "VBox, .text-field, .list-view, .list-item {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-border-color: derive(#424242, 20%);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".left {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-border-width: 0 1 0 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".right {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-border-width: 0 0 0 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".bottom {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-border-width: 1 0 0 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".list-item {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".command-feedback {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "// \u003d\u003d\u003d Padding \u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".container {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-padding: 10;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "Label {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-padding: 1 0 1 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".list-view,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".hyperlink {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".list-item,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".command-feedback {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-padding: 0 0 10 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".eatery-info,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".eatery-map,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".eatery-reviews {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-padding: 10 0 0 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "FlowPane {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-padding: 5 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-hgap: 5;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-vgap: 5;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "FlowPane \u003e Label {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 113
    }
  },
  {
    "path": "src/main/resources/view/EatMeTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "// General UI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".root, .list-cell {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".list-cell:selected {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-background-color: #eee;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".list-cell Label,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".list-cell:selected Label {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "// Utilities"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".container {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-padding: 10;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".plain-border-box {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-border-color: #ccc;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-border-radius: 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "// Person card"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".list-item {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-padding: 10 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-border-color: #ccc;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-padding: 5 0 0 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-hgap: 5;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-vgap: 5;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "#tags Label {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "// Statusbar"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ".statusbar {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    -fx-padding: 0 10 10;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 50
    }
  },
  {
    "path": "src/main/resources/view/EateryListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" minWidth\u003d\"240\" prefWidth\u003d\"240\" styleClass\u003d\"list-item\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003cLabel fx:id\u003d\"id\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003cLabel fx:id\u003d\"name\" wrapText\u003d\"true\" styleClass\u003d\"h2\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003cLabel fx:id\u003d\"address\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    \u003cLabel fx:id\u003d\"category\" wrapText\u003d\"true\" minHeight\u003d\"0\" prefHeight\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 4,
      "JunHongT": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/EateryListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003cListView xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"eateryListView\"/\u003e"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 4
    }
  },
  {
    "path": "src/main/resources/view/FeedPostCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c?import javafx.scene.control.Hyperlink?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" minWidth\u003d\"240\" prefWidth\u003d\"240\" styleClass\u003d\"list-item\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003cLabel fx:id\u003d\"source\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003cHyperlink fx:id\u003d\"link\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 10
    }
  },
  {
    "path": "src/main/resources/view/FeedPostListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003cListView xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"feedPostListView\"/\u003e"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 5
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "         title\u003d\"EatMe\" minWidth\u003d\"1200\" minHeight\u003d\"800\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u003cURL value\u003d\"@EatMeDarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u003cleft\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    \u003cVBox minWidth\u003d\"300\" prefWidth\u003d\"300\" styleClass\u003d\"container, left\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                        \u003cVBox fx:id\u003d\"commandBoxPlaceholder\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                        \u003cVBox fx:id\u003d\"eateryList\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                                \u003cInsets top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jakq"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"eateryListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u003c/left\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u003ccenter\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    \u003cVBox fx:id\u003d\"resultDisplayPlaceholder\" minWidth\u003d\"600\" prefWidth\u003d\"600\" styleClass\u003d\"container\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u003c/center\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u003cright\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    \u003cVBox minWidth\u003d\"300\" prefWidth\u003d\"300\" styleClass\u003d\"container, right\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"feedPostListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u003c/right\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u003cbottom\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    \u003cVBox fx:id\u003d\"statusbarPlaceholder\" styleClass\u003d\"container, bottom\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \u003c/bottom\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 24,
      "jakq": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" minWidth\u003d\"580\" prefWidth\u003d\"580\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003cVBox minWidth\u003d\"580\" prefWidth\u003d\"580\" styleClass\u003d\"command-feedback\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        \u003cLabel fx:id\u003d\"commandFeedback\" text\u003d\"Enter a command on the left to get started.\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003cVBox minWidth\u003d\"580\" prefWidth\u003d\"580\" styleClass\u003d\"eatery-info\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        \u003cLabel fx:id\u003d\"eateryName\" styleClass\u003d\"h1\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        \u003cLabel fx:id\u003d\"eateryCategory\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        \u003cLabel fx:id\u003d\"eateryAddress\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"eateryTags\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003cVBox minWidth\u003d\"580\" prefWidth\u003d\"580\" styleClass\u003d\"eatery-map\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        \u003cWebView fx:id\u003d\"eateryMap\" minHeight\u003d\"350\" prefHeight\u003d\"350\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003cLabel fx:id\u003d\"reviewHeader\" styleClass\u003d\"h2\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003cStackPane fx:id\u003d\"reviewListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"eatery-reviews\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dvrylc": 24,
      "-": 4
    }
  },
  {
    "path": "src/main/resources/view/ReviewListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" minWidth\u003d\"240\" prefWidth\u003d\"240\" styleClass\u003d\"list-item\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        \u003cLabel fx:id\u003d\"date\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        \u003cLabel fx:id\u003d\"description\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003cHBox minWidth\u003d\"75\" prefWidth\u003d\"75\" maxWidth\u003d\"75\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        \u003cLabel fx:id\u003d\"cost\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003cHBox minWidth\u003d\"100\" prefWidth\u003d\"100\" maxWidth\u003d\"100\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        \u003cLabel fx:id\u003d\"ratingActive\" wrapText\u003d\"true\" styleClass\u003d\"h1, rating-active\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        \u003cLabel fx:id\u003d\"rating\" wrapText\u003d\"true\" styleClass\u003d\"h1\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 21
    }
  },
  {
    "path": "src/main/resources/view/ReviewListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003cListView xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"reviewListView\"/\u003e"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 5
    }
  },
  {
    "path": "src/main/resources/view/StatsWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Statistics\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "            \u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_CENTER\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "                \u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"numDisplayView\" alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "                \u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"chartDisplayView\" alignment\u003d\"TOP_CENTER\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "walnads": 21
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003cLabel xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"saveLocationStatus\"/\u003e"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/eatme/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/eatme/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/eatme/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/eatme/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": "        final Index fifthEateryIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertTrue(fifthEateryIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertTrue(fifthEateryIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertTrue(fifthEateryIndex.equals(fifthEateryIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertFalse(fifthEateryIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertFalse(fifthEateryIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertFalse(fifthEateryIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 2,
      "jakq": 7,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/eatme/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/eatme/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/eatme/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/eatme/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/eatme/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/eatme/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ADDRESS_WITH_PREFIX_MAC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_CATEGORY_WITH_PREFIX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_WITH_PREFIX_MAC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.MCDONALD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyEateryList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyFeedList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.storage.JsonEateryListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.storage.JsonFeedListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EateryBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        JsonEateryListStorage eateryListStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                new JsonEateryListStorage(temporaryFolder.resolve(\"eatMe.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        JsonFeedListStorage feedListStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                new JsonFeedListStorage(temporaryFolder.resolve(\"feedList.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        StorageManager storage \u003d new StorageManager(eateryListStorage, feedListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String deleteCommand \u003d \"delete 7\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // Setup LogicManager with JsonEateryListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        JsonEateryListStorage eateryListStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                new JsonEateryListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionEatMe.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        JsonFeedListStorage feedListStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                new JsonFeedListStorage(temporaryFolder.resolve(\"ioExceptionFeedList.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        StorageManager storage \u003d new StorageManager(eateryListStorage, feedListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + VALID_NAME_WITH_PREFIX_MAC"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            + VALID_ADDRESS_WITH_PREFIX_MAC + VALID_CATEGORY_WITH_PREFIX;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery expectedEatery \u003d new EateryBuilder(MCDONALD).withTags().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jakq"
        },
        "content": "        expectedModel.addEatery(expectedEatery);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void getFilteredEateryList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredEateryList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEateryList(), model.getFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static class JsonEateryListIoExceptionThrowingStub extends JsonEateryListStorage {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        private JsonEateryListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public void saveEateryList(ReadOnlyEateryList eateryList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static class JsonFeedListIoExceptionThrowingStub extends JsonFeedListStorage {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        private JsonFeedListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public void saveFeedList(ReadOnlyFeedList feedList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 55,
      "JunHongT": 4,
      "jakq": 4,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EateryBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_newEatery_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery validEatery \u003d new EateryBuilder().withName(\"New Person\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEateryList(), model.getFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": "        expectedModel.addEatery(validEatery);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandSuccess(new AddCommand(validEatery), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validEatery.getName().fullName), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_duplicateEatery_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Eatery eateryInList \u003d model.getEateryList().getEateryList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandFailure(new AddCommand(eateryInList), model, AddCommand.MESSAGE_DUPLICATE_EATERY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 14,
      "jakq": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.EateryList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyEateryList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyFeedList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.Feed;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.statistics.Statistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EateryBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void constructor_nullEatery_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_eateryAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jakq"
        },
        "content": "        ModelStubAcceptingEateryAdded modelStub \u003d new ModelStubAcceptingEateryAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery validEatery \u003d new EateryBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validEatery).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validEatery.getName().fullName),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(Arrays.asList(validEatery), modelStub.eateriesAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_duplicateEatery_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery validEatery \u003d new EateryBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jakq"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validEatery);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEatery(validEatery);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_EATERY, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery alice \u003d new EateryBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery bob \u003d new EateryBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jakq"
        },
        "content": "        // different eatery -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public Path getEateryListFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public void setEateryListFilePath(Path eateryListFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jakq"
        },
        "content": "        public void addEatery(Eatery eatery) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public void setEateryList(ReadOnlyEateryList eateryList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public ReadOnlyEateryList getEateryList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jakq"
        },
        "content": "        public boolean hasEatery(Eatery eatery) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jakq"
        },
        "content": "        public void deleteEatery(Eatery target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jakq"
        },
        "content": "        public void setEatery(Eatery target, Eatery editedEatery) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public void setActiveEatery(Eatery eatery) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        public Eatery getActiveEatery() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jakq"
        },
        "content": "        public ObservableList\u003cEatery\u003e getFilteredEateryList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        public ObservableList\u003cEatery\u003e getFilteredTodoList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jakq"
        },
        "content": "        public void updateFilteredEateryList(Predicate\u003cEatery\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public ObservableList\u003cReview\u003e getActiveReviews() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public void updateActiveReviews(List\u003cReview\u003e reviews) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        public boolean isMainMode() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        public void toggle() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public Path getFeedListFilePath() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public void setFeedListFilePath(Path feedListFilePath) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public void addFeed(Feed feed) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public void setFeedList(ReadOnlyFeedList newData) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public ReadOnlyFeedList getFeedList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public boolean hasFeed(Feed feed) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public void deleteFeed(Feed feed) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public void setFeed(Feed target, Feed editedFeed) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "walnads"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "walnads"
        },
        "content": "        public void setStatistics(Statistics stats) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "walnads"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "walnads"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * A Model stub that contains a single eatery."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private class ModelStubWithEatery extends ModelStub {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jakq"
        },
        "content": "        private final Eatery eatery;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jakq"
        },
        "content": "        ModelStubWithEatery(Eatery eatery) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jakq"
        },
        "content": "            requireNonNull(eatery);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jakq"
        },
        "content": "            this.eatery \u003d eatery;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jakq"
        },
        "content": "        public boolean hasEatery(Eatery eatery) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jakq"
        },
        "content": "            requireNonNull(eatery);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jakq"
        },
        "content": "            return this.eatery.isSameEatery(eatery);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * A Model stub that always accept the eatery being added."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private class ModelStubAcceptingEateryAdded extends ModelStub {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jakq"
        },
        "content": "        final ArrayList\u003cEatery\u003e eateriesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jakq"
        },
        "content": "        public boolean hasEatery(Eatery eatery) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jakq"
        },
        "content": "            requireNonNull(eatery);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jakq"
        },
        "content": "            return eateriesAdded.stream().anyMatch(eatery::isSameEatery);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jakq"
        },
        "content": "        public void addEatery(Eatery eatery) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jakq"
        },
        "content": "            requireNonNull(eatery);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jakq"
        },
        "content": "            eateriesAdded.add(eatery);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public ReadOnlyEateryList getEateryList() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return new EateryList();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 10,
      "ROHITREDDYBALAM": 10,
      "dvrylc": 74,
      "JunHongT": 14,
      "jakq": 38,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/AddFeedCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.Feed;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.FeedBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddFeedCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class AddFeedCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void execute_newFeed_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Feed validFeed \u003d new FeedBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEateryList(), model.getFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        expectedModel.addFeed(validFeed);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertCommandSuccess(new AddFeedCommand(validFeed), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                String.format(AddFeedCommand.MESSAGE_SUCCESS, validFeed.getName()), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void execute_duplicateFeed_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Feed feedInFeedList \u003d model.getFeedList().getFeedList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertCommandFailure(new AddFeedCommand(feedInFeedList), model, AddFeedCommand.MESSAGE_DUPLICATE_FEED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 46
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/AddTagCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_NO_PREFIX_NICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.showEateryAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.EateryBuilder.DEFAULT_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_SECOND_EATERY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.AddTagCommand.EditEateryDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.EateryList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EateryBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class AddTagCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void execute_allFieldsSpecifiedFilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Eatery editedEatery \u003d new EateryBuilder().withTags(VALID_TAG_NO_PREFIX_NICE, DEFAULT_TAG).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String expectedMessage \u003d String.format(AddTagCommand.ADD_TAG_SUCCESS, editedEatery);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EditEateryDescriptor editEateryDescriptor \u003d new EditEateryDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        tags.add(new Tag(VALID_TAG_NO_PREFIX_NICE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        editEateryDescriptor.addTags(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        AddTagCommand addTagCommand \u003d new AddTagCommand(INDEX_FIRST_EATERY, editEateryDescriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                new ModelManager(new EateryList(model.getEateryList()), model.getFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        expectedModel.setEatery(model.getFilteredEateryList().get(INDEX_FIRST_EATERY.getZeroBased()), editedEatery);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertCommandSuccess(addTagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void execute_invalidEateryIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        showEateryAtIndex(model, INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EATERY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of eatery list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEateryList().getEateryList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        AddTagCommand addTagCommand \u003d new AddTagCommand(outOfBoundIndex, new EditEateryDescriptor());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertCommandFailure(addTagCommand, model, Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 62
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.EateryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void execute_emptyEateryList_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void execute_nonEmptyEateryList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        expectedModel.setEateryList(new EateryList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 33
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/CloseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jakq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jakq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.showEateryAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_SECOND_EATERY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EateryBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": " * {@code CloseCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class CloseCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery closedEatery \u003d new EateryBuilder().withTags(\"fastfood\").withIsOpen(false).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": "        CloseCommand closeCommand \u003d new CloseCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String expectedMessage \u003d String.format(CloseCommand.MESSAGE_CLOSED_EATERY_SUCCESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                closedEatery.getName().fullName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getEateryList(), model.getFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jakq"
        },
        "content": "        expectedModel.setEatery(model.getFilteredEateryList().get(INDEX_FIRST_EATERY.getZeroBased()), closedEatery);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandSuccess(closeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEateryList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jakq"
        },
        "content": "        CloseCommand closeCommand \u003d new CloseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandFailure(closeCommand, model, Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": "        showEateryAtIndex(model, INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "        model.getFilteredEateryList().get(INDEX_FIRST_EATERY.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery closedEatery \u003d new EateryBuilder().withTags(\"fastfood\").withIsOpen(false).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": "        CloseCommand closeCommand \u003d new CloseCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String expectedMessage \u003d String.format(CloseCommand.MESSAGE_CLOSED_EATERY_SUCCESS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                closedEatery.getName().fullName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getEateryList(), model.getFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jakq"
        },
        "content": "        expectedModel.setEatery(model.getFilteredEateryList().get(INDEX_FIRST_EATERY.getZeroBased()), closedEatery);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandSuccess(closeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jakq"
        },
        "content": "        showEateryAtIndex(model, INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EATERY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of eatery list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEateryList().getEateryList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jakq"
        },
        "content": "        CloseCommand closeCommand \u003d new CloseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandFailure(closeCommand, model, Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jakq"
        },
        "content": "        CloseCommand closeFirstCommand \u003d new CloseCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jakq"
        },
        "content": "        CloseCommand closeSecondCommand \u003d new CloseCommand(INDEX_SECOND_EATERY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jakq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertTrue(closeFirstCommand.equals(closeFirstCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jakq"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jakq"
        },
        "content": "        CloseCommand closeFirstCommandCopy \u003d new CloseCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertTrue(closeFirstCommand.equals(closeFirstCommandCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jakq"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertFalse(closeFirstCommand.equals(1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jakq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertFalse(closeFirstCommand.equals(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jakq"
        },
        "content": "        // different eatery -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertFalse(closeFirstCommand.equals(closeSecondCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jakq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 25,
      "JunHongT": 2,
      "jakq": 77
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false, false).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 5,
      "dvrylc": 1,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_USER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.EateryList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EditEateryDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String VALID_NAME_NO_PREFIX_MAC \u003d \"Mcdonald\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String VALID_NAME_NO_PREFIX_KFC \u003d \"Kentucky Fried Chicken\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final boolean VALID_ISOPEN_MAC \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final boolean VALID_ISOPEN_KFC \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String VALID_ADDRESS_NO_PREFIX_MAC \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String VALID_ADDRESS_NO_PREFIX_KFC \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String VALID_TAG_NO_PREFIX_CHEAP \u003d \"cheap\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String VALID_TAG_NO_PREFIX_NICE \u003d \"nice\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String VALID_CATEGORY_NO_PREFIX \u003d \"Western\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static final String VALID_FILE_NO_PREFIX_JOHN \u003d \"john.json\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static final String VALID_FILE_NO_PREFIX_ALICE \u003d \"alice.json\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String VALID_NAME_WITH_PREFIX_KFC \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_NO_PREFIX_KFC;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String VALID_NAME_WITH_PREFIX_MAC \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_NO_PREFIX_MAC;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String VALID_ADDRESS_WITH_PREFIX_KFC \u003d \" \" + PREFIX_ADDRESS + \" \" + VALID_ADDRESS_NO_PREFIX_KFC;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String VALID_ADDRESS_WITH_PREFIX_MAC \u003d \" \" + PREFIX_ADDRESS + \" \" + VALID_ADDRESS_NO_PREFIX_MAC;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String VALID_TAG_WITH_PREFIX_CHEAP \u003d \" \" + PREFIX_TAG + \" \" + VALID_TAG_NO_PREFIX_CHEAP;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String VALID_TAG_WITH_PREFIX_NICE \u003d \" \" + PREFIX_TAG + \" \" + VALID_TAG_NO_PREFIX_NICE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String VALID_CATEGORY_WITH_PREFIX \u003d \" \" + PREFIX_CATEGORY + \" \" + VALID_CATEGORY_NO_PREFIX;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static final String VALID_FILE_WITH_PREFIX_JOHN \u003d \" \" + PREFIX_USER + \" \" + VALID_FILE_NO_PREFIX_JOHN;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String VALID_NAME_EATBOOK \u003d \"Eatbook\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String VALID_NAME_SETHLUI \u003d \"Seth Lui\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String VALID_ADDRESS_EATBOOK \u003d \"https://eatbook.sg/feed\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String VALID_ADDRESS_SETHLUI \u003d \"https://sethlui.com/feed\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String NAME_DESC_EATBOOK \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_EATBOOK;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String ADDRESS_DESC_EATBOOK \u003d \" \" + PREFIX_ADDRESS + \" \" + VALID_ADDRESS_EATBOOK;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \" James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \" hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final String INVALID_CATEGORY_DESC \u003d \" \" + PREFIX_CATEGORY"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "            + \" _ch1nese\"; //\"_ not allowed to prefix category name and numbers not allowed in name\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final EditCommand.EditEateryDescriptor DESC_KFC;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final EditCommand.EditEateryDescriptor DESC_MAC;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        DESC_KFC \u003d new EditEateryDescriptorBuilder().withName(VALID_NAME_NO_PREFIX_KFC)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                .withAddress(VALID_ADDRESS_NO_PREFIX_KFC)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                .withTags(VALID_TAG_NO_PREFIX_CHEAP).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        DESC_MAC \u003d new EditEateryDescriptorBuilder().withName(VALID_NAME_NO_PREFIX_MAC)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                .withAddress(VALID_ADDRESS_NO_PREFIX_MAC)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                .withTags(VALID_TAG_NO_PREFIX_CHEAP, VALID_TAG_NO_PREFIX_NICE).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * - the eatery list, filtered eatery list and selected eatery in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryList expectedEateryList \u003d new EateryList(actualModel.getEateryList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jakq"
        },
        "content": "        List\u003cEatery\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredEateryList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(expectedEateryList, actualModel.getEateryList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredEateryList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the eatery at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * {@code model}\u0027s eatery list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static void showEateryAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEateryList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery eatery \u003d model.getFilteredEateryList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jakq"
        },
        "content": "        final String[] splitName \u003d eatery.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jakq"
        },
        "content": "        model.updateFilteredEateryList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(1, model.getFilteredEateryList().size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 2,
      "dvrylc": 25,
      "JunHongT": 24,
      "jakq": 13,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.showEateryAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_SECOND_EATERY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery eateryToDelete \u003d model.getFilteredEateryList().get(INDEX_FIRST_EATERY.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jakq"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EATERY_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                eateryToDelete.getName().fullName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getEateryList(), model.getFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": "        expectedModel.deleteEatery(eateryToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEateryList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "        showEateryAtIndex(model, INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery eateryToDelete \u003d model.getFilteredEateryList().get(INDEX_FIRST_EATERY.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EATERY_SUCCESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                eateryToDelete.getName().fullName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getEateryList(), model.getFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jakq"
        },
        "content": "        expectedModel.deleteEatery(eateryToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jakq"
        },
        "content": "        showNoEatery(expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jakq"
        },
        "content": "        showEateryAtIndex(model, INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EATERY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of eatery list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEateryList().getEateryList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jakq"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jakq"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_EATERY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jakq"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jakq"
        },
        "content": "        // different eatery -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private void showNoEatery(Model model) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jakq"
        },
        "content": "        model.updateFilteredEateryList(p -\u003e false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertTrue(model.getFilteredEateryList().isEmpty());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 24,
      "jakq": 20,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/DeleteFeedCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.Feed;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code DeleteFeedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class DeleteFeedCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void execute_validName_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Feed feedToDelete \u003d model.getFeedList().getFeedList().get(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        DeleteFeedCommand deleteCommand \u003d new DeleteFeedCommand(feedToDelete.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFeedCommand.MESSAGE_DELETE_FEED_SUCCESS,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                feedToDelete.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getEateryList(), model.getFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        expectedModel.deleteFeed(feedToDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void execute_invalidName_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String invalidName \u003d \"Invalid Name\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        DeleteFeedCommand deleteCommand \u003d new DeleteFeedCommand(invalidName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertCommandFailure(deleteCommand, model, DeleteFeedCommand.MESSAGE_MISSING_FEED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 43
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.DESC_KFC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.DESC_MAC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_NO_PREFIX_KFC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.showEateryAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_SECOND_EATERY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.EditCommand.EditEateryDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.EateryList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EateryBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EditEateryDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery editedEatery \u003d new EateryBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": "        EditEateryDescriptor descriptor \u003d new EditEateryDescriptorBuilder(editedEatery).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jakq"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EATERY, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EATERY_SUCCESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                editedEatery.getName().fullName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                new ModelManager(new EateryList(model.getEateryList()), model.getFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jakq"
        },
        "content": "        expectedModel.setEatery(model.getFilteredEateryList().get(INDEX_FIRST_EATERY.getZeroBased()), editedEatery);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EATERY, new EditEateryDescriptor());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery editedEatery \u003d model.getFilteredEateryList().get(INDEX_FIRST_EATERY.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EATERY_SUCCESS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                editedEatery.getName().fullName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                new ModelManager(new EateryList(model.getEateryList()), model.getFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_duplicateEateryUnfilteredList_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery firstEatery \u003d model.getFilteredEateryList().get(INDEX_FIRST_EATERY.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jakq"
        },
        "content": "        EditEateryDescriptor descriptor \u003d new EditEateryDescriptorBuilder(firstEatery).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jakq"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_EATERY, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_EATERY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_duplicateEateryFilteredList_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jakq"
        },
        "content": "        showEateryAtIndex(model, INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // edit eatery in filtered list into a duplicate in eatery list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Eatery eateryInList \u003d model.getEateryList().getEateryList().get(INDEX_SECOND_EATERY.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jakq"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EATERY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jakq"
        },
        "content": "                new EditEateryDescriptorBuilder(eateryInList).build());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_EATERY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_invalidEateryIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEateryList().size() + 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        EditEateryDescriptor descriptor \u003d new EditEateryDescriptorBuilder().withName(VALID_NAME_NO_PREFIX_KFC).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * but smaller than size of eatery list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_invalidEateryIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jakq"
        },
        "content": "        showEateryAtIndex(model, INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EATERY;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of eatery list"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEateryList().getEateryList().size());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                new EditEateryDescriptorBuilder().withName(VALID_NAME_NO_PREFIX_KFC).build());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_EATERY, DESC_MAC);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        EditEateryDescriptor copyDescriptor \u003d new EditEateryDescriptor(DESC_MAC);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jakq"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_EATERY, copyDescriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_EATERY, DESC_MAC)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_EATERY, DESC_KFC)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 36,
      "JunHongT": 6,
      "jakq": 24,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/EditEateryDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.DESC_KFC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.DESC_MAC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ADDRESS_NO_PREFIX_KFC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_CATEGORY_NO_PREFIX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_NO_PREFIX_KFC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_NO_PREFIX_CHEAP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.EditCommand.EditEateryDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EditEateryDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class EditEateryDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        EditEateryDescriptor descriptorWithSameValues \u003d new EditEateryDescriptor(DESC_MAC);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(DESC_MAC.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(DESC_MAC.equals(DESC_MAC));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(DESC_MAC.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(DESC_MAC.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(DESC_MAC.equals(DESC_KFC));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        EditEateryDescriptor editedAmy \u003d new EditEateryDescriptorBuilder(DESC_MAC)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                .withName(VALID_NAME_NO_PREFIX_KFC).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(DESC_MAC.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        editedAmy \u003d new EditEateryDescriptorBuilder(DESC_MAC).withAddress(VALID_ADDRESS_NO_PREFIX_KFC).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(DESC_MAC.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "        // different category -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        editedAmy \u003d new EditEateryDescriptorBuilder(DESC_MAC).withCategory(VALID_CATEGORY_NO_PREFIX).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(DESC_MAC.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        editedAmy \u003d new EditEateryDescriptorBuilder(DESC_MAC).withTags(VALID_TAG_NO_PREFIX_CHEAP).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(DESC_MAC.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 2,
      "dvrylc": 9,
      "JunHongT": 15,
      "jakq": 1,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 2,
      "dvrylc": 5,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_EATERIES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.KFC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.MAC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.TEXAS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.EateryAttributesContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryAttributesContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                new EateryAttributesContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryAttributesContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                new EateryAttributesContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "        // different eatery -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_zeroKeywords_noEateryFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jakq"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EATERIES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryAttributesContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jakq"
        },
        "content": "        expectedModel.updateFilteredEateryList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredEateryList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_multipleKeywords_multipleEateriesFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jakq"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EATERIES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryAttributesContainsKeywordsPredicate predicate \u003d preparePredicate(\"McDonald Kentucky Texas\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": "        expectedModel.updateFilteredEateryList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(Arrays.asList(MAC, KFC, TEXAS), model.getFilteredEateryList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Parses {@code userInput} into a {@code EateryAttributesContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private EateryAttributesContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new EateryAttributesContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 23,
      "JunHongT": 1,
      "jakq": 8,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 1,
      "dvrylc": 5,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.showEateryAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getEateryList(), model.getFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jakq"
        },
        "content": "        showEateryAtIndex(model, INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 11,
      "jakq": 1,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/LoadCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_FILE_NO_PREFIX_ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_FILE_NO_PREFIX_JOHN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jakq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class LoadCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private static final Path FILE_PATH \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"LoadCommandTest\", VALID_FILE_NO_PREFIX_JOHN);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": "        UserPrefs userPrefsTest \u003d new UserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        userPrefsTest.setEateryListFilePath(FILE_PATH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), userPrefsTest);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_duplicateFileLoad_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": "        LoadCommand command \u003d new LoadCommand(FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandFailure(command, model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                String.format(LoadCommand.MESSAGE_ALREADY_LOADED, model.getEateryListFilePath()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_fileLoadNotFound_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Path nonExistentFile \u003d Paths.get(\"src\", \"test\", \"data\", \"LoadCommandTest\", \"nonExistent.json\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jakq"
        },
        "content": "        LoadCommand command \u003d new LoadCommand(nonExistentFile);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandFailure(command, model,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jakq"
        },
        "content": "                String.format(LoadCommand.MESSAGE_PROFILE_NOT_FOUND, nonExistentFile));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_fileLoad_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Path newPath \u003d Paths.get(\"src\", \"test\", \"data\", \"LoadCommandTest\", VALID_FILE_NO_PREFIX_ALICE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        userPrefs.setEateryListFilePath(newPath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getEateryList(), model.getFeedList(), userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jakq"
        },
        "content": "        LoadCommand command \u003d new LoadCommand(newPath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandSuccess(command, model,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jakq"
        },
        "content": "                String.format(LoadCommand.MESSAGE_SUCCESS_LOADED, newPath), expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jakq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 15,
      "jakq": 48
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/ModeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class ModeCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getEateryList(), model.getFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void execute_listIsNotFiltered_modeChanged() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertCommandSuccess(new ModeCommand(), model,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                String.format(ModeCommand.MESSAGE_SUCCESS, \"todo mode\"), expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertCommandSuccess(new ModeCommand(), model,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                String.format(ModeCommand.MESSAGE_SUCCESS, \"main mode\"), expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 33
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/RemoveTagCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_NO_PREFIX_NICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.showEateryAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.EateryBuilder.DEFAULT_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_SECOND_EATERY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.RemoveTagCommand.EditEateryDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.EateryList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EateryBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class RemoveTagCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void execute_allFieldsSpecifiedFilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Eatery editedEatery \u003d new EateryBuilder().withTags(DEFAULT_TAG).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String expectedMessage \u003d String.format(RemoveTagCommand.REMOVE_TAG_SUCCESS, editedEatery);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EditEateryDescriptor editEateryDescriptor \u003d new EditEateryDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        tags.add(new Tag(VALID_TAG_NO_PREFIX_NICE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        editEateryDescriptor.addTags(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        RemoveTagCommand removeTagCommand \u003d new RemoveTagCommand(INDEX_FIRST_EATERY, editEateryDescriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                new ModelManager(new EateryList(model.getEateryList()), model.getFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        expectedModel.setEatery(model.getFilteredEateryList().get(INDEX_FIRST_EATERY.getZeroBased()), editedEatery);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertCommandSuccess(removeTagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void execute_invalidEateryIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        showEateryAtIndex(model, INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EATERY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of eatery list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEateryList().getEateryList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        RemoveTagCommand removeTagCommand \u003d new RemoveTagCommand(outOfBoundIndex, new EditEateryDescriptor());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertCommandFailure(removeTagCommand, model, Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 62
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/ReopenCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jakq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jakq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.showEateryAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalCloseEateryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_SECOND_EATERY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EateryBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": " * {@code ReopenCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class ReopenCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCloseEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery reopenedEatery \u003d new EateryBuilder().withTags(\"fastfood\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": "        ReopenCommand reopenCommand \u003d new ReopenCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String expectedMessage \u003d String.format(ReopenCommand.MESSAGE_REOPENED_EATERY_SUCCESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                reopenedEatery.getName().fullName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getEateryList(), model.getFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jakq"
        },
        "content": "        expectedModel.setEatery(model.getFilteredEateryList().get(INDEX_FIRST_EATERY.getZeroBased()), reopenedEatery);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandSuccess(reopenCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEateryList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jakq"
        },
        "content": "        ReopenCommand reopenCommand \u003d new ReopenCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandFailure(reopenCommand, model, Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": "        showEateryAtIndex(model, INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "        model.getFilteredEateryList().get(INDEX_FIRST_EATERY.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery reopenedEatery \u003d new EateryBuilder().withTags(\"fastfood\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": "        ReopenCommand reopenCommand \u003d new ReopenCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String expectedMessage \u003d String.format(ReopenCommand.MESSAGE_REOPENED_EATERY_SUCCESS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                reopenedEatery.getName().fullName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getEateryList(), model.getFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jakq"
        },
        "content": "        expectedModel.setEatery(model.getFilteredEateryList().get(INDEX_FIRST_EATERY.getZeroBased()), reopenedEatery);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandSuccess(reopenCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jakq"
        },
        "content": "        showEateryAtIndex(model, INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EATERY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of eatery list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEateryList().getEateryList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jakq"
        },
        "content": "        ReopenCommand reopenCommand \u003d new ReopenCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertCommandFailure(reopenCommand, model, Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jakq"
        },
        "content": "        ReopenCommand reopenFirstCommand \u003d new ReopenCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jakq"
        },
        "content": "        ReopenCommand reopenSecondCommand \u003d new ReopenCommand(INDEX_SECOND_EATERY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jakq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertTrue(reopenFirstCommand.equals(reopenFirstCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jakq"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jakq"
        },
        "content": "        ReopenCommand reopenFirstCommandCopy \u003d new ReopenCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertTrue(reopenFirstCommand.equals(reopenFirstCommandCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jakq"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertFalse(reopenFirstCommand.equals(1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jakq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertFalse(reopenFirstCommand.equals(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jakq"
        },
        "content": "        // different eatery -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertFalse(reopenFirstCommand.equals(reopenSecondCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jakq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 25,
      "JunHongT": 2,
      "jakq": 77
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/ReviewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.showEateryAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_SECOND_EATERY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalReviews.REVIEW_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalReviews.REVIEW_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class ReviewCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEateryList().size() + 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        ReviewCommand reviewCommand \u003d new ReviewCommand(outOfBoundIndex, REVIEW_1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertCommandFailure(reviewCommand, model, Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        showEateryAtIndex(model, INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EATERY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of eatery list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEateryList().getEateryList().size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        ReviewCommand reviewCommand \u003d new ReviewCommand(outOfBoundIndex, REVIEW_2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertCommandFailure(reviewCommand, model, Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        ReviewCommand reviewFirst \u003d new ReviewCommand(INDEX_FIRST_EATERY, REVIEW_1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        ReviewCommand reviewSecond \u003d new ReviewCommand(INDEX_SECOND_EATERY, REVIEW_1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //same object return true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertTrue(reviewFirst.equals(reviewFirst));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //null returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertFalse(reviewFirst.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //different type returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertFalse(reviewFirst.equals(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //different eatery returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertFalse(reviewFirst.equals(reviewSecond));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 47,
      "dvrylc": 17
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/SaveTodoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_SECOND_EATERY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " * Contains integration tests and unit tests for"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " * {@code SaveTodoCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class SaveTodoCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (model.isMainMode()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            model.toggle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery eateryToSave \u003d model.getFilteredTodoList().get(INDEX_FIRST_EATERY.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        SaveTodoCommand saveTodoCommand \u003d new SaveTodoCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getEateryList(), model.getFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        expectedModel.toggle();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        expectedModel.deleteEatery(eateryToSave);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String name \u003d eateryToSave.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String address \u003d eateryToSave.getAddress().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder tags \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        for (Tag tag : eateryToSave.getTags()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            tags.append(PREFIX_TAG + \" \" + tag.getName() + \" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String pendingCommand \u003d String.format(\"add %s %s %s %s %s %s\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            PREFIX_NAME, name, PREFIX_ADDRESS, address, tags.toString().trim(), PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String expectedMessage \u003d SaveTodoCommand.MESSAGE_REMINDER_TO_USER + pendingCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertCommandSuccess(saveTodoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTodoList().size() + 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        SaveTodoCommand saveTodoCommand \u003d new SaveTodoCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertCommandFailure(saveTodoCommand, model, Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void execute_invalidMode_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        SaveTodoCommand saveTodoCommand \u003d new SaveTodoCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        model.toggle();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertCommandFailure(saveTodoCommand, model, SaveTodoCommand.MESSAGE_INVALID_MODE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        SaveTodoCommand saveFirstCommand \u003d new SaveTodoCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        SaveTodoCommand saveSecondCommand \u003d new SaveTodoCommand(INDEX_SECOND_EATERY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(saveFirstCommand.equals(saveFirstCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        SaveTodoCommand saveFirstCommandCopy \u003d new SaveTodoCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(saveFirstCommand.equals(saveFirstCommandCopy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(saveFirstCommand.equals(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(saveFirstCommand.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // different eatery -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(saveFirstCommand.equals(saveSecondCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 22,
      "JunHongT": 81
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/ShowCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_SECOND_EATERY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code ShowCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class ShowCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Eatery eateryToShow \u003d model.getFilteredEateryList().get(INDEX_FIRST_EATERY.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ShowCommand showCommand \u003d new ShowCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                String.format(ShowCommand.MESSAGE_SHOW_EATERY_SUCCESS, eateryToShow.getName()), eateryToShow);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertCommandSuccess(showCommand, model, commandResult, model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEateryList().size() + 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ShowCommand showCommand \u003d new ShowCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertCommandFailure(showCommand, model, Messages.MESSAGE_INVALID_EATERY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ShowCommand showFirstCommand \u003d new ShowCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ShowCommand showSecondCommand \u003d new ShowCommand(INDEX_SECOND_EATERY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertTrue(showFirstCommand.equals(showFirstCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ShowCommand showFirstCommandCopy \u003d new ShowCommand(INDEX_FIRST_EATERY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertTrue(showFirstCommand.equals(showFirstCommandCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(showFirstCommand.equals(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(showFirstCommand.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // different eatery -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(showFirstCommand.equals(showSecondCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 67
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/commands/StatsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalReviewEateryList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class StatsCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void execute_hasReviews_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalReviewEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertCommandSuccess(new StatsCommand(true), model, StatsCommand.MESSAGE_STATS_SUCCESS, model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void execute_noReviews_throwsCommandException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertCommandFailure(new StatsCommand(true), model, StatsCommand.MESSAGE_STATS_ERROR_NODATA);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void execute_wrongMode_throwsCommandException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalOpenEateryList(), getTypicalFeedList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertCommandFailure(new StatsCommand(false), model, StatsCommand.MESSAGE_STATS_ERROR_WRONGMODE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 33
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ADDRESS_NO_PREFIX_KFC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ADDRESS_WITH_PREFIX_KFC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ADDRESS_WITH_PREFIX_MAC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_CATEGORY_WITH_PREFIX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_NO_PREFIX_KFC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_WITH_PREFIX_KFC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_WITH_PREFIX_MAC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_NO_PREFIX_CHEAP;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_NO_PREFIX_NICE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_WITH_PREFIX_CHEAP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_WITH_PREFIX_NICE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.KENTUCKY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.MCDONALD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Category;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EateryBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery expectedEatery \u003d new EateryBuilder(MCDONALD).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_NAME_WITH_PREFIX_MAC"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_ADDRESS_WITH_PREFIX_MAC + VALID_CATEGORY_WITH_PREFIX"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_TAG_WITH_PREFIX_CHEAP, new AddCommand(expectedEatery));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseSuccess(parser, VALID_NAME_WITH_PREFIX_KFC + VALID_NAME_WITH_PREFIX_MAC"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_ADDRESS_WITH_PREFIX_MAC + VALID_CATEGORY_WITH_PREFIX"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_TAG_WITH_PREFIX_CHEAP, new AddCommand(expectedEatery));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseSuccess(parser, VALID_NAME_WITH_PREFIX_MAC + VALID_ADDRESS_WITH_PREFIX_KFC"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_ADDRESS_WITH_PREFIX_MAC + VALID_CATEGORY_WITH_PREFIX"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_TAG_WITH_PREFIX_CHEAP, new AddCommand(expectedEatery));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery expectedEateryMultipleTags \u003d new EateryBuilder(MCDONALD).withTags(VALID_TAG_NO_PREFIX_CHEAP,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                VALID_TAG_NO_PREFIX_NICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseSuccess(parser, VALID_NAME_WITH_PREFIX_MAC + VALID_ADDRESS_WITH_PREFIX_MAC"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_CATEGORY_WITH_PREFIX"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_TAG_WITH_PREFIX_CHEAP + VALID_TAG_WITH_PREFIX_NICE, new AddCommand(expectedEateryMultipleTags));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery expectedEatery \u003d new EateryBuilder(KENTUCKY).withTags().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseSuccess(parser, VALID_NAME_WITH_PREFIX_KFC + VALID_ADDRESS_WITH_PREFIX_KFC"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_CATEGORY_WITH_PREFIX,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": "                new AddCommand(expectedEatery));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE_MAIN);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_NO_PREFIX_KFC + VALID_ADDRESS_WITH_PREFIX_KFC,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_WITH_PREFIX_KFC + VALID_ADDRESS_NO_PREFIX_KFC,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_NO_PREFIX_KFC + VALID_ADDRESS_NO_PREFIX_KFC,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + VALID_ADDRESS_WITH_PREFIX_KFC + VALID_CATEGORY_WITH_PREFIX"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_TAG_WITH_PREFIX_CHEAP + VALID_TAG_WITH_PREFIX_NICE, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_WITH_PREFIX_MAC + INVALID_ADDRESS_DESC + VALID_CATEGORY_WITH_PREFIX"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_TAG_WITH_PREFIX_NICE + VALID_TAG_WITH_PREFIX_CHEAP, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "walnads"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_WITH_PREFIX_MAC + VALID_ADDRESS_WITH_PREFIX_MAC + INVALID_CATEGORY_DESC"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_TAG_WITH_PREFIX_CHEAP + VALID_TAG_WITH_PREFIX_NICE, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_WITH_PREFIX_MAC + VALID_ADDRESS_WITH_PREFIX_MAC"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_CATEGORY_WITH_PREFIX"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_WITH_PREFIX_NICE, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_ADDRESS_DESC + VALID_CATEGORY_WITH_PREFIX,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + VALID_NAME_WITH_PREFIX_KFC"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_ADDRESS_WITH_PREFIX_KFC + VALID_CATEGORY_WITH_PREFIX + VALID_TAG_WITH_PREFIX_NICE"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_TAG_WITH_PREFIX_CHEAP,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE_MAIN));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 2,
      "dvrylc": 30,
      "JunHongT": 36,
      "jakq": 2,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/AddFeedCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.ADDRESS_DESC_EATBOOK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.NAME_DESC_EATBOOK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ADDRESS_EATBOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_EATBOOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.AddFeedCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.Feed;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.FeedBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class AddFeedCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private AddFeedCommandParser parser \u003d new AddFeedCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Feed expectedFeed \u003d new FeedBuilder().withName(VALID_NAME_EATBOOK).withAddress(VALID_ADDRESS_EATBOOK).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EATBOOK + ADDRESS_DESC_EATBOOK, new AddFeedCommand(expectedFeed));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFeedCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_EATBOOK + ADDRESS_DESC_EATBOOK, expectedMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_EATBOOK + VALID_ADDRESS_EATBOOK, expectedMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_EATBOOK + VALID_ADDRESS_EATBOOK, expectedMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 39
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/AddTagCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_NO_PREFIX_NICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_WITH_PREFIX_NICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.AddTagCommand.EditEateryDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class AddTagCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private AddTagCommandParser parser \u003d new AddTagCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "        EditEateryDescriptor editEateryDescriptor \u003d new EditEateryDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "        tags.add(new Tag(VALID_TAG_NO_PREFIX_NICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "        editEateryDescriptor.addTags(tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertParseSuccess(parser, \"1\" + VALID_TAG_WITH_PREFIX_NICE, new AddTagCommand(targetIndex,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "                editEateryDescriptor));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void parse_tagFieldsMissing_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "        // eatery just remains the same"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "        EditEateryDescriptor editEateryDescriptor \u003d new EditEateryDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "        editEateryDescriptor.addTags(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertParseSuccess(parser, \"1\", new AddTagCommand(targetIndex,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "                editEateryDescriptor));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void parse_compulsoryFieldsMissing_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "        // missing index"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertParseFailure(parser, VALID_TAG_WITH_PREFIX_NICE, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "                AddTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 44,
      "dvrylc": 11
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/AddTodoCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ADDRESS_NO_PREFIX_KFC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ADDRESS_WITH_PREFIX_KFC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ADDRESS_WITH_PREFIX_MAC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_CATEGORY_WITH_PREFIX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_NO_PREFIX_KFC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_WITH_PREFIX_KFC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_WITH_PREFIX_MAC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_NO_PREFIX_CHEAP;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_NO_PREFIX_NICE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_WITH_PREFIX_CHEAP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_WITH_PREFIX_NICE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.KENTUCKY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.MCDONALD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.TodoEateryBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class AddTodoCommandParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private AddTodoCommandParser parser \u003d new AddTodoCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery expectedEatery \u003d new TodoEateryBuilder(MCDONALD).withTags(VALID_TAG_NO_PREFIX_CHEAP).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_NAME_WITH_PREFIX_MAC"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_ADDRESS_WITH_PREFIX_MAC + VALID_TAG_WITH_PREFIX_CHEAP, new AddCommand(expectedEatery));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseSuccess(parser, VALID_NAME_WITH_PREFIX_KFC + VALID_NAME_WITH_PREFIX_MAC"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_ADDRESS_WITH_PREFIX_MAC + VALID_TAG_WITH_PREFIX_CHEAP, new AddCommand(expectedEatery));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseSuccess(parser, VALID_NAME_WITH_PREFIX_MAC + VALID_ADDRESS_WITH_PREFIX_KFC"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_ADDRESS_WITH_PREFIX_MAC + VALID_TAG_WITH_PREFIX_CHEAP, new AddCommand(expectedEatery));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery expectedEateryMultipleTags \u003d new TodoEateryBuilder(MCDONALD).withTags(VALID_TAG_NO_PREFIX_CHEAP,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                VALID_TAG_NO_PREFIX_NICE).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseSuccess(parser, VALID_NAME_WITH_PREFIX_MAC + VALID_ADDRESS_WITH_PREFIX_MAC"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_TAG_WITH_PREFIX_CHEAP + VALID_TAG_WITH_PREFIX_NICE, new AddCommand(expectedEateryMultipleTags));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery expectedEatery \u003d new TodoEateryBuilder(KENTUCKY).withTags().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseSuccess(parser, VALID_NAME_WITH_PREFIX_KFC + VALID_ADDRESS_WITH_PREFIX_KFC,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                new AddCommand(expectedEatery));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE_TODO);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_NO_PREFIX_KFC + VALID_ADDRESS_WITH_PREFIX_KFC,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_WITH_PREFIX_KFC + VALID_ADDRESS_NO_PREFIX_KFC,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_NO_PREFIX_KFC + VALID_ADDRESS_NO_PREFIX_KFC,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + VALID_ADDRESS_WITH_PREFIX_KFC"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_TAG_WITH_PREFIX_CHEAP, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_WITH_PREFIX_KFC + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_TAG_WITH_PREFIX_CHEAP, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_WITH_PREFIX_KFC"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_ADDRESS_WITH_PREFIX_KFC"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_CATEGORY_WITH_PREFIX"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_TAG_WITH_PREFIX_CHEAP,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE_TODO));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_WITH_PREFIX_KFC + VALID_ADDRESS_WITH_PREFIX_KFC"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_WITH_PREFIX_CHEAP, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + VALID_NAME_WITH_PREFIX_MAC"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + VALID_ADDRESS_WITH_PREFIX_KFC + VALID_TAG_WITH_PREFIX_CHEAP + VALID_TAG_WITH_PREFIX_NICE,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE_TODO));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 29,
      "JunHongT": 88
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/CloseCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jakq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.CloseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jakq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jakq"
        },
        "content": " * outside of the CloseCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jakq"
        },
        "content": " * same path through the CloseCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jakq"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class CloseCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private CloseCommandParser parser \u003d new CloseCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void parse_validArgs_returnsCloseCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertParseSuccess(parser, \"1\", new CloseCommand(INDEX_FIRST_EATERY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, CloseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jakq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 6,
      "jakq": 27
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_EATERY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 6,
      "jakq": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/DeleteFeedCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.NAME_DESC_EATBOOK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_EATBOOK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.DeleteFeedCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * outside of the DeleteFeedCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * same path through the DeleteFeedCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class DeleteFeedCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private DeleteFeedCommandParser parser \u003d new DeleteFeedCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void parse_validArgs_returnsDeleteFeedCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EATBOOK, new DeleteFeedCommand(VALID_NAME_EATBOOK));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_EATBOOK,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteFeedCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 34
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/EatMeParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.ADDRESS_DESC_EATBOOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.NAME_DESC_EATBOOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ADDRESS_EATBOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_EATBOOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.AddFeedCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.CloseCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.DeleteFeedCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.EditCommand.EditEateryDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ModeCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ReopenCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.SaveTodoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.EateryAttributesContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.Feed;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EateryBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EateryUtil;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EditEateryDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.FeedBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class EatMeParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final EatMeParser parser \u003d new EatMeParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery eatery \u003d new EateryBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(EateryUtil.getAddCommand(eatery), true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(new AddCommand(eatery), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, true) instanceof ClearCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\", true) instanceof ClearCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EATERY.getOneBased(), true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_EATERY), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery eatery \u003d new EateryBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jakq"
        },
        "content": "        EditEateryDescriptor descriptor \u003d new EditEateryDescriptorBuilder(eatery).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + INDEX_FIRST_EATERY.getOneBased() + \" \" + EateryUtil.getEditEateryDescriptorDetails(descriptor), true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_EATERY, descriptor), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void parseCommand_close() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jakq"
        },
        "content": "        CloseCommand command \u003d (CloseCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                CloseCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EATERY.getOneBased(), true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(new CloseCommand(INDEX_FIRST_EATERY), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void parseCommand_reopen() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jakq"
        },
        "content": "        ReopenCommand command \u003d (ReopenCommand) parser.parseCommand("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jakq"
        },
        "content": "                ReopenCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EATERY.getOneBased(), true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(new ReopenCommand(INDEX_FIRST_EATERY), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, true) instanceof ExitCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", true) instanceof ExitCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand(FindCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                + keywords.stream().map(k -\u003e String.format(\"%s %s\", PREFIX_NAME, k))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                .collect(Collectors.joining(\" \")), true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(new FindCommand(new EateryAttributesContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, true) instanceof HelpCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", true) instanceof HelpCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD, true) instanceof ListCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\", true) instanceof ListCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void parseCommand_mode() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(parser.parseCommand(ModeCommand.COMMAND_WORD, true) instanceof ModeCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(parser.parseCommand(ModeCommand.COMMAND_WORD + \" 3\", true) instanceof ModeCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void parseCommand_saveTodo() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        SaveTodoCommand command \u003d (SaveTodoCommand) parser.parseCommand("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                SaveTodoCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EATERY.getOneBased(), false);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(new SaveTodoCommand(INDEX_FIRST_EATERY), command);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void parseCommand_addfeed() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Feed feed \u003d new FeedBuilder().withName(VALID_NAME_EATBOOK).withAddress(VALID_ADDRESS_EATBOOK).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        String input \u003d AddFeedCommand.COMMAND_WORD + NAME_DESC_EATBOOK + ADDRESS_DESC_EATBOOK;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        AddFeedCommand expectedCommand \u003d new AddFeedCommand(feed);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        AddFeedCommand command \u003d (AddFeedCommand) parser.parseCommand(input, true);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void parseCommand_deletefeed() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        DeleteFeedCommand command \u003d (DeleteFeedCommand) parser.parseCommand("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                DeleteFeedCommand.COMMAND_WORD + NAME_DESC_EATBOOK, true);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(new DeleteFeedCommand(VALID_NAME_EATBOOK), command);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void parseCommand_show() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ShowCommand command \u003d (ShowCommand) parser.parseCommand("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                ShowCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EATERY.getOneBased(), true);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(new ShowCommand(INDEX_FIRST_EATERY), command);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void parseCommand_stats() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(parser.parseCommand(StatsCommand.COMMAND_WORD, true) instanceof StatsCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(parser.parseCommand(StatsCommand.COMMAND_WORD , false) instanceof StatsCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            -\u003e parser.parseCommand(\"\", true));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\", true));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 6,
      "dvrylc": 66,
      "JunHongT": 29,
      "jakq": 17,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_SECOND_EATERY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_THIRD_EATERY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.EditCommand.EditEateryDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EditEateryDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.VALID_NAME_NO_PREFIX_KFC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, \"-5\" + CommandTestUtil.VALID_NAME_WITH_PREFIX_MAC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, \"0\" + CommandTestUtil.VALID_NAME_WITH_PREFIX_MAC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            + CommandTestUtil.INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            + CommandTestUtil.INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            + CommandTestUtil.INVALID_CATEGORY_DESC, Category.MESSAGE_CONSTRAINTS); // invalid category"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            + CommandTestUtil.INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            + CommandTestUtil.VALID_TAG_WITH_PREFIX_CHEAP"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            + CommandTestUtil.VALID_TAG_WITH_PREFIX_NICE + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + CommandTestUtil.VALID_TAG_WITH_PREFIX_CHEAP + TAG_EMPTY"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + CommandTestUtil.VALID_TAG_WITH_PREFIX_CHEAP, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            + TAG_EMPTY + CommandTestUtil.VALID_TAG_WITH_PREFIX_CHEAP"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            + CommandTestUtil.VALID_TAG_WITH_PREFIX_NICE, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, \"1\" + CommandTestUtil.INVALID_NAME_DESC"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + CommandTestUtil.VALID_ADDRESS_NO_PREFIX_KFC ,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EATERY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.VALID_TAG_WITH_PREFIX_NICE"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + CommandTestUtil.VALID_ADDRESS_WITH_PREFIX_KFC"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + CommandTestUtil.VALID_CATEGORY_WITH_PREFIX"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + CommandTestUtil.VALID_NAME_WITH_PREFIX_KFC"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + CommandTestUtil.VALID_TAG_WITH_PREFIX_NICE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        EditEateryDescriptor descriptor \u003d new EditEateryDescriptorBuilder()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                .withName(CommandTestUtil.VALID_NAME_NO_PREFIX_KFC)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                .withAddress(CommandTestUtil.VALID_ADDRESS_NO_PREFIX_KFC)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                .withCategory(CommandTestUtil.VALID_CATEGORY_NO_PREFIX)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_NO_PREFIX_NICE).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EATERY;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.VALID_NAME_WITH_PREFIX_KFC;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        EditEateryDescriptor descriptor \u003d new EditEateryDescriptorBuilder()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            .withName(CommandTestUtil.VALID_NAME_NO_PREFIX_KFC).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.VALID_ADDRESS_WITH_PREFIX_KFC;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        descriptor \u003d new EditEateryDescriptorBuilder().withAddress(CommandTestUtil.VALID_ADDRESS_NO_PREFIX_KFC).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "walnads"
        },
        "content": "        // category"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.VALID_CATEGORY_WITH_PREFIX;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        descriptor \u003d new EditEateryDescriptorBuilder().withCategory(CommandTestUtil.VALID_CATEGORY_NO_PREFIX).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "walnads"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.VALID_TAG_WITH_PREFIX_NICE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        descriptor \u003d new EditEateryDescriptorBuilder().withTags(CommandTestUtil.VALID_TAG_NO_PREFIX_NICE).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.VALID_ADDRESS_WITH_PREFIX_KFC"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + CommandTestUtil.VALID_TAG_WITH_PREFIX_NICE"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + CommandTestUtil.VALID_ADDRESS_WITH_PREFIX_KFC"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + CommandTestUtil.VALID_TAG_WITH_PREFIX_NICE"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + CommandTestUtil.VALID_ADDRESS_WITH_PREFIX_KFC"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + CommandTestUtil.VALID_CATEGORY_WITH_PREFIX"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + CommandTestUtil.VALID_TAG_WITH_PREFIX_CHEAP;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jakq"
        },
        "content": "        EditEateryDescriptor descriptor \u003d new EditEateryDescriptorBuilder()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                .withAddress(CommandTestUtil.VALID_ADDRESS_NO_PREFIX_KFC)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                .withCategory(CommandTestUtil.VALID_CATEGORY_NO_PREFIX)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_NO_PREFIX_NICE, CommandTestUtil.VALID_TAG_NO_PREFIX_CHEAP)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jakq"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.VALID_ADDRESS_WITH_PREFIX_KFC;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jakq"
        },
        "content": "        EditEateryDescriptor descriptor \u003d new EditEateryDescriptorBuilder()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                .withAddress(CommandTestUtil.VALID_ADDRESS_NO_PREFIX_KFC).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EATERY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jakq"
        },
        "content": "        EditEateryDescriptor descriptor \u003d new EditEateryDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 4,
      "ROHITREDDYBALAM": 1,
      "dvrylc": 17,
      "JunHongT": 53,
      "jakq": 9,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ADDRESS_NO_PREFIX_KFC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ADDRESS_NO_PREFIX_MAC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_CATEGORY_NO_PREFIX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_NO_PREFIX_KFC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_NO_PREFIX_MAC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_NO_PREFIX_CHEAP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_NO_PREFIX_NICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.EateryAttributesContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                new FindCommand(new EateryAttributesContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \" Alice \" + PREFIX_NAME + \" Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \" \" + PREFIX_NAME + \"\\n \\t Alice \\t  \" + PREFIX_NAME + \" Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void parse_validMultiArgs_returnFindCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        List\u003cString\u003e nameKeywords \u003d Arrays.asList(VALID_NAME_NO_PREFIX_MAC, VALID_NAME_NO_PREFIX_KFC);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        List\u003cString\u003e addressKeywords \u003d Arrays.asList(VALID_ADDRESS_NO_PREFIX_MAC, VALID_ADDRESS_NO_PREFIX_KFC);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        List\u003cString\u003e categoryKeywords \u003d Arrays.asList(VALID_CATEGORY_NO_PREFIX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        List\u003cString\u003e tagKeywords \u003d Arrays.asList(VALID_TAG_NO_PREFIX_CHEAP, VALID_TAG_NO_PREFIX_NICE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(new EateryAttributesContainsKeywordsPredicate("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                nameKeywords, addressKeywords, categoryKeywords, tagKeywords));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                \" \" + PREFIX_NAME + \" \" + VALID_NAME_NO_PREFIX_MAC"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                        + \" \" + PREFIX_NAME + \" \" + VALID_NAME_NO_PREFIX_KFC"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                        + \" \" + PREFIX_ADDRESS + \" \" + VALID_ADDRESS_NO_PREFIX_MAC"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                        + \" \" + PREFIX_ADDRESS + \" \" + VALID_ADDRESS_NO_PREFIX_KFC"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                        + \" \" + PREFIX_CATEGORY + \" \" + VALID_CATEGORY_NO_PREFIX"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                        + \" \" + PREFIX_TAG + \" \" + VALID_TAG_NO_PREFIX_CHEAP"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                        + \" \" + PREFIX_TAG + \" \" + VALID_TAG_NO_PREFIX_NICE,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 43,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/LoadCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_FILE_NO_PREFIX_JOHN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_FILE_WITH_PREFIX_JOHN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_USER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jakq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.LoadCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class LoadCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private LoadCommandParser parser \u003d new LoadCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Path path \u003d Paths.get(\"data\", VALID_FILE_NO_PREFIX_JOHN);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": "        LoadCommand expectedCommand \u003d new LoadCommand(path);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_FILE_WITH_PREFIX_JOHN, expectedCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void parse_noFieldsSpecified_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jakq"
        },
        "content": "        LoadCommand expectedCommand \u003d new LoadCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertParseSuccess(parser, \"\", expectedCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void parse_invalidFieldsSpecified_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": "        // invalid user specified"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertParseFailure(parser, PREFIX_USER + \" \","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoadCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 9,
      "jakq": 34
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_FILE_NO_PREFIX_JOHN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"0fish\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private static final String INVALID_REVIEW_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private static final double INVALID_REVIEW_COST_1 \u003d -2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private static final double INVALID_REVIEW_COST_2 \u003d 10001;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private static final int INVALID_REVIEW_RATING \u003d 6;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private static final double INVALID_REVIEW_RATING_2 \u003d 2.3;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private static final String VALID_CATEGORY \u003d \"Chinese\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private static final String VALID_REVIEW_DESCRIPTION \u003d \"GOOD\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private static final double VALID_REVIEW_COST \u003d 3.2;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private static final int VALID_REVIEW_RATING \u003d 4;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(INDEX_FIRST_EATERY, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(INDEX_FIRST_EATERY, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void parseCategory_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategory((String) null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void parseCategory_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategory(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void parseCategory_validValueWithoutWhitespace_returnsCategory() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(VALID_CATEGORY));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void parseCategory_validValueWithWhitespace_returnsTrimmedCategory() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String categoryWithWhitespace \u003d WHITESPACE + VALID_CATEGORY + WHITESPACE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(categoryWithWhitespace));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void parseReviewDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseReviewDescription((String) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void parseReviewDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseReviewDescription(INVALID_REVIEW_DESCRIPTION));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void parseReviewDescription_validValueWithoutWhiteSpace_returnsReviewDescription() throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String expectedReviewDescription \u003d VALID_REVIEW_DESCRIPTION;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertEquals(expectedReviewDescription, ParserUtil.parseReviewDescription(VALID_REVIEW_DESCRIPTION));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void parseReviewDescription_validValueWithWhitespace_returnsTrimmedDescription() throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String reviewDescriptionWithWhitespace \u003d WHITESPACE + VALID_REVIEW_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String expectedReviewDescription \u003d VALID_REVIEW_DESCRIPTION;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertEquals(expectedReviewDescription, ParserUtil.parseReviewDescription(reviewDescriptionWithWhitespace));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void parseReviewCost_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseReviewCost((String) null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void parseReviewCost_invalidValue1_throwsParseException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseReviewCost(String.valueOf(INVALID_REVIEW_COST_1)));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void parseReviewCost_invalidValue2_throwsParseException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseReviewCost(String.valueOf(INVALID_REVIEW_COST_2)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void parseReviewCost_validValueWithoutWhiteSpace_returnsReviewCost() throws ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        double expectedReviewCost \u003d VALID_REVIEW_COST;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertEquals(expectedReviewCost, ParserUtil.parseReviewCost(String.valueOf(VALID_REVIEW_COST)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void parseReviewCost_validValueWithWhitespace_returnsTrimmedCost() throws ParseException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String reviewCostWithWhitespace \u003d WHITESPACE + VALID_REVIEW_COST + WHITESPACE;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        double expectedReviewCost \u003d VALID_REVIEW_COST;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertEquals(expectedReviewCost, ParserUtil.parseReviewCost(reviewCostWithWhitespace));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void parseReviewRating_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseReviewRating((String) null));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void parseReviewRating_invalidValue1_throwsParseException() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseReviewRating(String.valueOf(INVALID_REVIEW_RATING)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void parseReviewEating_invalidValue2_throwsParseException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseReviewRating(String.valueOf(INVALID_REVIEW_RATING_2)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void parseReviewRating_validValueWithoutWhiteSpace_returnsReviewRating() throws ParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        double expectedReviewRating \u003d VALID_REVIEW_RATING;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertEquals(expectedReviewRating, ParserUtil.parseReviewRating(String.valueOf(VALID_REVIEW_RATING)));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void parseFile_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFile(null));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void parseFile_withValidName_returnsUnchanged() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(VALID_FILE_NO_PREFIX_JOHN, ParserUtil.parseFile(VALID_FILE_NO_PREFIX_JOHN));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void parseFile_withInvalidName_returnsFormatted() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(VALID_FILE_NO_PREFIX_JOHN, ParserUtil.parseFile(\"john\"));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 25,
      "ROHITREDDYBALAM": 80,
      "dvrylc": 10,
      "jakq": 17,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/RemoveTagCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_NO_PREFIX_NICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_WITH_PREFIX_NICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.RemoveTagCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.RemoveTagCommand.EditEateryDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class RemoveTagCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private RemoveTagCommandParser parser \u003d new RemoveTagCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "        RemoveTagCommand.EditEateryDescriptor editEateryDescriptor \u003d new EditEateryDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "        tags.add(new Tag(VALID_TAG_NO_PREFIX_NICE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "        editEateryDescriptor.addTags(tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertParseSuccess(parser, \"1\" + VALID_TAG_WITH_PREFIX_NICE, new RemoveTagCommand(targetIndex,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "                editEateryDescriptor));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void parse_tagFieldsMissing_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "        // eatery just remains the same"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "        RemoveTagCommand.EditEateryDescriptor editEateryDescriptor \u003d new RemoveTagCommand.EditEateryDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "        editEateryDescriptor.addTags(tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertParseSuccess(parser, \"1\", new RemoveTagCommand(targetIndex,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "                editEateryDescriptor));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void parse_compulsoryFieldsMissing_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "        // missing index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertParseFailure(parser, VALID_TAG_WITH_PREFIX_NICE, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "                RemoveTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 45,
      "dvrylc": 11
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/ReopenCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jakq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ReopenCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jakq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jakq"
        },
        "content": " * outside of the ReopenCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jakq"
        },
        "content": " * same path through the ReopenCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jakq"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class ReopenCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private ReopenCommandParser parser \u003d new ReopenCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void parse_validArgs_returnsReopenCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ReopenCommand(INDEX_FIRST_EATERY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReopenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jakq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 6,
      "jakq": 27
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/ReviewCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ReviewCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class ReviewCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String VALID_REVIEW_DESCRIPTION_NO_PREFIX_1 \u003d \"good\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String VALID_REVIEW_DESCRIPTION_WITH_PREFIX_1 \u003d \"\\\\d good\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String VALID_REVIEW_COST_NO_PREFIX_1 \u003d \"3\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String VALID_REVIEW_COST_WITH_PREFIX_1 \u003d \"\\\\p 3\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String VALID_REVIEW_RATING_NO_PREFIX_1 \u003d \"4\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String VALID_REVIEW_RATING_WITH_PREFIX_1 \u003d \"\\\\r 4\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String VALID_REVIEW_DATE_NO_PREFIX_1 \u003d \"22/11/2019\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String VALID_REVIEW_DATE_WITH_PREFIX \u003d \"\\\\w 22/11/2019\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReviewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private ReviewCommandParser parser \u003d new ReviewCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertParseFailure(parser, VALID_REVIEW_DESCRIPTION_NO_PREFIX_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        // no description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_REVIEW_DATE_WITH_PREFIX"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                + VALID_REVIEW_RATING_WITH_PREFIX_1 + VALID_REVIEW_COST_WITH_PREFIX_1,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        // no cost"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_REVIEW_DESCRIPTION_WITH_PREFIX_1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                + VALID_REVIEW_RATING_WITH_PREFIX_1 + VALID_REVIEW_DATE_WITH_PREFIX,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        // no rating"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_REVIEW_DATE_WITH_PREFIX"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                + VALID_REVIEW_DESCRIPTION_WITH_PREFIX_1 + VALID_REVIEW_COST_WITH_PREFIX_1,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        // no date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_REVIEW_COST_WITH_PREFIX_1"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                + VALID_REVIEW_DESCRIPTION_WITH_PREFIX_1 + VALID_REVIEW_RATING_WITH_PREFIX_1,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_REVIEW_RATING_WITH_PREFIX_1"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                + VALID_REVIEW_DESCRIPTION_WITH_PREFIX_1 + VALID_REVIEW_COST_WITH_PREFIX_1"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                + VALID_REVIEW_DATE_WITH_PREFIX, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertParseFailure(parser, \"0\" + VALID_REVIEW_RATING_WITH_PREFIX_1"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                + VALID_REVIEW_DESCRIPTION_WITH_PREFIX_1 + VALID_REVIEW_COST_WITH_PREFIX_1"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                + VALID_REVIEW_DATE_WITH_PREFIX, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 69,
      "dvrylc": 4
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/SaveTodoCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.SaveTodoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " * outside of the SaveTodoCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " * same path through the SaveTodoCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class SaveTodoCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private SaveTodoCommandParser parser \u003d new SaveTodoCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void parse_validArgs_returnSaveTodoCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SaveTodoCommand(INDEX_FIRST_EATERY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SaveTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 6,
      "JunHongT": 26
    }
  },
  {
    "path": "src/test/java/seedu/eatme/logic/parser/ShowCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalIndexes.INDEX_FIRST_EATERY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * outside of the ShowCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * same path through the ShowCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class ShowCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private ShowCommandParser parser \u003d new ShowCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ShowCommand(INDEX_FIRST_EATERY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 32
    }
  },
  {
    "path": "src/test/java/seedu/eatme/model/EateryListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_NO_PREFIX_CHEAP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.POPEYES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.exceptions.DuplicateEateryException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EateryBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class EateryListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final EateryList eateryList \u003d new EateryList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(Collections.emptyList(), eateryList.getEateryList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e eateryList.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void resetData_withValidReadOnlyEateryList_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryList newData \u003d getTypicalOpenEateryList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        eateryList.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(newData, eateryList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void resetData_withDuplicateEateries_throwsDuplicateEateryException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // Two eateries with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Eatery editedAlice \u003d new EateryBuilder(POPEYES).withTags(VALID_TAG_NO_PREFIX_CHEAP)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        List\u003cEatery\u003e newEateries \u003d Arrays.asList(POPEYES, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryListStub newData \u003d new EateryListStub(newEateries);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(DuplicateEateryException.class, () -\u003e eateryList.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void hasEatery_nullEatery_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e eateryList.hasEatery(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void hasEatery_eateryNotInEateryList_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(eateryList.hasEatery(POPEYES));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void hasEatery_eateryInEateryList_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        eateryList.addEatery(POPEYES);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertTrue(eateryList.hasEatery(POPEYES));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void hasEatery_eateryWithSameIdentityFieldsInEateryList_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        eateryList.addEatery(POPEYES);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Eatery editedAlice \u003d new EateryBuilder(POPEYES).withTags(VALID_TAG_NO_PREFIX_CHEAP)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertTrue(eateryList.hasEatery(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void getEateryList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e eateryList.getEateryList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * A stub ReadOnlyEateryList whose eateries list can violate interface constraints."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static class EateryListStub implements ReadOnlyEateryList {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        private final ObservableList\u003cEatery\u003e eateries \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        private final ObservableList\u003cEatery\u003e todos \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryListStub(Collection\u003cEatery\u003e eateries) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            this.eateries.setAll(eateries);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public ObservableList\u003cEatery\u003e getEateryList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return eateries;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        public ObservableList\u003cEatery\u003e getTodoList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            return todos;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 106
    }
  },
  {
    "path": "src/test/java/seedu/eatme/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.model.Model.PREDICATE_SHOW_ALL_EATERIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.POPEYES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.TEXAS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalFeeds.getTypicalFeedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EateryListBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(new EateryList(), new EateryList(modelManager.getEateryList()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        userPrefs.setEateryListFilePath(Paths.get(\"eatery/list/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        userPrefs.setEateryListFilePath(Paths.get(\"new/eatery/list/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setEateryListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setEateryListFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setEateryListFilePath_validPath_setsEateryListFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Path path \u003d Paths.get(\"eatery/list/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        modelManager.setEateryListFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(path, modelManager.getEateryListFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void hasEatery_nullEatery_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasEatery(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void hasEatery_eateryNotInEateryList_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(modelManager.hasEatery(POPEYES));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void hasEatery_eateryInEateryList_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        modelManager.addEatery(POPEYES);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(modelManager.hasEatery(POPEYES));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void getFilteredEateryList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredEateryList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryList eateryList \u003d new EateryListBuilder().withEatery(POPEYES).withEatery(TEXAS).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryList differentEateryList \u003d new EateryList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        FeedList feedList \u003d getTypicalFeedList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        FeedList differentFeedList \u003d new FeedList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        modelManager \u003d new ModelManager(eateryList, feedList, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(eateryList, feedList, userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // different eateryList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentEateryList, feedList, userPrefs)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String[] keywords \u003d POPEYES.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jakq"
        },
        "content": "        modelManager.updateFilteredEateryList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(eateryList, feedList, userPrefs)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // different feedList -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(eateryList, differentFeedList, userPrefs)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jakq"
        },
        "content": "        modelManager.updateFilteredEateryList(PREDICATE_SHOW_ALL_EATERIES);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        differentUserPrefs.setEateryListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(eateryList, feedList, differentUserPrefs)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 34,
      "JunHongT": 4,
      "jakq": 6,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/eatme/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setEateryListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setEateryListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/eatme/model/eatery/AddressTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/eatme/model/eatery/CategoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class CategoryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Category(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void constructor_invalidCategoryName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void constructor_validCategory() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String validName \u003d \"Japanese\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Category validCategory \u003d new Category(validName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertEquals(\"Japanese\", validCategory.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void isValidCategory() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "        //null category"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Category.isValidCategory(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        //invalid category"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(Category.isValidCategory(\"\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(Category.isValidCategory(\" \"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(Category.isValidCategory(\"0\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(Category.isValidCategory(\"?\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(Category.isValidCategory(\"Chinese?\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(Category.isValidCategory(\"0 Chinese?\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "        //valid category"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(Category.isValidCategory(\"Chinese\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(Category.isValidCategory(\"chinese\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(Category.isValidCategory(\"CHINESE\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(Category.isValidCategory(\"Chinese Food\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(Category.isValidCategory(\"C\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Category japanese \u003d new Category(\"Japanese\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Category korean \u003d new Category(\"Korean\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(japanese.equals(japanese));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(korean.equals(korean));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(japanese.equals(new Category(\"Japanese\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(korean.equals(new Category(\"Korean\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(japanese.equals(korean));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(korean.equals(japanese));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void create() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "walnads"
        },
        "content": "        // test if it returns the same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Category thai \u003d Category.create(\"Thai\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Category secondThai \u003d Category.create(\"Thai\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertEquals(thai, secondThai);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "walnads"
        },
        "content": "        // test if it returns a different object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Category viet \u003d Category.create(\"Vietnamese\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(thai \u003d\u003d viet);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 73,
      "dvrylc": 2
    }
  },
  {
    "path": "src/test/java/seedu/eatme/model/eatery/EateryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ADDRESS_NO_PREFIX_KFC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_NO_PREFIX_KFC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_NO_PREFIX_CHEAP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_NO_PREFIX_NICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.KENTUCKY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.MCDONALD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EateryBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class EateryTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Eatery eatery \u003d new EateryBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e eatery.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void isSameEatery() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(MCDONALD.isSameEatery(MCDONALD));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(MCDONALD.isSameEatery(new EateryBuilder(MCDONALD).build()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(MCDONALD.isSameEatery(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery editedAlice \u003d new EateryBuilder(MCDONALD).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        editedAlice \u003d new EateryBuilder(MCDONALD).withName(VALID_NAME_NO_PREFIX_KFC).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(MCDONALD.isSameEatery(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        // same name, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        editedAlice \u003d new EateryBuilder(MCDONALD).withAddress(VALID_ADDRESS_NO_PREFIX_KFC)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                .withTags(VALID_TAG_NO_PREFIX_CHEAP).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(MCDONALD.isSameEatery(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery aliceCopy \u003d new EateryBuilder(MCDONALD).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(MCDONALD.equals(aliceCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(MCDONALD.equals(MCDONALD));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(MCDONALD.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(MCDONALD.equals(5));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jakq"
        },
        "content": "        // different eatery -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(MCDONALD.equals(KENTUCKY));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery editedMac \u003d new EateryBuilder(MCDONALD).withName(VALID_NAME_NO_PREFIX_KFC).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(MCDONALD.equals(editedMac));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        editedMac \u003d new EateryBuilder(MCDONALD).withAddress(VALID_ADDRESS_NO_PREFIX_KFC).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(MCDONALD.equals(editedMac));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        editedMac \u003d new EateryBuilder(MCDONALD).withTags(VALID_TAG_NO_PREFIX_NICE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(MCDONALD.equals(editedMac));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 1,
      "dvrylc": 9,
      "JunHongT": 21,
      "jakq": 5,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/eatme/model/eatery/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EateryBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jakq"
        },
        "content": "        // different eatery -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertTrue(predicate.test(new EateryBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertTrue(predicate.test(new EateryBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertTrue(predicate.test(new EateryBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertTrue(predicate.test(new EateryBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertFalse(predicate.test(new EateryBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertFalse(predicate.test(new EateryBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jakq"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertFalse(predicate.test(new EateryBuilder().withName(\"Alice\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                .withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 1,
      "dvrylc": 2,
      "jakq": 9,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/eatme/model/eatery/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/eatme/model/eatery/ReviewTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.ReviewBuilder.DEFAULT_COST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.ReviewBuilder.DEFAULT_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.ReviewBuilder.DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.ReviewBuilder.DEFAULT_RATING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.ReviewBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class ReviewTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private static final String REVIEW_DESCRIPTION \u003d \"good\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private static final double REVIEW_COST \u003d 4.2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private static final int REVIEW_RATING \u003d 3;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Review(null, 0, 0, null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void constructorInvalidReviewCost_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        double invalidCost \u003d -2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        DateFormat df \u003d new SimpleDateFormat(\"dd/MM/YYYY\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                new Review(REVIEW_DESCRIPTION, invalidCost, 0, df.parse(DEFAULT_DATE)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void constructorInvalidReviewRating_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        int invalidRating \u003d 6;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        DateFormat df \u003d new SimpleDateFormat(\"dd/MM/YYYY\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                new Review(REVIEW_DESCRIPTION, 0, invalidRating, df.parse(DEFAULT_DATE)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void isValidReviewDescription() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //null description"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Review.isValidDescription(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertFalse(Review.isValidDescription(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //all reviews other than blank space are valid as anything can be written in reviews"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertTrue(Review.isValidDescription(\"good\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertTrue(Review.isValidDescription(\"GOOD\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertTrue(Review.isValidDescription(\"@bad\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertTrue(Review.isValidDescription(\"1 for 1\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void isValidReviewCost() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //less than 0"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertFalse(Review.isValidCost(-2));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //any positive double"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertTrue(Review.isValidCost(0));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertTrue(Review.isValidCost(3.2));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertTrue(Review.isValidCost(9999));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void isValidReviewRating() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //double, \u003c 0 and \u003e 5"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertFalse(Review.isValidRating(\"-2\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertFalse(Review.isValidRating(\"1.2\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertFalse(Review.isValidRating(\"6\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //integers between 0 and 5"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertTrue(Review.isValidRating(\"0\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertTrue(Review.isValidRating(\"3\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertTrue(Review.isValidRating(\"5\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void equals() throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        SimpleDateFormat df \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Review review \u003d new Review(DEFAULT_DESCRIPTION, DEFAULT_COST, DEFAULT_RATING, df.parse(DEFAULT_DATE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Review reviewCopy \u003d new ReviewBuilder(review).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertTrue(review.equals(reviewCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertTrue(review.equals(review));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertFalse(review.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //different type -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertFalse(review.equals(2));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //different description -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Review editedReviewDescription \u003d new ReviewBuilder(review).withDescription(REVIEW_DESCRIPTION).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertFalse(editedReviewDescription.equals(review));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //different cost -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Review editedReviewCost \u003d new ReviewBuilder(review).withCost(REVIEW_COST).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertFalse(editedReviewCost.equals(review));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //different rating -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Review editedReviewRating \u003d new ReviewBuilder(review).withRating(REVIEW_RATING).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertFalse(editedReviewRating.equals(review));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 107,
      "dvrylc": 7
    }
  },
  {
    "path": "src/test/java/seedu/eatme/model/eatery/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String spacing \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(spacing));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String empty \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(empty));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void constructor_validTag() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String validName \u003d \"FreeWifi\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Tag validTag \u003d new Tag(validName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertEquals(\"FreeWifi\", validTag.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void isValidTag() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        //null category"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTag(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "        //invalid category"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(Tag.isValidTag(\"\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(Tag.isValidTag(\"  \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(Tag.isValidTag(\"0\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(Tag.isValidTag(\"?\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(Tag.isValidTag(\"FreeWifi?\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(Tag.isValidTag(\"0 FreeWifi\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(Tag.isValidTag(\"Free Wifi\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(Tag.isValidTag(\"_FreeWifi\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(Tag.isValidTag(\"FreeWifi_\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(Tag.isValidTag(\"FreeWifi-\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(Tag.isValidTag(\"-FreeWifi\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "        //valid category"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(Tag.isValidTag(\"freewifi\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(Tag.isValidTag(\"FreeWifi\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(Tag.isValidTag(\"free_wifi\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(Tag.isValidTag(\"Free_Wifi\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(Tag.isValidTag(\"Free-Wifi\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(Tag.isValidTag(\"go\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Tag quiet \u003d new Tag(\"Quiet\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Tag study \u003d new Tag(\"Study\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(quiet.equals(quiet));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(study.equals(study));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(quiet.equals(new Tag(\"Quiet\")));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertTrue(study.equals(new Tag(\"Study\")));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(quiet.equals(study));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(study.equals(quiet));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void create() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "walnads"
        },
        "content": "        // test if it returns the same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Tag firstPp \u003d Tag.create(\"PowerPlug\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Tag secondPp \u003d Tag.create(\"PowerPlug\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertEquals(firstPp, secondPp);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "walnads"
        },
        "content": "        // test if it returns a different object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Tag nearMrt \u003d Tag.create(\"NearMRT\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertFalse(nearMrt \u003d\u003d firstPp);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 82,
      "dvrylc": 2
    }
  },
  {
    "path": "src/test/java/seedu/eatme/model/eatery/UniqueEateryListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.eatery;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jakq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jakq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jakq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ADDRESS_NO_PREFIX_KFC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_NO_PREFIX_CHEAP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.KENTUCKY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.MCDONALD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jakq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.exceptions.DuplicateEateryException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.exceptions.EateryNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.EateryBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class UniqueEateryListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private final UniqueEateryList uniqueEateryList \u003d new UniqueEateryList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void contains_nullEatery_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEateryList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void contains_eateryNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertFalse(uniqueEateryList.contains(MCDONALD));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void contains_eateryInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        uniqueEateryList.add(MCDONALD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertTrue(uniqueEateryList.contains(MCDONALD));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void contains_eateryWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        uniqueEateryList.add(MCDONALD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery editedAlice \u003d new EateryBuilder(MCDONALD)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                .withAddress(VALID_ADDRESS_NO_PREFIX_KFC)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                .withTags(VALID_TAG_NO_PREFIX_CHEAP)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jakq"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertFalse(uniqueEateryList.contains(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void add_nullEatery_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEateryList.add(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void add_duplicateEatery_throwsDuplicateEateryException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        uniqueEateryList.add(MCDONALD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertThrows(DuplicateEateryException.class, () -\u003e uniqueEateryList.add(MCDONALD));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void setEatery_nullTargetEatery_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEateryList.setEatery(null, MCDONALD));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void setEatery_nullEditedEatery_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEateryList.setEatery(MCDONALD, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void setEatery_targetEateryNotInList_throwsEateryNotFoundException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertThrows(EateryNotFoundException.class, () -\u003e uniqueEateryList.setEatery(MCDONALD, MCDONALD));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void setEatery_editedEateryIsSameEatery_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        uniqueEateryList.add(MCDONALD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        uniqueEateryList.setEatery(MCDONALD, MCDONALD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jakq"
        },
        "content": "        UniqueEateryList expectedUniqueEateryList \u003d new UniqueEateryList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        expectedUniqueEateryList.add(MCDONALD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(expectedUniqueEateryList, uniqueEateryList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void setEatery_editedEateryHasSameIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        uniqueEateryList.add(MCDONALD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Eatery editedAlice \u003d new EateryBuilder(MCDONALD)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                .withAddress(VALID_ADDRESS_NO_PREFIX_KFC)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                .withTags(VALID_TAG_NO_PREFIX_CHEAP)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jakq"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        uniqueEateryList.setEatery(MCDONALD, editedAlice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jakq"
        },
        "content": "        UniqueEateryList expectedUniqueEateryList \u003d new UniqueEateryList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jakq"
        },
        "content": "        expectedUniqueEateryList.add(editedAlice);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(expectedUniqueEateryList, uniqueEateryList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void setEatery_editedEateryHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        uniqueEateryList.add(MCDONALD);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        uniqueEateryList.setEatery(MCDONALD, KENTUCKY);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jakq"
        },
        "content": "        UniqueEateryList expectedUniqueEateryList \u003d new UniqueEateryList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        expectedUniqueEateryList.add(KENTUCKY);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(expectedUniqueEateryList, uniqueEateryList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void setEatery_editedEateryHasNonUniqueIdentity_throwsDuplicateEateryException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        uniqueEateryList.add(MCDONALD);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        uniqueEateryList.add(KENTUCKY);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertThrows(DuplicateEateryException.class, () -\u003e uniqueEateryList.setEatery(MCDONALD, KENTUCKY));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void remove_nullEatery_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEateryList.remove(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void remove_eateryDoesNotExist_throwsEateryNotFoundException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertThrows(EateryNotFoundException.class, () -\u003e uniqueEateryList.remove(MCDONALD));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void remove_existingEatery_removesEatery() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        uniqueEateryList.add(MCDONALD);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        uniqueEateryList.remove(MCDONALD);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jakq"
        },
        "content": "        UniqueEateryList expectedUniqueEateryList \u003d new UniqueEateryList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(expectedUniqueEateryList, uniqueEateryList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void setEateries_nullUniqueEateryList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEateryList.setEateries((UniqueEateryList) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void setEateries_uniqueEateryList_replacesOwnListWithProvidedUniqueEateryList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        uniqueEateryList.add(MCDONALD);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jakq"
        },
        "content": "        UniqueEateryList expectedUniqueEateryList \u003d new UniqueEateryList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        expectedUniqueEateryList.add(KENTUCKY);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jakq"
        },
        "content": "        uniqueEateryList.setEateries(expectedUniqueEateryList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(expectedUniqueEateryList, uniqueEateryList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void setEateries_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEateryList.setEateries((List\u003cEatery\u003e) null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void setEateries_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        uniqueEateryList.add(MCDONALD);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        List\u003cEatery\u003e eateryList \u003d Collections.singletonList(KENTUCKY);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jakq"
        },
        "content": "        uniqueEateryList.setEateries(eateryList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jakq"
        },
        "content": "        UniqueEateryList expectedUniqueEateryList \u003d new UniqueEateryList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        expectedUniqueEateryList.add(KENTUCKY);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertEquals(expectedUniqueEateryList, uniqueEateryList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void setEateries_listWithDuplicateEateries_throwsDuplicateEateryException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        List\u003cEatery\u003e listWithDuplicateEateries \u003d Arrays.asList(MCDONALD, MCDONALD);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(DuplicateEateryException.class, () -\u003e uniqueEateryList.setEateries(listWithDuplicateEateries));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jakq"
        },
        "content": "            -\u003e uniqueEateryList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jakq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 1,
      "dvrylc": 9,
      "JunHongT": 35,
      "jakq": 129
    }
  },
  {
    "path": "src/test/java/seedu/eatme/model/feed/FeedPostTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.feed;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.FeedPostBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class FeedPostTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        FeedPost feedPost \u003d new FeedPostBuilder().build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        FeedPost feedPostCopy \u003d new FeedPostBuilder(feedPost).build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertTrue(feedPost.equals(feedPostCopy));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertTrue(feedPost.equals(feedPost));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(feedPost.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(feedPost.equals(5));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // different feed post -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        FeedPost differentFeedPost \u003d new FeedPostBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                .withSource(\"Different source\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                .withTitle(\"Different title\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                .withAddress(\"https://different.com/post\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(feedPost.equals(differentFeedPost));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // different source -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        FeedPost differentSourceFeedPost \u003d new FeedPostBuilder(feedPost).withSource(\"Different source\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(feedPost.equals(differentSourceFeedPost));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        FeedPost differentTitleFeedPost \u003d new FeedPostBuilder(feedPost).withTitle(\"Different title\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(feedPost.equals(differentTitleFeedPost));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        FeedPost differentAddressFeedPost \u003d new FeedPostBuilder(feedPost).withAddress(\"https://different.com/post\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(feedPost.equals(differentAddressFeedPost));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 49
    }
  },
  {
    "path": "src/test/java/seedu/eatme/model/feed/FeedTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.feed;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.FeedBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class FeedTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Feed feed \u003d new FeedBuilder().build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Feed feedCopy \u003d new FeedBuilder(feed).build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertTrue(feed.equals(feedCopy));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertTrue(feed.equals(feed));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(feed.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(feed.equals(5));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // different feed -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Feed differentFeed \u003d new FeedBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                .withName(\"Different Feed\").withAddress(\"https://different.com/feed\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(feed.equals(differentFeed));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Feed differentNameFeed \u003d new FeedBuilder(feed).withName(\"Different Name\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(feed.equals(differentNameFeed));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Feed differentAddressFeed \u003d new FeedBuilder(feed).withAddress(\"https://different.com/feed\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(feed.equals(differentAddressFeed));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 41
    }
  },
  {
    "path": "src/test/java/seedu/eatme/model/feed/UniqueFeedListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.model.feed;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.exceptions.DuplicateFeedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.exceptions.FeedNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.FeedBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class UniqueFeedListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private final UniqueFeedList uniqueFeedList \u003d new UniqueFeedList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Feed feed \u003d new FeedBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void contains_nullFeed_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFeedList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void contains_feedNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(uniqueFeedList.contains(feed));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void contains_feedInList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        uniqueFeedList.add(feed);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertTrue(uniqueFeedList.contains(feed));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void add_nullFeed_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFeedList.add(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void add_duplicateFeed_throwsDuplicateFeedException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        uniqueFeedList.add(feed);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(DuplicateFeedException.class, () -\u003e uniqueFeedList.add(feed));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeed_nullTargetFeed_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFeedList.setFeed(null, feed));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeed_nullEditedFeed_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFeedList.setFeed(feed, null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeed_targetFeedNotInList_throwsFeedNotFoundException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(FeedNotFoundException.class, () -\u003e uniqueFeedList.setFeed(feed, feed));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeed_editedFeedIsSameFeed_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        uniqueFeedList.add(feed);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        uniqueFeedList.setFeed(feed, feed);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        UniqueFeedList expectedUniqueFeedList \u003d new UniqueFeedList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        expectedUniqueFeedList.add(feed);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(expectedUniqueFeedList, uniqueFeedList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void remove_nullFeed_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFeedList.remove(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void remove_feedDoesNotExist_throwsFeedNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(FeedNotFoundException.class, () -\u003e uniqueFeedList.remove(feed));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void remove_existingFeed_removesFeed() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        uniqueFeedList.add(feed);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        uniqueFeedList.remove(feed);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        UniqueFeedList expectedUniqueFeedList \u003d new UniqueFeedList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(expectedUniqueFeedList, uniqueFeedList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeeds_nullUniqueFeedList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFeedList.setFeeds((UniqueFeedList) null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeeds_uniqueFeedList_replacesOwnListWithProvidedUniqueFeedList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        uniqueFeedList.add(feed);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        UniqueFeedList expectedUniqueFeedList \u003d new UniqueFeedList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        expectedUniqueFeedList.add(new FeedBuilder(feed).withName(\"Different feed\").build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        uniqueFeedList.setFeeds(expectedUniqueFeedList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(expectedUniqueFeedList, uniqueFeedList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeeds_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFeedList.setFeeds((List\u003cFeed\u003e) null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeeds_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Feed differentFeed \u003d new FeedBuilder().withName(\"Different name\").build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        uniqueFeedList.add(feed);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        List\u003cFeed\u003e feedList \u003d Collections.singletonList(differentFeed);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        uniqueFeedList.setFeeds(feedList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        UniqueFeedList expectedUniqueFeedList \u003d new UniqueFeedList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        expectedUniqueFeedList.add(differentFeed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(expectedUniqueFeedList, uniqueFeedList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void setFeeds_listWithDuplicateFeeds_throwsDuplicateFeedException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        List\u003cFeed\u003e listWithDuplicateFeeds \u003d Arrays.asList(feed, feed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(DuplicateFeedException.class, () -\u003e uniqueFeedList.setFeeds(listWithDuplicateFeeds));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            ) -\u003e uniqueFeedList.asUnmodifiableObservableList().remove(0)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        );"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 135
    }
  },
  {
    "path": "src/test/java/seedu/eatme/storage/JsonAdaptedEateryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.storage.JsonAdaptedEatery.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.TEXAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class JsonAdaptedEateryTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private static final String INVALID_ISOPEN \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"_Ch1nese\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private static final String VALID_NAME \u003d TEXAS.getName().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private static final String VALID_ISOPEN \u003d String.valueOf(TEXAS.getIsOpen());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private static final String VALID_ADDRESS \u003d TEXAS.getAddress().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private static final String VALID_CATEGORY \u003d TEXAS.getCategory().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d TEXAS.getTags().stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void toModelType_validEateryDetails_returnsEatery() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        JsonAdaptedEatery eatery \u003d new JsonAdaptedEatery(TEXAS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(TEXAS, eatery.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": "        JsonAdaptedEatery eatery \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                new JsonAdaptedEatery(INVALID_NAME, VALID_ISOPEN, VALID_ADDRESS, VALID_CATEGORY, null,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, eatery::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        JsonAdaptedEatery eatery \u003d new JsonAdaptedEatery(null, VALID_ISOPEN, VALID_ADDRESS, VALID_CATEGORY,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                null, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, eatery::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void toModelType_invalidIsOpen_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": "        JsonAdaptedEatery eatery \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                new JsonAdaptedEatery(VALID_NAME, INVALID_ISOPEN, VALID_ADDRESS, VALID_CATEGORY,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                        null, VALID_TAGS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jakq"
        },
        "content": "        String expectedMessage \u003d \"isOpen has to be either true or false, not blank or anything else.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, eatery::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jakq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public void toModelType_nullIsOpen_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        JsonAdaptedEatery eatery \u003d new JsonAdaptedEatery(VALID_NAME, null, VALID_ADDRESS, VALID_CATEGORY,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                null, VALID_TAGS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jakq"
        },
        "content": "        String expectedMessage \u003d \"Eatery\u0027s isOpen field is missing!\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, eatery::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jakq"
        },
        "content": "        JsonAdaptedEatery eatery \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                new JsonAdaptedEatery(VALID_NAME, VALID_ISOPEN, INVALID_ADDRESS, VALID_CATEGORY,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                        null, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, eatery::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        JsonAdaptedEatery eatery \u003d new JsonAdaptedEatery(VALID_NAME, VALID_ISOPEN, null, VALID_CATEGORY,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                null, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, eatery::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void toModelType_invalidCategory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "walnads"
        },
        "content": "        JsonAdaptedEatery eatery \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                new JsonAdaptedEatery(VALID_NAME, VALID_ISOPEN, VALID_ADDRESS, INVALID_CATEGORY,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                        null, VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String expectedMessage \u003d Category.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, eatery::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void toModelType_nullCategory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        JsonAdaptedEatery eatery \u003d new JsonAdaptedEatery(VALID_NAME, VALID_ISOPEN, VALID_ADDRESS,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                null, null, VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Category.class.getSimpleName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, eatery::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jakq"
        },
        "content": "        JsonAdaptedEatery eatery \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                new JsonAdaptedEatery(VALID_NAME, VALID_ISOPEN, VALID_ADDRESS, VALID_CATEGORY,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                        null, invalidTags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jakq"
        },
        "content": "        assertThrows(IllegalValueException.class, eatery::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 14,
      "ROHITREDDYBALAM": 18,
      "dvrylc": 8,
      "JunHongT": 7,
      "jakq": 24,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/eatme/storage/JsonEateryListStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.BURGERKING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.MAC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.PIZZAHUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.EateryList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyEateryList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class JsonEateryListStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonEateryListStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void readEateryList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readEateryList(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private java.util.Optional\u003cReadOnlyEateryList\u003e readEateryList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new JsonEateryListStorage(Paths.get(filePath)).readEateryList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertFalse(readEateryList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readEateryList(\"notJsonFormatEateryList.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void readEateryList_invalidEateryEateryList_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readEateryList(\"invalidEateryEateryList.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void readAndSaveEateryList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempEateryList.json\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryList original \u003d getTypicalOpenEateryList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        JsonEateryListStorage jsonEateryListStorage \u003d new JsonEateryListStorage(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        jsonEateryListStorage.saveEateryList(original, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ReadOnlyEateryList readBack \u003d jsonEateryListStorage.readEateryList(filePath).get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(original, new EateryList(readBack));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        original.addEatery(PIZZAHUT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        original.removeEatery(MAC);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        jsonEateryListStorage.saveEateryList(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        readBack \u003d jsonEateryListStorage.readEateryList(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(original, new EateryList(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        original.addEatery(BURGERKING);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        jsonEateryListStorage.saveEateryList(original); // file path not specified"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        readBack \u003d jsonEateryListStorage.readEateryList().get(); // file path not specified"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(original, new EateryList(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void saveEateryList_nullEateryList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveEateryList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Saves {@code eateryList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private void saveEateryList(ReadOnlyEateryList eateryList, String filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            new JsonEateryListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                    .saveEateryList(eateryList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void saveEateryList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveEateryList(new EateryList(), null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 105
    }
  },
  {
    "path": "src/test/java/seedu/eatme/storage/JsonSerializableEateryListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.EateryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.testutil.TypicalEateries;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class JsonSerializableEateryListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableEateryListTest\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static final Path TYPICAL_OPEN_EATERIES_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            .resolve(\"typicalOpenEateriesEateryList.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static final Path TYPICAL_CLOSE_EATERIES_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            .resolve(\"typicalCloseEateriesEateryList.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static final Path INVALID_EATERY_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEateryEateryList.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private static final Path DUPLICATE_EATERY_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEateryEateryList.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void toModelType_typicalOpenEateriesFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        JsonSerializableEateryList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_OPEN_EATERIES_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                JsonSerializableEateryList.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryList eateryListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryList typicalOpenEateriesEateryList \u003d TypicalEateries.getTypicalOpenEateryList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(eateryListFromFile, typicalOpenEateriesEateryList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void toModelType_typicalCloseEateriesFile_success() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        JsonSerializableEateryList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_CLOSE_EATERIES_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "                JsonSerializableEateryList.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryList eateryListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryList typicalCloseEateriesEateryList \u003d TypicalEateries.getTypicalCloseEateryList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(eateryListFromFile, typicalCloseEateriesEateryList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 42
    }
  },
  {
    "path": "src/test/java/seedu/eatme/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        userPrefs.setEateryListFilePath(Paths.get(\"eatMe.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/eatme/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.TypicalEateries.getTypicalOpenEateryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.EateryList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.ReadOnlyEateryList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        JsonEateryListStorage eateryListStorage \u003d new JsonEateryListStorage(getTempFilePath(\"el\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        JsonFeedListStorage feedListStorage \u003d new JsonFeedListStorage(getTempFilePath(\"fl\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        storageManager \u003d new StorageManager(eateryListStorage, feedListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void eateryListReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "         * {@link JsonEateryListStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonEateryListStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryList original \u003d getTypicalOpenEateryList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        storageManager.saveEateryList(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        ReadOnlyEateryList retrieved \u003d storageManager.readEateryList().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertEquals(original, new EateryList(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public void getEateryListFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        assertNotNull(storageManager.getEateryListFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 18,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/eatme/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/eatme/testutil/EateryBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": " * A utility class to help with building Eatery objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class EateryBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Popeyes\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"Western\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final String DEFAULT_TAG \u003d \"fastfood\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final Review DEFAULT_GOOD_REVIEW \u003d new Review(\"good place\", 5, 5,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "            new Date());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final Review DEFAULT_NEUTRAL_REVIEW \u003d new Review(\"ok place\", 3, 3,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "            new Date());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static final Review DEFAULT_BAD_REVIEW \u003d new Review(\"bad place\", 5, 1,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "            new Date());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private boolean isOpen;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private List\u003cReview\u003e reviews;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public EateryBuilder() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": "        isOpen \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "        category \u003d new Category(DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "        reviews \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Initializes the EateryBuilder with the data of {@code eateryToCopy}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public EateryBuilder(Eatery eateryToCopy) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": "        name \u003d eateryToCopy.getName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jakq"
        },
        "content": "        isOpen \u003d eateryToCopy.getIsOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jakq"
        },
        "content": "        address \u003d eateryToCopy.getAddress();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": "        category \u003d eateryToCopy.getCategory();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jakq"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(eateryToCopy.getTags());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "        reviews \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Sets the {@code Name} of the {@code Eatery} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public EateryBuilder withName(String name) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Sets the {@code isOpen} of the {@code Eatery} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public EateryBuilder withIsOpen(boolean isOpen) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jakq"
        },
        "content": "        this.isOpen \u003d isOpen;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Eatery} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public EateryBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Sets the {@code Address} of the {@code Eatery} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public EateryBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Sets the {@code Category} of the {@code Eatery} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public EateryBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.category \u003d new Category(category);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Sets the {@code Eatery} that we are building with some default reviews."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public EateryBuilder withReviews() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.reviews.add(DEFAULT_GOOD_REVIEW);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.reviews.add(DEFAULT_NEUTRAL_REVIEW);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.reviews.add(DEFAULT_BAD_REVIEW);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public Eatery build() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return new Eatery(name, isOpen, address, category, tags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Builds an eatery with some default reviews."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Eatery buildWithReviews() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Eatery eatery \u003d new Eatery(name, isOpen, address, category, tags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "walnads"
        },
        "content": "        eatery.setReviews(reviews);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return eatery;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 44,
      "dvrylc": 8,
      "JunHongT": 2,
      "jakq": 28,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/eatme/testutil/EateryListBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.EateryList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * A utility class to help with building EateryList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " *     {@code EateryList el \u003d new EateryListBuilder().withEatery(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class EateryListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private EateryList eateryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public EateryListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        eateryList \u003d new EateryList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public EateryListBuilder(EateryList eateryList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.eateryList \u003d eateryList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Adds a new {@code Eatery} to the {@code EateryList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public EateryListBuilder withEatery(Eatery eatery) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        eateryList.addEatery(eatery);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public EateryList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return eateryList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 34
    }
  },
  {
    "path": "src/test/java/seedu/eatme/testutil/EateryUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.EditCommand.EditEateryDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jakq"
        },
        "content": " * A utility class for Eatery."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class EateryUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Returns an add command string for adding the {@code eatery}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static String getAddCommand(Eatery eatery) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getEateryDetails(eatery);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Returns the part of command string for the given {@code eatery}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static String getEateryDetails(Eatery eatery) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jakq"
        },
        "content": "        sb.append(PREFIX_NAME + eatery.getName().fullName + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jakq"
        },
        "content": "        sb.append(PREFIX_ADDRESS + eatery.getAddress().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        sb.append(PREFIX_CATEGORY + eatery.getCategory().getName() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": "        eatery.getTags().stream().forEach("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.getName() + \" \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Returns the part of command string for the given {@code EditEateryDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static String getEditEateryDescriptorDetails(EditEateryDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "        descriptor.getCategory().ifPresent(category -\u003e sb.append(PREFIX_CATEGORY).append(category.getName())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.getName()).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 5,
      "dvrylc": 9,
      "jakq": 12,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/eatme/testutil/EditEateryDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jakq"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.logic.commands.EditCommand.EditEateryDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jakq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jakq"
        },
        "content": " * A utility class to help with building EditEateryDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jakq"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class EditEateryDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private EditEateryDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public EditEateryDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jakq"
        },
        "content": "        descriptor \u003d new EditEateryDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public EditEateryDescriptorBuilder(EditEateryDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jakq"
        },
        "content": "        this.descriptor \u003d new EditEateryDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Returns an {@code EditEateryDescriptor} with fields containing {@code eatery}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public EditEateryDescriptorBuilder(Eatery eatery) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jakq"
        },
        "content": "        descriptor \u003d new EditEateryDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jakq"
        },
        "content": "        descriptor.setName(eatery.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jakq"
        },
        "content": "        descriptor.setAddress(eatery.getAddress());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "        descriptor.setCategory(eatery.getCategory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jakq"
        },
        "content": "        descriptor.setTags(eatery.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Sets the {@code Name} of the {@code EditEateryDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public EditEateryDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jakq"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Sets the {@code Address} of the {@code EditEateryDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public EditEateryDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Sets the {@code Category} of the {@code EditEateryDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public EditEateryDescriptorBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "        descriptor.setCategory(new Category(category));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jakq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditEateryDescriptor}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jakq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public EditEateryDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jakq"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jakq"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public EditEateryDescriptor build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jakq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 9,
      "dvrylc": 7,
      "jakq": 61
    }
  },
  {
    "path": "src/test/java/seedu/eatme/testutil/FeedBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.Feed;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * A utility class to help with building Feed objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class FeedBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Example Feed\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"https://example.com/feed\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public FeedBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        address \u003d DEFAULT_ADDRESS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Initializes the FeedBuilder with the data of {@code feedToCopy}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public FeedBuilder(Feed feedToCopy) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        name \u003d feedToCopy.getName();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        address \u003d feedToCopy.getAddress();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Sets the {@code name} of the {@code Feed} that we are building."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public FeedBuilder withName(String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Sets the {@code address} of the {@code Feed} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public FeedBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public Feed build() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new Feed(name, address);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 49
    }
  },
  {
    "path": "src/test/java/seedu/eatme/testutil/FeedPostBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.FeedPost;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * A utility class to help with building FeedPost objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class FeedPostBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String DEFAULT_SOURCE \u003d \"Default Source\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Sample Post\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"https://example.com/post\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private String source;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public FeedPostBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        source \u003d DEFAULT_SOURCE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        title \u003d DEFAULT_TITLE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        address \u003d DEFAULT_ADDRESS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Initializes the FeedPostBuilder with the data of {@code feedPostToCopy}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public FeedPostBuilder(FeedPost feedPostToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        source \u003d feedPostToCopy.getSource();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        title \u003d feedPostToCopy.getTitle();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        address \u003d feedPostToCopy.getAddress();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Sets the {@code source} of the {@code FeedPost} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public FeedPostBuilder withSource(String source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.source \u003d source;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Sets the {@code title} of the {@code FeedPost} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public FeedPostBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Sets the {@code address} of the {@code FeedPost} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public FeedPostBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public FeedPost build() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return new FeedPost(source, title, address);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 61
    }
  },
  {
    "path": "src/test/java/seedu/eatme/testutil/ReviewBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Builds a review with the specified fields."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class ReviewBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Good chocolate ice-cream\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final double DEFAULT_COST \u003d 4.6;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final int DEFAULT_RATING \u003d 4;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"22/11/2019\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private String reviewDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private double reviewCost;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private int reviewRating;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private Date reviewDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public ReviewBuilder() throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        reviewDescription \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        reviewCost \u003d DEFAULT_COST;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        reviewRating \u003d DEFAULT_RATING;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        DateFormat df \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        reviewDate \u003d df.parse(DEFAULT_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Initializes the ReviewBuilder with the data of {@code toCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public ReviewBuilder(Review toCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        reviewDescription \u003d toCopy.getDescription();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        reviewCost \u003d toCopy.getCost();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        reviewRating \u003d toCopy.getRating();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        reviewDate \u003d toCopy.getDate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Sets the {@code reviewDescription} of the {@code Review} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public ReviewBuilder withDescription(String reviewDescription) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.reviewDescription \u003d reviewDescription;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Sets the {@code reviewCost} of the {@code Review} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public ReviewBuilder withCost(double reviewCost) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.reviewCost \u003d reviewCost;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Sets the {@code reviewRating} of the {@code Building} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public ReviewBuilder withRating(int reviewRating) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.reviewRating \u003d reviewRating;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Sets the {@code reviewDate} of the {@code Review} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public ReviewBuilder withDate(Date reviewDate) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.reviewDate \u003d reviewDate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public Review build() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return new Review(reviewDescription, reviewCost, reviewRating, reviewDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 78,
      "dvrylc": 2
    }
  },
  {
    "path": "src/test/java/seedu/eatme/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/eatme/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Returns the middle index of the eatery in the {@code model}\u0027s eatery list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return Index.fromOneBased(model.getFilteredEateryList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Returns the last index of the eatery in the {@code model}\u0027s eatery list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return Index.fromOneBased(model.getFilteredEateryList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jakq"
        },
        "content": "     * Returns the eatery in the {@code model}\u0027s eatery list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static Eatery getEatery(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return model.getFilteredEateryList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 4,
      "jakq": 7,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/eatme/testutil/TodoEateryBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " * A utility class to help with building Eatery objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class TodoEateryBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private boolean isOpen;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public TodoEateryBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        isOpen \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Initializes the EateryBuilder with the data of {@code eateryToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public TodoEateryBuilder(Eatery eateryToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        name \u003d eateryToCopy.getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        isOpen \u003d eateryToCopy.getIsOpen();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        address \u003d eateryToCopy.getAddress();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(eateryToCopy.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Sets the {@code Name} of the {@code Eatery} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public TodoEateryBuilder withName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Eatery} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public TodoEateryBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Sets the {@code Address} of the {@code Eatery} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public TodoEateryBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public Eatery build() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return new Eatery(name, address, tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 6,
      "JunHongT": 64
    }
  },
  {
    "path": "src/test/java/seedu/eatme/testutil/TypicalEateries.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ADDRESS_NO_PREFIX_KFC;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ADDRESS_NO_PREFIX_MAC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_CATEGORY_NO_PREFIX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ISOPEN_KFC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ISOPEN_MAC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_NO_PREFIX_KFC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_NO_PREFIX_MAC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_NO_PREFIX_CHEAP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_TAG_NO_PREFIX_NICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.EateryList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Eatery;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jakq"
        },
        "content": " * A utility class containing a list of {@code Eatery} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jakq"
        },
        "content": "public class TypicalEateries {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final Eatery POPEYES \u003d new EateryBuilder().withName(\"Popeyes\").withIsOpen(true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            .withCategory(\"Western\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            .withTags(\"fastfood\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final Eatery MAC \u003d new EateryBuilder().withName(\"McDonald\").withIsOpen(true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jakq"
        },
        "content": "            .withCategory(\"Western\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            .withTags(\"fastfood\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final Eatery MOS \u003d new EateryBuilder().withName(\"MOS Burger\").withIsOpen(true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "            .withAddress(\"wall street\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "            .withCategory(\"Western\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final Eatery KFC \u003d new EateryBuilder().withName(\"Kentucky Fried Chicken\").withIsOpen(true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "            .withAddress(\"10th street\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "            .withCategory(\"Western\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            .withTags(\"fastfood\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final Eatery TEXAS \u003d new EateryBuilder().withName(\"Texas Chicken\").withIsOpen(true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "            .withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "            .withCategory(\"Western\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final Eatery BURGER \u003d new EateryBuilder().withName(\"Burger King\").withIsOpen(true)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "            .withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "            .withCategory(\"Western\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final Eatery PIZZA \u003d new EateryBuilder().withName(\"Pizza Hut\").withIsOpen(true)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "            .withAddress(\"4th street\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "            .withCategory(\"Western\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final Eatery PIZZAHUT \u003d new EateryBuilder().withName(\"Pizza Hut\").withIsOpen(true)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "            .withAddress(\"little india\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "            .withCategory(\"Western\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final Eatery BURGERKING \u003d new EateryBuilder().withName(\"Burger King\").withIsOpen(true)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "            .withAddress(\"chicago ave\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "            .withCategory(\"Western\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jakq"
        },
        "content": "    // Manually added - Eatery\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final Eatery MCDONALD \u003d new EateryBuilder().withName(VALID_NAME_NO_PREFIX_MAC)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            .withIsOpen(VALID_ISOPEN_MAC)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            .withAddress(VALID_ADDRESS_NO_PREFIX_MAC).withCategory(VALID_CATEGORY_NO_PREFIX)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            .withTags(VALID_TAG_NO_PREFIX_CHEAP).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final Eatery KENTUCKY \u003d new EateryBuilder().withName(VALID_NAME_NO_PREFIX_KFC)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            .withIsOpen(VALID_ISOPEN_KFC)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            .withAddress(VALID_ADDRESS_NO_PREFIX_KFC).withCategory(VALID_CATEGORY_NO_PREFIX)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            .withTags(VALID_TAG_NO_PREFIX_CHEAP, VALID_TAG_NO_PREFIX_NICE)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jakq"
        },
        "content": "    private TypicalEateries() {} // prevents instantiation"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "     * Returns an {@code eateryList} with all the typical eateries."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static EateryList getTypicalOpenEateryList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryList ab \u003d new EateryList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jakq"
        },
        "content": "        for (Eatery eatery : getTypicalEateries()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jakq"
        },
        "content": "            ab.addEatery(eatery);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            ab.toggle();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            ab.addEatery(eatery);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static EateryList getTypicalCloseEateryList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryList ab \u003d new EateryList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jakq"
        },
        "content": "        for (Eatery eatery : getTypicalEateries()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jakq"
        },
        "content": "            Eatery closedEatery \u003d new EateryBuilder(eatery).withIsOpen(false).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jakq"
        },
        "content": "            ab.addEatery(closedEatery);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jakq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jakq"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jakq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jakq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static EateryList getTypicalReviewEateryList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        EateryList ab \u003d new EateryList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (Eatery eatery : getTypicalEateries()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "walnads"
        },
        "content": "            Eatery eateryWithReviews \u003d new EateryBuilder(eatery).withReviews().buildWithReviews();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "walnads"
        },
        "content": "            ab.addEatery(eateryWithReviews);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static List\u003cEatery\u003e getTypicalEateries() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(POPEYES, MAC, MOS, KFC, TEXAS, BURGER, PIZZA));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 21,
      "ROHITREDDYBALAM": 1,
      "dvrylc": 19,
      "JunHongT": 24,
      "jakq": 15,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/eatme/testutil/TypicalFeeds.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ADDRESS_EATBOOK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_ADDRESS_SETHLUI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_EATBOOK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.logic.commands.CommandTestUtil.VALID_NAME_SETHLUI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.FeedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.feed.Feed;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " * A utility class containing a list of {@code Feed} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dvrylc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "public class TypicalFeeds {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final Feed EATBOOK \u003d new FeedBuilder()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            .withName(VALID_NAME_EATBOOK).withAddress(VALID_ADDRESS_EATBOOK).build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static final Feed SETHLUI \u003d new FeedBuilder()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "            .withName(VALID_NAME_SETHLUI).withAddress(VALID_ADDRESS_SETHLUI).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dvrylc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    public static FeedList getTypicalFeedList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        FeedList feedList \u003d new FeedList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        feedList.addFeed(EATBOOK);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        feedList.addFeed(SETHLUI);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "        return feedList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 26
    }
  },
  {
    "path": "src/test/java/seedu/eatme/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static final Index INDEX_FIRST_EATERY \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static final Index INDEX_SECOND_EATERY \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jakq"
        },
        "content": "    public static final Index INDEX_THIRD_EATERY \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 2,
      "jakq": 3,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/eatme/testutil/TypicalReviews.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.model.eatery.Review;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Contains a list of typical reviews used for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class TypicalReviews {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private static DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private static Date date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            date \u003d dateFormat.parse(\"22/11/2019\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            LogsCenter.getLogger(TypicalReviews.class).warning(\"The date is not in the specified format (dd/MM/yyyy\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final Review REVIEW_1 \u003d new Review(\"good\", 3, 4, date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static final Review REVIEW_2 \u003d new Review(\"bad\", 4, 3, date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public TypicalReviews() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 27,
      "dvrylc": 3
    }
  },
  {
    "path": "src/test/java/seedu/eatme/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/eatme/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "package seedu.eatme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import static seedu.eatme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "import seedu.eatme.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 1,
      "dvrylc": 3,
      "-": 110
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003c?import seedu.eatme.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dvrylc"
        },
        "content": "\u003cfx:root type\u003d\"seedu.eatme.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dvrylc": 1,
      "-": 5
    }
  }
]
