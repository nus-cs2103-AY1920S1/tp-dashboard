[
  {
    "path": ".travis.yml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "language: java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "matrix:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  include:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    - jdk: openjdk11"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "script: \u003e-"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    ./config/travis/run-checks.sh \u0026\u0026"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    ./gradlew clean checkstyleMain checkstyleTest test coverage coveralls asciidoctor"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "deploy:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  skip_cleanup: true"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  provider: script"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  script: ./config/travis/deploy_github_pages.sh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  on:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    branch: master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "before_cache:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "cache:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  directories:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    - $HOME/.gradle/caches/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    - $HOME/.gradle/wrapper/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "after_failure:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "  -cat file:///home/travis/build/AY1920S1-CS2103T-T09-1/main/build/reports/tests/test/index.html"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 3,
      "-": 24
    }
  },
  {
    "path": "LICENSE",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "MIT License"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright (c) 2016 Software Engineering Education - FOSS Resources"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Permission is hereby granted, free of charge, to any person obtaining a copy"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "of this software and associated documentation files (the \"Software\"), to deal"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "in the Software without restriction, including without limitation the rights"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "copies of the Software, and to permit activities to whom the Software is"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "furnished to do so, subject to the following conditions:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "The above copyright notice and this permission notice shall be included in all"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "copies or substantial portions of the Software."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "SOFTWARE."
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "-": 20
    }
  },
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003d PlanÂ²travel"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T09-1/main[image:https://travis-ci.org/AY1920S1-CS2103T-T09-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T09-1/main[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-T09-1/main/badge.svg[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/1d3f52508a0e41d9a342043b1a3011f2[\"Codacy code quality\", link\u003d\"https://www.codacy.com/manual/OneArmyj/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dAY1920S1-CS2103T-T09-1/main\u0026utm_campaign\u003dBadge_Grade\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "* This is a desktop travel planning application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "* It is a Java sample application intended for students who students who are infrequent travelers while using Java as the main programming language."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "* It is *written in OOP fashion*."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "* The original source of the code is the AddressBook-Level3 project created by https://se-education.org/[SE-EDU initiative]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 3,
      "KxxMxxx": 5,
      "-": 27
    }
  },
  {
    "path": "_reposense/config.json",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "  \"authors\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      \"githubId\": \"KxxMxxx\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      \"displayName\": \"LEW K ... MING\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        \"KxxMxxx\", \"Kai Ming\", \"Lew Kai Ming\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      \"githubId\": \"ernestyyh\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      \"displayName\": \"YEO Y ... RNEST\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        \"ernestyyh\", \"Ernest\", \"Ernest Yeo\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      \"githubId\": \"1nefootstep\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      \"displayName\": \"LEONG ... XIANG\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        \"1newfootstep\", \"Sheu Xiang\", \"Leong Sheu Xiang\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      \"githubId\": \"oscarsu97\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      \"displayName\": \"OSCAR ... HONG\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        \"oscarsu97\", \"Oscar\", \"Oscar Su\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    },"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      \"githubId\": \"OneArmyj\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      \"displayName\": \"CHEN ... I JUN\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        \"OneArmyj\", \"Yi Jun\", \"Chen Yi Jun\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 39
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    implementation group: \u0027org.jfxtras\u0027, name: \u0027jfxtras-agenda\u0027, version: \u00279.0-r1-SNAPSHOT\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 2,
      "-": 155
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "PlanÂ²travel was developed by the T09-01 team of NUS School of Computing AY19/20. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Yeo Yik Hwee Ernest"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "image::ernestyyh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "{empty}[https://github.com/ernestyyh[github]] [\u003c\u003cernestyyh#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Role: Team Lead,  +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Responsibilities: Logic, Model"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Chen Yi Jun"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "image::onearmyj.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "{empty}[https://github.com/OneArmyj[github]] [\u003c\u003cOneArmyj#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Responsibilities: UI, Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Lew Kai Ming"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "image::kxxmxxx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "{empty}[https://github.com/KxxMxxx[github]] [\u003c\u003cKxxMxxx#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Responsibilities: Logic, Storage"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Oscar Su Zhen Hong"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "image::oscarsu97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "{empty}[https://github.com/oscarsu97[github]] [\u003c\u003coscarsu97#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Responsibilities: UI, Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Leong Sheu Xiang"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "image::1nefootstep.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "{empty}[https://github.com/1nefootstep[github]] [\u003c\u003c1nefootstep#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Responsibilities: Model, Storage"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 23,
      "-": 33
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T09-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "* *Email us* : You can also reach us at `e0322886@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "oscarsu97": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003d PlanÂ²travel - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T09-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU` Â Â Â Â  Since: `Jun 2016` Â Â Â Â  Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiComponent.png[]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ContactListPanel`, `ActivityListPanel`, `AccomodationListPanel`, `StatusBarFooter`, `HelpWindow` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ".  `Logic` uses the `PlannerParser` class to parse the user command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a contact)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"add activity n/Climb Fuji a/Mount Fuji\")` API call."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ".Interactions Inside the Logic Component for the `add activity n/Climb Fuji a/Mount Fuji` Command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "image::AddSequenceDiagram.png[]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "NOTE: The lifeline for `AddCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "* stores the Planner data."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* application data is split into 4 different components, `Accommodation`, `Activity`, `Contact`, `Itinerary`."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* can save `Accommodation` objects in json format and read it back."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* can save `Activity` objects in json format and read it back."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* can save `Contact` objects in json format and read it back."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* can save `Itinerary` objects in json format and read it back."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Step 2. The user executes `delete contact 5` command to delete the 5th contact in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Step 3. The user executes `add contact n/David ...` to add a new contact. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Step 4. The user now decides that adding the contact was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "The following accommodation diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the contact being deleted)."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003d\u003d\u003d [Proposed] Schedule optimisation"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "The proposed schedule optimisation feature utilises `TimeTable` and allows the user to schedule multiple activities within the same time slot. The following command is supported:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "* optimise budget INDEX_OF_DAY -- optimises and brings activities with the lowest cost into focus. This operation supports activities with or without a cost. Activities without a cost has a default cost of $0.00."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "Given below is a sample usage of the proposed feature:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "Step 1. User adds an activity with a cost:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "* `add activity n/lunch a/KFC c/5.00`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "Step 2. User adds another activity without a cost:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "* `add activity n/go for a walk a/park`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "Step 3. User schedules the first activity into a day:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "* `schedule activity 1 st/1300 et/1400 d/1`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "Step 4. User schedules the second activity into the same day:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "* `schedule activity 2 st/1300 et/1400 d/1`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "Step 6. User executes `optimise budget` command. The activities in that day would be shown in a way such that the activities with the lowest costs are in focus."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "Shown below is a summary of the execution of the command."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "image::OptimiseSequenceDiagram.png[]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "Aspect: How version comparison is executed:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "* Alternative 1(current choice): user overload each time slot."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "** Pros: User can save time by overloading a single day\u0027s schedule."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "** Cons: UI might get very cluttered when a single time slot has too many activities."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "* Alternative 2: user create copies of each day and choose which they prefer."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "** Pros: UI is neater, each day would not look too crammed."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "** Cons: May have a lot of permutations which is tedious for user to optimise."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Schedule Activity feature"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "*_PlanÂ²travel_* allows user to schedule an activity from the activity list to a specified time of a day."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "This is accomplished by executing the Schedule Command using `activity index`, `day index`, `start time` and `end time` of the activity."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "Eg. `schedule activity ACTIVITY_INDEX st/START_TIME et/END_TIME d/DAY_INDEX`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "The keywords from the command given by the user is parsed using `ScheduleCommandParser` which converts the string variable of start time and end time into a LocalTime format and wraps activity index and day index  with an Index class."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "These are then passed to the `ScheduleActivityCommand` for execution later on."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is a sequence diagram showing the creation of `ScheduleActivityCommand`:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".Sequence diagram showing how ScheduleActivityCommand is created."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "image::ScheduleActivityCommandCreation.png[]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "After the creation of `ScheduleActivityCommand`, `LogicManager` will proceed to call the `execute()` method of `ScheduleActivityCommand`."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "Below are the steps taken during the execution of `ScheduleActivityCommand`:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    1. `Model` will retrieve the list of days from the `Itinerary` and the list of activities from  `UniqueActivityList`."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    2. The `activityIndex` and `dayIndex` will then be used to obtain the target `Activity` from activity list"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "and target `Day` from list of days."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    3. `Activity` will be converted to `ActivityWithTime` using the start time and time given."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    4. This `ActivityWithTime` is then added to the list of `ActivityWithTime` for the target `Day`."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    5. A new `Day` is created with the updated list of `ActivityWithTime`."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    6. `Model` will replace the old `Day` with the new `Day` created in the `Itinerary`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is a sequence diagram showing the execution of `ScheduleActivityCommand`:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".Sequence diagram showing how ScheduleActivityCommand executes."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "image::ScheduleActivityExecution.png[]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Update activities for that particular day"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Create a new `Day` class with updated activity list for that day."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easier for developer to test the code."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Might create unnecessary overheads in the code by creating new object every time we schedule an activity."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Directly updates the activity list in the current `Day` class."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Seem more intuitive and simple to implement."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Might make it harder to debug if other functions/classes also depends on the same `Day` class."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003d\u003d\u003d Timetable"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Internally, Timetable is a TreeSet of ActivityWithTime. This allows fast access of ActivityWithTime stored in Timetable as well as giving Timetable the flexibility to accept Activities that start and end at any time instead of fixed intervals (e.g. 30 minute intervals)."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "To be precise, comparison between ActivityWithTime in the TreeSet is done by comparing their start times. To prevent overlapping activities, checks will be conducted before the adding. The start time of an ActivityWithTime that is added will not be before the end time of its floor neighbour and it\u0027s end time will not be after the start time of its ceiling neighbour."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "* Alternative 1: an Array of time slots that stores Activity"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "** Pros: Simple and intuitive to implement. UI for itinerary is easier to implement too. Very fast access to each Activity in the Timetable."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "** Cons: Constrained to fixed intervals. Hence, Activity start times and end times have to be in multiples of the fixed interval."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "* Alternative 2(current choice): a TreeSet of ActivityWithTime"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "** Pros: Allows flexible start times and end times. Fast access to Activity in Timetable. Does not allow ActivityWithTime objects to have the same start times."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "** Con: UI for itinerary might be difficult to implement as each the size of each block of ActivityWithTime in the UI is not the same."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "* a student who is inexperienced in planning for overseas trips"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* has a need to manage and schedule planner items"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "*Value proposition*: Many students wish to go for overseas trips during their holidays. They may be inexperienced in"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "trip planning. These students would benefit from having a template as a way to organise the information they have for"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "their trip. PlanÂ²travel can organise information faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "|`* * *` |traveller |refer to a list of attractions |I can decide on what activities to do for the day"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "|`* * *` |traveller |add activities that I want to do |I can plan my trip"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "|`* * *` |traveller |save my contact list |I can review/access them again"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "|`* * *` |traveller |access a list of accommodations |I can better plan for where to stay at"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|`* * *` |organised traveller |plan my daily planner |I can make better use of my travel time"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|`* * *` |lightweight traveller |save the planner to my phone |I can pack light"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "|`* * *` |infrequent traveller |add contacts |I can get in touch with the hotel concierge"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "|`* * *` |new user |view a help guide |I can familiarise myself with the application"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "|`* *` |traveller |categorise activities by interest |I can prioritise certain activities"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "|`* *` |solo traveller |keep a list of emergency contacts |I know who to contact in times of emergency"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|`* *` |eager traveller |follow an accommodation checklist |I will not miss out on anything"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "|`* *` |indecisive traveller |plan for multiple trips |I can decide on a later date"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "|`* *` |messy planner |quickly organise my travel research |I can streamline my planning processes"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "|`* *` |fast typist |be auto-corrected for my typos |I won\u0027t break my train of thought while planning"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "|`* *` |advanced user |use command shortcuts |I can improve my planning efficiency"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "|`* *` |advanced user |set where to save my itineraries |I can organise my itineraries"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "|`* *` |careless user |undo my mistakes |I don\u0027t have to retype if I make one"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "|`*` |traveller |rate activities that I have done |I can make a better recommendation to my friends"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "|`*` |traveller on a tight budget |estimate my budget for a trip |I can minimise my spendings"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "|`*` |traveller |organise and record my travel experiences |I can share them online"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|`*` |inexperienced planner |receive planning recommendations |I can improve my planner"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "(For all use cases below, the *System* is the `PlanÂ²travel` application and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Use case: Schedule accommodation"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "1.  User requests to schedule accommodation"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "2.  System shows a list of days and activities"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "3.  User requests to add a specific accommodation to a specific day"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "4.  System adds accommodation under selected day"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* 2a. The list of days is empty."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* 2b. The list of activities is empty."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "+"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* 3a. The day number is invalid."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "** 3a1. System shows an error message."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* 3b. The accommodation index is invalid."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "** 3b1. System shows an error message."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003d\u003d\u003d Use case: Add Contact"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "1.  User requests to add a new Contact"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "2.  System adds the new Contact into the database"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "+"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* 1a. The new Contact\u0027s syntax is not entered correctly."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "+"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "** 1a1. System shows a feedback to the user that the Contact was not entered correctly."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003d\u003d\u003d Use case: Undo command"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "1.  User requests to undo last possible command"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "2.  System reverts to state before the last possible command"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "+"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* 1a. There is no last possible command."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "+"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "*Availability*"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "1.  Application should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "*Performance*"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "1.  Application should respond within 2 seconds of client\u0027s query."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "*Usability*"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "1.  Application should be easy to use for new user when following the User Guide."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "2.  Application\u0027s interface should be intuitive and easy to understand for the user."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "*Reliability*"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "1. Application should be able to execute all user\u0027s commands without failing."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Deleting a contact"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ". Deleting a contact while all activities are listed"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ".. Prerequisites: List all activities using the `list` command. Multiple activities in the list."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "   Expected: No contact is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 22,
      "OneArmyj": 27,
      "ernestyyh": 47,
      "KxxMxxx": 89,
      "-": 438,
      "oscarsu97": 16
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What other user stories do you think AddressBook should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all activities who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Phone`, `Email`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Phone: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "The above method can be used to get a printable string representing a bunch of contact details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// p is a Person object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "A"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command. Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 3,
      "-": 213
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003d Plan^2^Travel - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T09-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "By: `Team CS2103T T09-1`      Since: `Aug 2019`      License: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Plan^2^Travel is for those who *prefer to use a desktop app for planning an overseas trip*. More importantly, Plan^2^Travel is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Plan^2^Travel can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ".  Download the latest `plan2travel.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Plan^2^Travel."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* *`help`* : a list of commands available on Plan^2^Travel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* **`add act`**`n/Visit Gundam Museum a/Tokyo p/65543221` : adds an activity named `Visit Gundam Museum` at location `Tokyo` with contact number `65543221` to the activity list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Eat lunch`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/Eat lunch t/Western` or as `n/Eat lunch`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `â¦`â after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Displays a help page +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "// tag::addaccommodation[]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Adding an accommodation: `add acc`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Creates an accommodation to the accommodation list +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Format: `add acc n/NAME a/ADDRESS [p/PHONE_NUMBER][e/EMAIL][t/TAGS]`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `add acc n/Hotel 81 a/Orchard /p67555312`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `add acc n/Mandarin Oriental a/Ang Mo Kio`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "// end::addaccommodation[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Editing an accommodation: `edit acc`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Edits an accommodation +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Format: `edit act INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [t/TAGS]`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* Edits the accommodation with the specified INDEX. The index refers to the index number shown in the displayed accommodation list. The index must be a positive integer 1, 2, 3, ..."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `edit acc 1 n/MBS a/Marina Bay t/Atas`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Edits the name, address and tag of the 1st accommodation to be MBS, Marina Bay and Atas respectively."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "// tag::deleteaccommodation[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Deleting an accommodation: `delete acc`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Delete one or more accommodation from the accommodation list +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Format: `delete acc INDEX...`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* Deletes the accommodation at the specified INDEX."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* The index refers to the index number shown in the displayed accommodation list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* The index must be a positive integer 1, 2, 3, â¦"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `delete acc 2`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Deletes the 2nd accommodation in the accommodation list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "// end::deleteaccommodation[]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Listing all accommodation: `list acc`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Displays a list view of all the accommodation +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Format: `list acc`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "// tag::addactivity[]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Adding an activity: `add act`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Creates an activity to the activity list +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Format: `add act n/NAME a/ADDRESS [p/PHONE_NUMBER][e/EMAIL][t/TAGS]`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `add act n/Visit Gundam Museum a/Tokyo /p67521312`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `add act n/Ski a/Mount Sinai`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "// end::addactivity[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Editing an activity: `edit act`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Edits an activity +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Format: `edit act INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [t/TAGS]`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* Edits the activity with the specified INDEX. The index refers to the index number shown in the displayed activity list. The index must be a positive integer 1, 2, 3, ..."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `edit activity 1 n/Dinner a/Hotel t/Western`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Edits the name, address and tag of the 1st activity to be Dinner, Hotel and Western respectively."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "// tag::deleteactivity[]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Deleting an activity: `delete act`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Delete one or more activities from the activity list +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Format: `delete act INDEX...`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* Deletes the activity at the specified INDEX."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* The index refers to the index number shown in the displayed activity list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* The index must be a positive integer 1, 2, 3, â¦"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `delete act 2`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Deletes the 2nd activity in the activity list."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "// end::deleteactivity[]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Listing all activities: `list act`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Displays a list view of all the activities +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Format: `list act`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Adding a contact: `add con`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Creates a contact to the contact list +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Format: `add con n/NAME p/PHONE_NUMBER [e/EMAIL] [a/ADDRESS] [t/TAGS]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `add con n/Bob p/83746658 t/false`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Editing a contact: `edit con`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Edits an existing contact in the contact list +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Format: `edit con INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/IS_EMERGENCY]`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* Edits the contact with the specified INDEX. The index refers to the index number shown in the displayed contact list. The index must be a positive integer 1, 2, 3, ..."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `edit con 1 p/93746658 t/true`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Edits the phone number and tag of the 1st contact to be 93746658 and true respectively."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Deleting a contact: `delete con`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Deletes a contact from the contact list +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Format: `delete con INDEX...`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* Deletes the contact at the specified INDEX."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* The index refers to the index number shown in the displayed contact list."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* The index must be a positive integer 1, 2, 3, â¦"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `delete con 3`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Deletes the 3rd contact in the contact list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Listing all contacts: `list con`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Displays a list view of all the contact list +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Format: `list con`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003d\u003d\u003d Adds days to the schedule: `add day`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Adds DAY_NUMBER amount of days to the itinerary +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Format: `add day DAY_NUMBER`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* `add day 7`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Adds 7 days to the back of the itinerary."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003d\u003d\u003d Deleting days: `delete day`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Deletes DAY_NUMBER th day of the itinerary. +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Format: `delete day DAY_NUMBER`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* `delete day 2`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Deletes the day 2 from the itinery."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003d\u003d\u003d Scheduling activities to a day: `schedule`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Schedules activities to a day +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Format: `schedule DAY_NUMBER ACTIVITY_INDEXâ¦`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* `schedule day 2 5 10 4 11`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Schedules activities 5, 10, 4, 11 under day 2."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003d\u003d\u003d Unscheduling activities from a day: `unschedule activity`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Unschedule activities from a day +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Format: `unschedule activity ACTIVITY_INDEX... DAY_NUMBER`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* `unschedule activity 5 day 1`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "This remove activity 5 from day 1."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003d\u003d\u003d Unscheduling activities from a day: `unschedule time`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Unschedule activities from a day +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Format: `unschedule time TIME_BY_24HR_CLOCK day DAY_NUMBER`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* `unschedule time 2300 day 1`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "This removes the activity at 2300 from day 1 of the itinerary."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003d\u003d\u003d List the activities in a day: `list day`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "List the activities in a day +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Format: `list day DAY_NUMBER`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* `list day 1`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "This will list out all the activities scheduled for day 1."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003d\u003d\u003d Undo: `undo`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Undo by one action +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003d\u003d\u003d Redo: `redo`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Redo by one action +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003d\u003d\u003d Look up history of inputs: `history`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Lists the inputs that have been entered +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003d\u003d\u003d Saving the data: `save`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Saves the state of the program. If provided with a schedule name, it will add a new file with the schedule name. Else, it will simply save it to the current save file +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Format: `save [SCHEDULE_NAME]`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* `save japan_trip`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003d\u003d\u003d Loading the data: `load`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "The user can load the desired schedule with the schedule name. Else, the user can add a new schedule +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Format: `load SCHEDULE_NAME`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* `load beijing`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003d\u003d\u003d Export schedule: `export`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Exports the schedule into a pdf +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Format: `export`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003d\u003d\u003d Auto-correct"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "When there is an invalid command, the input command is checked against the known command list for similarity and the user will be prompted with the closest command match"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "* `hitsory`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "User will be prompted with the âhistoryâ command as a suggestion."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it adds with the file that contains the data of your previous Plan^2^Travel folder."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** *Add* :"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `add acc n/NAME a/ADDRESS [p/PHONE_NUMBER] [e/EMAIL] [t/TAG]...` +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "e.g. `add acc n/Paradise Hotel a/23 Amoy Quee Road p/22224444`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `add act n/NAME a/ADDRESS [p/PHONE_NUMBER] [e/EMAIL] [t/TAG]...` +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "e.g. `add act n/Skiing a/Mount Kurabaki`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `add con n/NAME p/PHONE_NUMBER [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "e.g. `add act n/James Ho a/123, Clementi Rd, 1234665 p/22224444 e/jamesho@example.com t/friend t/colleague`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** *Clear* : `clear`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** *Delete* : +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `delete acc INDEX`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `delete act INDEX`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `delete con INDEX`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** *Edit* :"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `edit acc INDEX [n/NAME] [a/ADDRESS] [p/PHONE_NUMBER] [e/EMAIL] [t/TAG]...` +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "e.g. `edit acc 3 n/Kent Ridge Hotel a/Clementi`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `edit act INDEX [n/NAME] [a/ADDRESS] [p/PHONE_NUMBER] [e/EMAIL] [t/TAG]...` +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "e.g. `edit act 5 n/Go Disneyland `"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `edit con INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "e.g. `edit con 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** *Find* :"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** *List* :"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `list acc`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `list act`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* `list con`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** *Help* : `help`"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 122,
      "ernestyyh": 120,
      "-": 112
    }
  },
  {
    "path": "docs/diagrams/AddSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "participant \":PlannerParser\" as PlannerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "participant \":AddActivityCommand\" as AddActivityCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "participant \":ModelManager\" as ModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "[-\u003e LogicManager : execute(\"add activity n/Climb Fuji a/Mount Fuji\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "LogicManager -\u003e PlannerParser : parseCommand(\"add activity n/Climb Fuji a/Mount Fuji\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate PlannerParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "PlannerParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "AddCommandParser --\u003e PlannerParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "PlannerParser -\u003e AddCommandParser : parse(\"activity n/Climb Fuji a/Mount Fuji\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "AddCommandParser -\u003e AddCommandParser : parseActivity(\"n/Climb Fuji a/Mount Fuji\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "create AddActivityCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "AddCommandParser -\u003e AddActivityCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate AddActivityCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "AddActivityCommand --\u003e AddCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate AddActivityCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "AddCommandParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "AddCommandParser --\u003e PlannerParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "AddCommandParser -[hidden]-\u003e PlannerParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "PlannerParser --\u003e LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate PlannerParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "LogicManager -\u003e AddActivityCommand : execute()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate AddActivityCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "AddActivityCommand -\u003e ModelManager : addActivity()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "ModelManager --\u003e AddActivityCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "AddActivityCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "CommandResult --\u003e AddActivityCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "AddActivityCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate AddActivityCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 76
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(planner)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "Class PlannerParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "LogicManager --\u003e\"1\" PlannerParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "PlannerParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Interface ReadOnlyPlanner \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Class Planner"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Class ReadOnlyPlanner"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Package Field\\n {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Class H1 #FFFFFF"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Package ItineraryItem {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    Abstract Class ItineraryItem"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    Package Activity {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    Class Activity"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    Class UniqueActivityList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    Package Accommodation {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    Class Accommodation"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    Class UniqueAccommodationList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Package Day {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Class ActivityWithTime"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Class Day"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Class Timetable"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Class Itinerary"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Package Contact {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Class Contact"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Class UniqueContactList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Planner .up.|\u003e ReadOnlyPlanner"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "ModelManager o--\u003e \"1\" Planner"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Planner *--\u003e UniqueAccommodationList"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Planner *--\u003e UniqueContactList"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Planner *--\u003e UniqueActivityList"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Planner *--\u003e Itinerary"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "ItineraryItem *--\u003e  Name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "ItineraryItem *-[hidden]-\u003e Name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "ItineraryItem *-[hidden]-\u003e Name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "ItineraryItem *--\u003e Address"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "ItineraryItem *--\u003e \"0..1  \\n\" Contact"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "ItineraryItem *-[hidden]-\u003e Contact"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "ItineraryItem *-up-\u003e \"\\n        *\" Tag"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "ItineraryItem \u003c|-- Accommodation"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "ItineraryItem \u003c|-[hidden]- Accommodation"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "ItineraryItem \u003c|-- Activity"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "UniqueActivityList o--\u003e \"         *\" Activity"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "UniqueAccommodationList o--\u003e \"        *\" Accommodation"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "UniqueContactList o--\u003e \"*\" Contact"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Contact *--\u003e  Name"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Contact *-[hidden]-\u003e  Phone"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Contact *-[hidden]-\u003e  Phone"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Contact *--\u003e  Phone"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Contact *-[hidden]-\u003e \"0..1\" Email"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Contact *-[hidden]-\u003e \"0..1\" Email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Contact *--\u003e \"0..1\" Email"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Contact *-[hidden]-\u003e \"0..1\" Address"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Contact *-[hidden]-\u003e \"0..1\" Address"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Contact *--\u003e \"0..1\" Address"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Contact *-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Itinerary o--\u003e \" *\" Day"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Day *--\u003e Timetable"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Timetable o--\u003e \" *\" ActivityWithTime"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Name -[hidden]right-\u003e H1"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 73,
      "-": 35
    }
  },
  {
    "path": "docs/diagrams/OptimiseSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "participant \":PlannerParser\" as PlannerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "participant \":OptimiseCommandParser\" as OptimiseCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "participant \":OptimiseBudgetCommand\" as OptimiseBudgetCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "participant \":ModelManager\" as ModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "participant \":Day\" as Day MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "[-\u003e LogicManager : execute(\u0027optimise budget d/1\u0027)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "LogicManager -\u003e PlannerParser : parseCommand(\u0027optimise budget d/1\u0027)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate PlannerParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "create OptimiseCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "PlannerParser -\u003e OptimiseCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate OptimiseCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "OptimiseCommandParser --\u003e PlannerParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate OptimiseCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "PlannerParser -\u003e OptimiseCommandParser : parse(\u0027budget d/1\u0027)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate OptimiseCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "OptimiseCommandParser -\u003e OptimiseCommandParser : parseBudget(\u0027d/1\u0027)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate OptimiseCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "create OptimiseBudgetCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "OptimiseCommandParser -\u003e OptimiseBudgetCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate OptimiseBudgetCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "OptimiseBudgetCommand --\u003e OptimiseCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate OptimiseBudgetCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "OptimiseCommandParser -\u003e OptimiseCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate OptimiseCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "OptimiseCommandParser --\u003e PlannerParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate OptimiseCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "OptimiseCommandParser -[hidden]-\u003e PlannerParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "destroy OptimiseCommandParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "PlannerParser --\u003e LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate PlannerParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "LogicManager -\u003e OptimiseBudgetCommand : execute"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate OptimiseBudgetCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "OptimiseBudgetCommand -\u003e ModelManager : getFilteredItinerary()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "ModelManager --\u003e OptimiseBudgetCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "OptimiseBudgetCommand -\u003e Day : optimiseBudget()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate Day"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "Day --\u003e OptimiseBudgetCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate Day"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "OptimiseBudgetCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "CommandResult --\u003e OptimiseBudgetCommand : commandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "OptimiseBudgetCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate OptimiseBudgetCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "[\u003c-LogicManager : commandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 82
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Package Storage \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Class JsonAdaptedTag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Package Accommodation {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Interface AccommodationStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Class JsonAccommodationStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Class JsonSerializableAccommodation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Class JsonAdaptedAccommodation"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Package Activity {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Interface ActivityStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Class JsonActivityStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Class JsonSerializableActivity"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Class JsonAdaptedActivity"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Package Contact {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Interface ContactStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Class JsonContactStorage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Class JsonSerializableContact"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Class JsonAdaptedContact"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Package Day {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Interface ItineraryStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Class JsonItineraryStorage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Class JsonSerializableItinerary"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Class JsonAdaptedDay"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Class JsonAdaptedActivityWithTime"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "HiddenOutside ...\u003eStorage"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "StorageManager .up.|\u003e Storage"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "StorageManager o--\u003e AccommodationStorage"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "StorageManager o----\u003e ActivityStorage"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "StorageManager o--\u003e ContactStorage"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "StorageManager o-left-\u003e ItineraryStorage"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonAccommodationStorage .right.|\u003e AccommodationStorage"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonAccommodationStorage .down.\u003e JsonSerializableAccommodation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonSerializableAccommodation -right-\u003e JsonAdaptedAccommodation"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonAdaptedAccommodation -down-\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonAdaptedAccommodation -down-\u003e JsonAdaptedContact"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonActivityStorage .right.|\u003e ActivityStorage"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonActivityStorage .down.\u003e JsonSerializableActivity"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonSerializableActivity -right-\u003e JsonAdaptedActivity"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonAdaptedActivity -down-\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonAdaptedActivity -down----\u003e JsonAdaptedContact"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonContactStorage .right.|\u003e ContactStorage"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonContactStorage .down.\u003e JsonSerializableContact"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonSerializableContact -right-\u003e JsonAdaptedContact"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonAdaptedContact -up-\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonItineraryStorage .left.|\u003e ItineraryStorage"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonItineraryStorage .right.\u003e JsonSerializableItinerary"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonSerializableItinerary -down-\u003e JsonAdaptedDay"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonAdaptedDay -right-\u003e JsonAdaptedActivityWithTime"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "JsonAdaptedActivityWithTime -down--\u003e JsonAdaptedActivity"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 64,
      "-": 14
    }
  },
  {
    "path": "docs/diagrams/UnscheduleActivitySequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "participant \":PlannerParser\" as PlannerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "participant \":UnscheduleCommandParser\" as UnscheduleCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "participant \"u:UnscheduleCommand\" as UnscheduleCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "[-\u003e LogicManager : execute(\"unschedule activity 1 d/1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "LogicManager -\u003e PlannerParser : parseCommand(\"unschedule activity 1 d/1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "activate PlannerParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "create UnscheduleCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "PlannerParser -\u003e UnscheduleCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "activate UnscheduleCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "UnscheduleCommandParser --\u003e PlannerParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "deactivate UnscheduleCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "PlannerParser -\u003e UnscheduleCommandParser : parse(\"activity 1 d/1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "activate UnscheduleCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "UnscheduleCommandParser -\u003e UnscheduleCommandParser : parseUnscheduleActivity(\"1 d/1\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "activate UnscheduleCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "create UnscheduleCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "UnscheduleCommandParser -\u003e UnscheduleCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "activate UnscheduleCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "UnscheduleCommand --\u003e UnscheduleCommandParser : u"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "deactivate UnscheduleCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "UnscheduleCommandParser --\u003e UnscheduleCommandParser : u"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "deactivate UnscheduleCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "UnscheduleCommandParser --\u003e PlannerParser : u"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "deactivate UnscheduleCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "UnscheduleCommandParser -[hidden]-\u003e PlannerParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "destroy UnscheduleCommandParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "PlannerParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "deactivate PlannerParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "LogicManager -\u003e UnscheduleCommand : execute()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "activate UnscheduleCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "UnscheduleCommand -\u003e Model : getFilteredDayList()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Model --\u003e UnscheduleCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "UnscheduleCommand -\u003e Model : getFilteredActivityList()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Model --\u003e UnscheduleCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "UnscheduleCommand -\u003e UnscheduleCommand : createUnscheduledActivityDay(dayToEdit, activityToUnschedule)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "activate UnscheduleCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "UnscheduleCommand --\u003e UnscheduleCommand : d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "deactivate UnscheduleCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "UnscheduleCommand -\u003e Model : setDays(editedDays)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "\u0027Hidden arrow to make some space between setDays and CommandResult."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "Model -[hidden]-\u003e UnscheduleCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "UnscheduleCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "CommandResult --\u003e UnscheduleCommand"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "UnscheduleCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "deactivate UnscheduleCommand"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 94
    }
  },
  {
    "path": "docs/team/1nefootstep.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d Leong Sheu Xiang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d PROJECT: PlanÂ²travel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "PlanÂ²travel is a desktop travel planning application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface) and it has a GUI created with JavaFX. It is a Java sample application intended for students who students who are infrequent travelers while using Java as the main programming language."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 72
    }
  },
  {
    "path": "docs/team/KxxMxxx.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d Lew Kai Ming - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d PROJECT: PlanÂ²travel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "PlanÂ²travel is a desktop travel planning application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface) and it has a GUI created with JavaFX. It is a Java sample application intended for students who students who are infrequent travelers while using Java as the main programming language."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 72
    }
  },
  {
    "path": "docs/team/OneArmyj.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d Chen Yi Jun - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d PROJECT: PlanÂ²travel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "PlanÂ²travel is a desktop travel planning application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface) and it has a GUI created with JavaFX. It is a Java sample application intended for students who students who are infrequent travelers while using Java as the main programming language."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 3,
      "-": 69
    }
  },
  {
    "path": "docs/team/ernestyyh.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d Yeo Yik Hwee Ernest - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d PROJECT: PlanÂ²travel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "PlanÂ²travel is a desktop travel planning application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface) and it has a GUI created with JavaFX. It is a Java sample application intended for students who students who are infrequent travelers while using Java as the main programming language."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 72
    }
  },
  {
    "path": "docs/team/oscarsu97.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d Oscar Su Zhen Hong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d PROJECT: PlanÂ²travel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "PlanÂ²travel is a desktop travel planning application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface) and it has a GUI created with JavaFX. It is a Java sample application intended for students who students who are infrequent travelers while using Java as the main programming language."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 72
    }
  },
  {
    "path": "docs/templates/LICENSE",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "This directory contains code from the Asciidoctor Project."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "(https://asciidoctor.org/)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "MIT License"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright (C) 2012-2018 Dan Allen, Ryan Waldron and the Asciidoctor Project"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Permission is hereby granted, free of charge, to any person obtaining a copy"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "of this software and associated documentation files (the \"Software\"), to deal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "in the Software without restriction, including without limitation the rights"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "copies of the Software, and to permit activities to whom the Software is"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "furnished to do so, subject to the following conditions:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "The above copyright notice and this permission notice shall be included in"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "all copies or substantial portions of the Software."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "THE SOFTWARE."
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "-": 23
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Changes the remark of an existing contact in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the contact identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            + \"by the index number used in the last contact listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @param index of the contact in the filtered contact list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @param remark of the contact to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "We achieve that by working with the `Contact` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Each field in a Contact is implemented as a separate class (e.g. a `Name` object represents the contact\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a contact."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Create a new `Remark` in `seedu.address.model.contacts`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each contact."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ".ContactCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.ContactCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/ContactListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d Modify `Contact` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Since `ContactCard` displays data from a `Contact`, we need to update `Contact` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Modify `Contact`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "We change the constructor of `Contact` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Contact`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Unfortunately, a change to `Contact` will cause other commands to break, you will have to modify these commands to use the updated `Contact`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Contact` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedContact` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Let\u0027s update `JsonAdaptedContact` to work with our new `Contact`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Now that we have finalized the `Contact` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ".ContactCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public ContactCard(Contact contact, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    remark.setText(contact.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Contact`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Since all fields in a `Contact` are immutable, we create a new instance of a `Contact` with the values that we want and save it with `Model#setContact()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Contact: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Contact: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        List\u003cContact\u003e lastShownList \u003d model.getFilteredContactList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_Contact_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact contactToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact editedAccommodation \u003d new Contact(contactToEdit.getName(), contactToEdit.getPhone(), contactToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                contactToEdit.getAddress(), remark, contactToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        model.setContact(contactToEdit, editedAccommodation);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        model.updateFilteredContactList(PREDICATE_SHOW_ALL_ContactS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedAccommodation));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code contactToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private String generateSuccessMessage(Contact contactToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return String.format(message, contactToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 41,
      "-": 384
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Contact` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Contact`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "The `address` field in `Contact` is actually an instance of the `seedu.address.model.field.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Other usages like in `EditContactDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditContactDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ". Safe delete the field `address` in `EditContactDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "For example, removing the `address` field from the `Contact` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "For example, there is a `$address` in each `ContactCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "A quick look at the `ContactCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ".ContactCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ".ContactCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ".invalidContactAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "  \"activities\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    \"name\": \"Contact with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 14,
      "-": 103
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "`seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     Command command \u003d plannerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "         storage.savePlanner(model.getPlanner());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ".PlannerParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ".PlannerParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "command and store any possible changes in an `EditContactDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "`editContactDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Contact contactToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Contact editedContact \u003d createEditedContact(contactToEdit, editContactDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    if (!contactToEdit.isSameContact(editedContact) \u0026\u0026 model.hasContact(editedContact)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    model.setContact(contactToEdit, editedContact);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    model.updateFilteredContactList(PREDICATE_SHOW_ALL_CONTACTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_CONTACT_SUCCESS, editedContact));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "`JsonPlanner#savePlanner()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializablePlanner``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ".JsonSerializablePlanner#JsonSerializablePlanner()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Converts a given {@code ReadOnlyPlanner} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * {@code JsonSerializablePlanner}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public JsonSerializablePlanner(ReadOnlyPlanner source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    activities.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        source.getContactList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "              .map(JsonAdaptedContact::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ". It appears that a `JsonAdaptedContact` is created for each `Contact` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "`JsonSerializablePlanner`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "this tutorial, you learned more about the inner workings of Planner and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/ã¢ãªã¹ ã¦ã¼`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ".. Save the planner in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ".. Add a new field to `Contact`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ".. Add a new entity to the planner"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 28,
      "-": 230
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.AccommodationManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ActivityManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ContactManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.Itinerary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyAccommodation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyActivity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyContact;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyItinerary;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.accommodation.AccommodationStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.accommodation.JsonAccommodationStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.activity.ActivityStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.activity.JsonActivityStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.contact.ContactStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.contact.JsonContactStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.day.ItineraryStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.day.JsonItineraryStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Planner ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        AccommodationStorage accommodationStorage \u003d new JsonAccommodationStorage(userPrefs.getAccommodationFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ActivityStorage activityStorage \u003d new JsonActivityStorage(userPrefs.getActivityFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ContactStorage contactStorage \u003d new JsonContactStorage(userPrefs.getContactFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ItineraryStorage itineraryStorage \u003d new JsonItineraryStorage(userPrefs.getItineraryFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        storage \u003d new StorageManager(accommodationStorage, activityStorage, contactStorage, itineraryStorage,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                userPrefsStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s accommodation, activity, contact,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * itinerary and {@code userPrefs}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ReadOnlyAccommodation accommodation \u003d initAccommodationManager(storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ReadOnlyActivity activity \u003d initActivityManager(storage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ReadOnlyContact contact \u003d initContactManager(storage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ReadOnlyItinerary itinerary \u003d initItinerary(storage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return new ModelManager(accommodation, activity, contact, itinerary, userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns a {@code AccommodationManager} with the data from {@code storage}\u0027s accommodation and {@code userPrefs}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * \u003cbr\u003e The data from the sample accommodationManager will be used instead if {@code storage}\u0027s"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * accommodation is not found, or an empty accommodationManager will be used instead if errors occur"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * when reading {@code storage}\u0027s accommodation."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private ReadOnlyAccommodation initAccommodationManager(Storage storage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Optional\u003cReadOnlyAccommodation\u003e accommodationManagerOptional;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ReadOnlyAccommodation initialData;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            accommodationManagerOptional \u003d storage.readAccommodation();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            if (!accommodationManagerOptional.isPresent()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AccommodationManager\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            initialData \u003d accommodationManagerOptional.orElseGet(SampleDataUtil::getSampleAccommodationManager);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    + \"AccommodationManager\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            initialData \u003d new AccommodationManager();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    + \"AccommodationManager\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            initialData \u003d new AccommodationManager();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return initialData;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns a {@code ActivityManager} with the data from {@code storage}\u0027s activity and {@code userPrefs}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * \u003cbr\u003e The data from the sample activityManager will be used instead if {@code storage}\u0027s activity is not found,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * or an empty activityManager will be used instead if errors occur when reading {@code storage}\u0027s activity."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private ReadOnlyActivity initActivityManager(Storage storage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Optional\u003cReadOnlyActivity\u003e activityManagerOptional;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ReadOnlyActivity initialData;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            activityManagerOptional \u003d storage.readActivity();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            if (!activityManagerOptional.isPresent()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ActivityManager\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            initialData \u003d activityManagerOptional.orElseGet(SampleDataUtil::getSampleActivityManager);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    + \"ActivityManager\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            initialData \u003d new ActivityManager();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    + \"ActivityManager\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            initialData \u003d new ActivityManager();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return initialData;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns a {@code ContactManager} with the data from {@code storage}\u0027s contact and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The data from the sample contactManager will be used instead if {@code storage}\u0027s contact is not found,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * or an empty contactManager will be used instead if errors occur when reading {@code storage}\u0027s contact."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private ReadOnlyContact initContactManager(Storage storage) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Optional\u003cReadOnlyContact\u003e contactManagerOptional;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ReadOnlyContact initialData;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            contactManagerOptional \u003d storage.readContact();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            if (!contactManagerOptional.isPresent()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ContactManager\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            initialData \u003d contactManagerOptional.orElseGet(SampleDataUtil::getSampleContactManager);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    + \"ContactManager\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            initialData \u003d new ContactManager();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    + \"ContactManager\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            initialData \u003d new ContactManager();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return initialData;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns a {@code Itinerary} with the data from {@code storage}\u0027s itinerary and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The data from the sample itinerary will be used instead if {@code storage}\u0027s itinerary is not found,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * or an empty itinerary will be used instead if errors occur when reading {@code storage}\u0027s itinerary."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private ReadOnlyItinerary initItinerary(Storage storage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Optional\u003cReadOnlyItinerary\u003e itineraryOptional;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ReadOnlyItinerary initialData;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            itineraryOptional \u003d storage.readItinerary();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            if (!itineraryOptional.isPresent()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Itinerary\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            initialData \u003d itineraryOptional.orElseGet(SampleDataUtil::getSampleItinerary);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty \""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    + \"Itinerary\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            initialData \u003d new Itinerary();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    + \"Itinerary\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            initialData \u003d new Itinerary();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return initialData;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Planner\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        logger.info(\"Starting Planner \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 131,
      "-": 161
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_INVALID_ACCOMMODATION_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            \"The accommodation index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX \u003d \"The activity index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX \u003d \"The contacts index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String MESSAGE_INVALID_DAY_DISPLAYED_INDEX \u003d \"The day index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String MESSAGE_ACTIVITIES_LISTED_OVERVIEW \u003d \"%1$d all activities listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String MESSAGE_CONTACTS_LISTED_OVERVIEW \u003d \"%1$d all contacts listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String MESSAGE_DAYS_LISTED_OVERVIEW \u003d \"%1$d all days listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_NOT_PRESENT_IN_DAY \u003d \"Activity not found in day!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 2,
      "OneArmyj": 4,
      "KxxMxxx": 3,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyAccommodation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyActivity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyContact;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyItinerary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the Accommodation."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @see seedu.address.model.Model#getAccommodations()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ReadOnlyAccommodation getAccommodations();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of accommodations */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ObservableList\u003cAccommodation\u003e getFilteredAccommodationList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the user prefs\u0027 accommodation file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getAccommodationFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the Activity."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @see seedu.address.model.Model#getActivities()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ReadOnlyActivity getActivities();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of activities */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ObservableList\u003cActivity\u003e getFilteredActivityList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the user prefs\u0027 activity file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getActivityFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the Contact."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @see seedu.address.model.Model#getContacts()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ReadOnlyContact getContacts();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of contacts */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ObservableList\u003cContact\u003e getFilteredContactList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the user prefs\u0027 contact file path."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getContactFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the Itinerary."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @see seedu.address.model.Model#getItinerary()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ReadOnlyItinerary getItinerary();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /** Returns an unmodifiable view of the filtered itinerary */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ObservableList\u003cDay\u003e getFilteredItinerary();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the user prefs\u0027 itinerary file path."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getItineraryFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 55,
      "KxxMxxx": 2,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.logic.parser.PlannerParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyAccommodation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyActivity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyContact;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyItinerary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final PlannerParser plannerParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        plannerParser \u003d new PlannerParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Command command \u003d plannerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            storage.saveAccommodation(model.getAccommodations());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            storage.saveActivity(model.getActivities());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            storage.saveContact(model.getContacts());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            storage.saveItinerary(model.getItinerary());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ReadOnlyAccommodation getAccommodations() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return model.getAccommodations();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ReadOnlyActivity getActivities() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return model.getActivities();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ReadOnlyContact getContacts() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return model.getContacts();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ReadOnlyItinerary getItinerary() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return model.getItinerary();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ObservableList\u003cAccommodation\u003e getFilteredAccommodationList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return model.getFilteredAccommodationList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return model.getFilteredActivityList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ObservableList\u003cContact\u003e getFilteredContactList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return model.getFilteredContactList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ObservableList\u003cDay\u003e getFilteredItinerary() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return model.getFilteredItinerary();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getAccommodationFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return model.getAccommodationFilePath();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getActivityFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return model.getActivityFilePath();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getContactFilePath() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return model.getContactFilePath();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getItineraryFilePath() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return model.getItineraryFilePath();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 60,
      "KxxMxxx": 2,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAccommodationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Adds an accommodation to the itinerary."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class AddAccommodationCommand extends AddCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String SECOND_COMMAND_WORD \u003d \"accommodation\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + SECOND_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \": Adds an Accommodation to the itinerary.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_PHONE + \"NUMBER \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Example: add \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_NAME + \"Hotel 81 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_ADDRESS + \"Geylang \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_TAG + \"cheap\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New accommodation added: %1s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOMMODATION \u003d \"This accommodation already exists in the itinerary.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final Accommodation toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Creates an AddActivityCommand to add the specified {@Activity}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public AddAccommodationCommand(Accommodation accommodation) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(accommodation);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        toAdd \u003d accommodation;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (model.hasAccommodation(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACCOMMODATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (toAdd.getContact().isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            if (model.hasPhone(toAdd.getContact().get().getPhone())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Contact contact \u003d model.getContactByPhone(toAdd.getContact().get().getPhone()).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                model.addAccommodation(new Accommodation(toAdd.getName(), toAdd.getAddress(), contact,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        toAdd.getTags()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                model.addAccommodation(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            model.addAccommodation(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                || (other instanceof AddAccommodationCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddAccommodationCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddActivityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Adds an activity to the itinerary."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class AddActivityCommand extends AddCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String SECOND_COMMAND_WORD \u003d \"activity\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + SECOND_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \": Adds an Activity to the itinerary.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Example: add \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_NAME + \"visit mt Fuji \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_ADDRESS + \"Mount Fuji \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_TAG + \"sight-seeing\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New activity added: %1s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACTIVITY \u003d \"This activity already exists in the itinerary.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final Activity toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Creates an AddActivityCommand to add the specified {@Activity}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public AddActivityCommand(Activity activity) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        toAdd \u003d activity;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (model.hasActivity(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (toAdd.getContact().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            if (model.hasPhone(toAdd.getContact().get().getPhone())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Contact contact \u003d model.getContactByPhone(toAdd.getContact().get().getPhone()).get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                model.addActivity(new Activity(toAdd.getName(), toAdd.getAddress(), contact,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        toAdd.getTags()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                model.addActivity(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            model.addActivity(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                || (other instanceof AddActivityCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddActivityCommand) other).toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Represents AddActivityCommand, AddContactCommand and AddDayCommand."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \": either a contact, activity or day can be added, depending on the word that comes after\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 5,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class AddContactCommand extends AddCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String SECOND_COMMAND_WORD \u003d \"contact\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + SECOND_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \": Adds a contact to the contact list. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + SECOND_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New contact added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONTACT \u003d \"This contact already exists in the contact list\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final Contact toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Creates an AddContactCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public AddContactCommand(Contact contact) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(contact);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        toAdd \u003d contact;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (model.hasContact(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        model.addContact(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                || (other instanceof AddContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddContactCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddDayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Adds a number of days to the itinerary."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class AddDayCommand extends AddCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String SECOND_COMMAND_WORD \u003d \"day\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + SECOND_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \": Adds the number of days specified to the itinerary.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"NUMBER\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Example: add \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"NUMBER_OF_DAYS\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%d day(s) added\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final int toAdd;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Creates an AddDayCommand to add the specified {@code List} of {@code Day}s"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public AddDayCommand(int numDays) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(numDays);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        toAdd \u003d numDays;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        model.addDays(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                || (other instanceof AddContactCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 toAdd \u003d\u003d ((AddDayCommand) other).toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.AccommodationManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ActivityManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ContactManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.Itinerary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Data has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        model.setAccommodations(new AccommodationManager());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        model.setActivities(new ActivityManager());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        model.setContacts(new ContactManager());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        model.setItinerary(new Itinerary());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 9,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteAccommodationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Removes an accommodation from the accommodation list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class DeleteAccommodationCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String SECOND_COMMAND_WORD \u003d \"accommodation\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \": Deletes the accommodation identified by the index number used in the displayed accommodation list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + SECOND_COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_DELETE_ACCOMMODATION_SUCCESS \u003d \"Deleted Accommodation: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public DeleteAccommodationCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        List\u003cAccommodation\u003e lastShownList \u003d model.getFilteredAccommodationList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACCOMMODATION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Accommodation accommodationToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        model.deleteAccommodation(accommodationToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ACCOMMODATION_SUCCESS, accommodationToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                || (other instanceof DeleteAccommodationCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteAccommodationCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteActivityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Removes an activity from the activity list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class DeleteActivityCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String SECOND_COMMAND_WORD \u003d \"activity\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \": Deletes the activity identified by the index number used in the displayed activity list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Example: \" + DeleteCommand.COMMAND_WORD + \" \" + SECOND_COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_DELETE_ACTIVITY_SUCCESS \u003d \"Deleted Activity: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public DeleteActivityCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        List\u003cActivity\u003e lastShownList \u003d model.getFilteredActivityList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Activity activityToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        model.deleteActivity(activityToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ACTIVITY_SUCCESS, activityToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                || (other instanceof DeleteActivityCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteActivityCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \": Deletes either a day, person or activity identified by the index number used in the displayed list.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 3,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Removes a contact from the contact list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class DeleteContactCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String SECOND_COMMAND_WORD \u003d \"contact\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \": Deletes the contact identified by the index number used in the displayed contact list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Example: \" + DeleteCommand.COMMAND_WORD + \" \" + SECOND_COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_DELETE_CONTACT_SUCCESS \u003d \"Deleted Contact: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public DeleteContactCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        List\u003cContact\u003e lastShownList \u003d model.getFilteredContactList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Contact contactToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        model.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CONTACT_SUCCESS, contactToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                || (other instanceof DeleteContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteContactCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteDayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Removes a Day from the itinerary."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class DeleteDayCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String SECOND_COMMAND_WORD \u003d \"day\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \": Deletes the day identified by the index number used in the displayed day list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Example: \" + DeleteCommand.COMMAND_WORD + \" \" + SECOND_COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_DELETE_DAY_SUCCESS \u003d \"Deleted day: %1$d\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public DeleteDayCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        List\u003cDay\u003e lastShownList \u003d model.getFilteredItinerary();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DAY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Day dayToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        model.deleteDay(dayToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DAY_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                || (other instanceof DeleteDayCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteDayCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "KxxMxxx": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditAccommodationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACCOMMODATIONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Edits the details of an existing accommodation in the itinerary."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class EditAccommodationCommand extends EditCommand {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String SECOND_COMMAND_WORD \u003d \"accommodation\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + SECOND_COMMAND_WORD"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \": Edits the details of the accommodation identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"by the index number used in the displayed accommodation list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_EDIT_ACCOMMODATION_SUCCESS \u003d \"Edited Accommodation: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOMMODATION \u003d \"This accommodation already exists in the itinerary.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final EditAccommodationDescriptor editAccommodationDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param index of the accommodation in the filtered accommodation list to edit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public EditAccommodationCommand(Index index, EditAccommodationDescriptor editAccommodationDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(editAccommodationDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.editAccommodationDescriptor \u003d editAccommodationDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        List\u003cAccommodation\u003e lastShownList \u003d model.getFilteredAccommodationList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACCOMMODATION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Accommodation accommodationToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Accommodation editedAccommodation \u003d createEditedAccommodation(accommodationToEdit, editAccommodationDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!accommodationToEdit.isSameAccommodation(editedAccommodation)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 model.hasAccommodation(editedAccommodation)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACCOMMODATION);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        model.setAccommodation(accommodationToEdit, editedAccommodation);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        model.updateFilteredAccommodationList(PREDICATE_SHOW_ALL_ACCOMMODATIONS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ACCOMMODATION_SUCCESS, editedAccommodation));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Creates and returns a {@code Accommodation} with the details of {@code accommodationToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * edited with {@code editAccommodationDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private static Accommodation createEditedAccommodation(Accommodation accommodationToEdit,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                                                      EditAccommodationDescriptor editAccommodationDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assert accommodationToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Name updatedName \u003d editAccommodationDescriptor.getName().orElse(accommodationToEdit.getName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Address updatedAddress \u003d editAccommodationDescriptor.getAddress().orElse(accommodationToEdit.getAddress());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Contact updatedContact \u003d editAccommodationDescriptor.getPhone().isPresent()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                ? new Contact(updatedName, editAccommodationDescriptor.getPhone().get(), null, null, new HashSet\u003c\u003e())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                : accommodationToEdit.getContact().isPresent()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                ? accommodationToEdit.getContact().get()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editAccommodationDescriptor.getTags().orElse(accommodationToEdit.getTags());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new Accommodation(updatedName, updatedAddress, updatedContact, updatedTags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!(other instanceof EditAccommodationCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditAccommodationCommand e \u003d (EditAccommodationCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                || other instanceof EditAccommodationCommand"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 editAccommodationDescriptor.equals(e.editAccommodationDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Stores the details to edit the accommodation with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * corresponding field value of the accommodation."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static class EditAccommodationDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public EditAccommodationDescriptor() {}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public EditAccommodationDescriptor(EditAccommodationDescriptor toCopy) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, address, phone, tags);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            if (!(other instanceof EditAccommodationDescriptor)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            EditAccommodationDescriptor e \u003d (EditAccommodationDescriptor) other;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 199
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditActivityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACTIVITIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Edits the details of an existing activity in the itinerary."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class EditActivityCommand extends EditCommand {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String SECOND_COMMAND_WORD \u003d \"activity\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the activity identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"by the index number used in the displayed activity list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_EDIT_ACTIVITY_SUCCESS \u003d \"Edited Activity: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACTIVITY \u003d \"This activity already exists in the itinerary.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final EditActivityDescriptor editActivityDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param index of the activity in the filtered activity list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public EditActivityCommand(Index index, EditActivityDescriptor editActivityDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(editActivityDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.editActivityDescriptor \u003d editActivityDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        List\u003cActivity\u003e lastShownList \u003d model.getFilteredActivityList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Activity activityToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Activity editedActivity \u003d createEditedActivity(activityToEdit, editActivityDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!activityToEdit.isSameActivity(editedActivity) \u0026\u0026 model.hasActivity(editedActivity)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        model.setActivity(activityToEdit, editedActivity);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        model.updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Creates and returns a {@code Activity} with the details of {@code activityToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * edited with {@code editActivityDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private static Activity createEditedActivity(Activity activityToEdit,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                                                 EditActivityDescriptor editActivityDescriptor) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assert activityToEdit !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Name updatedName \u003d editActivityDescriptor.getName().orElse(activityToEdit.getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Address updatedAddress \u003d editActivityDescriptor.getAddress().orElse(activityToEdit.getAddress());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Contact updatedContact \u003d editActivityDescriptor.getPhone().isPresent()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                ? new Contact(updatedName, editActivityDescriptor.getPhone().get(), null, null, new HashSet\u003c\u003e())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                : activityToEdit.getContact().isPresent()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    ? activityToEdit.getContact().get()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    : null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editActivityDescriptor.getTags().orElse(activityToEdit.getTags());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new Activity(updatedName, updatedAddress, updatedContact, updatedTags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!(other instanceof EditActivityCommand)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditActivityCommand e \u003d (EditActivityCommand) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                || other instanceof EditActivityCommand"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 index.equals(e.index)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 editActivityDescriptor.equals(e.editActivityDescriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Stores the details to edit the activity with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * corresponding field value of the activity."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static class EditActivityDescriptor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public EditActivityDescriptor() {}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public EditActivityDescriptor(EditActivityDescriptor toCopy) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, address, phone, tags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            if (!(other instanceof EditActivityCommand.EditActivityDescriptor)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            EditActivityCommand.EditActivityDescriptor e \u003d (EditActivityCommand.EditActivityDescriptor) other;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 198
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Represents EditActivityCommand and EditContactCommand."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of either a contact or activity,\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"depending on the following second command word and arguments.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 4,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CONTACTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class EditContactCommand extends EditCommand {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String SECOND_COMMAND_WORD \u003d \"contact\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the contact identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"by the index number used in the displayed contact list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_EDIT_CONTACT_SUCCESS \u003d \"Edited Contact: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONTACT \u003d \"This contact already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final EditContactDescriptor editContactDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param index of the contact in the filtered contact list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param editContactDescriptor details to edit the contact with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public EditContactCommand(Index index, EditContactDescriptor editContactDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(editContactDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.editContactDescriptor \u003d new EditContactDescriptor(editContactDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        List\u003cContact\u003e lastShownList \u003d model.getFilteredContactList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Contact contactToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Contact editedContact \u003d createEditedContact(contactToEdit, editContactDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!contactToEdit.isSameContact(editedContact) \u0026\u0026 model.hasContact(editedContact)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        model.setContact(contactToEdit, editedContact);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        model.updateFilteredContactList(PREDICATE_SHOW_ALL_CONTACTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CONTACT_SUCCESS, editedContact));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Creates and returns a {@code Contact} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private static Contact createEditedContact(Contact contactToEdit, EditContactDescriptor editContactDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assert contactToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Name updatedName \u003d editContactDescriptor.getName().orElse(contactToEdit.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Phone updatedPhone \u003d editContactDescriptor.getPhone().orElse(contactToEdit.getPhone());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Email updatedEmail \u003d editContactDescriptor.getEmail().orElse(contactToEdit.getEmail().orElse(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Address updatedAddress \u003d editContactDescriptor.getAddress().orElse(contactToEdit.getAddress().orElse(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editContactDescriptor.getTags().orElse(contactToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new Contact(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!(other instanceof EditContactCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactCommand e \u003d (EditContactCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 editContactDescriptor.equals(e.editContactDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static class EditContactDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public EditContactDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public EditContactDescriptor(EditContactDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            if (!(other instanceof EditContactDescriptor)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            EditContactDescriptor e \u003d (EditContactDescriptor) other;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 226
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all contacts whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        model.updateFilteredContactList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                String.format(Messages.MESSAGE_CONTACTS_LISTED_OVERVIEW, model.getFilteredContactList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 4,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/InitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class InitCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"init\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + \": Initialises the Planner with a name and trip start date. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + PREFIX_START_DATE + \"START_DATE\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + PREFIX_NAME + \"An amazing trip to Germany \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + PREFIX_START_DATE + \"23-7-2020\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Planner initialised with name:%1$s and\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + \" start date:%2$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Creates an AddContactCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public InitCommand(Name name, LocalDate date) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        requireAllNonNull(name, date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.startDate \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        model.setItineraryName(this.name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        model.setItineraryStartDate(this.startDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        String dateInString \u003d this.startDate.format(ParserUtil.DATE_FORMATTER_1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, name, dateInString));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                || (other instanceof InitCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                \u0026\u0026 this.name.equals(((InitCommand) other).name)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                \u0026\u0026 this.startDate.equals(((InitCommand) other).startDate));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListActivityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACTIVITIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Lists all activities in the itinerary."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class ListActivityCommand extends ListCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String SECOND_COMMAND_WORD \u003d \"activity\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all activities\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        model.updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Represents ListActivityCommand, ListContactCommand and ListDayCommand"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public abstract class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" activity/day/person: lists all related items.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CONTACTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Lists all persons in the contact list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class ListContactCommand extends ListCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String SECOND_COMMAND_WORD \u003d \"contact\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all contacts\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        model.updateFilteredContactList(PREDICATE_SHOW_ALL_CONTACTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListDayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DAYS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Lists all days in the itinerary."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class ListDayCommand extends ListCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String SECOND_COMMAND_WORD \u003d \"day\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all days\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        model.updateFilteredItinerary(PREDICATE_SHOW_ALL_DAYS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "KxxMxxx": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScheduleActivityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DAYS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import seedu.address.model.day.ActivityWithTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Schedules an activity to a day."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class ScheduleActivityCommand extends ScheduleCommand {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public static final String SECOND_COMMAND_WORD \u003d \"activity\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + SECOND_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            + \": Schedule the activity identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            + \"by the index number used in the displayed activity list \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            + \"to a day.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            + PREFIX_START_TIME + \"START_TIME \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + PREFIX_END_TIME + \"END_TIME \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            + PREFIX_DAY + \"DAY_INDEX \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + SECOND_COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            + PREFIX_START_TIME + \"1100 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + PREFIX_END_TIME + \"1300 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            + PREFIX_DAY + \"2 \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_ACTIVITY_SUCCESS \u003d \"Activity scheduled to day %d\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DAY \u003d \"This day already exists in the planner.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private final Index activityIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private final LocalTime startTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private final LocalTime endTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private final Index dayIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Creates an AddActivityCommand to add the specified {@Activity}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public ScheduleActivityCommand(Index activityIndex, LocalTime startTime, LocalTime endTime, Index dayIndex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        requireAllNonNull(activityIndex, startTime, endTime, dayIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.activityIndex \u003d activityIndex;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.dayIndex \u003d dayIndex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        List\u003cDay\u003e lastShownDays \u003d model.getFilteredItinerary();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        List\u003cActivity\u003e lastShownActivities \u003d model.getFilteredActivityList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (dayIndex.getZeroBased() \u003e\u003d lastShownDays.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DAY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (activityIndex.getZeroBased() \u003e\u003d lastShownActivities.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        Day dayToEdit \u003d lastShownDays.get(dayIndex.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        Activity activityToSchedule \u003d lastShownActivities.get(activityIndex.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        ActivityWithTime activityWithTimeToAdd \u003d new ActivityWithTime(activityToSchedule, startTime, endTime);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        Day editedDay \u003d createScheduledActivityDay(dayToEdit, activityWithTimeToAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        List\u003cDay\u003e editedDays \u003d new ArrayList\u003c\u003e(lastShownDays);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        editedDays.set(dayIndex.getZeroBased(), editedDay);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (!dayToEdit.isSameDay(editedDay) \u0026\u0026 model.hasDay(editedDay)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DAY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        model.setDays(editedDays);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        model.updateFilteredItinerary(PREDICATE_SHOW_ALL_DAYS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SCHEDULE_ACTIVITY_SUCCESS, dayIndex.getOneBased()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Day createScheduledActivityDay(Day dayToEdit, ActivityWithTime toAdd) throws CommandException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        List\u003cActivityWithTime\u003e activityList \u003d dayToEdit.getListOfActivityWithTime();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        activityList.add(toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return new Day(activityList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                || (other instanceof ScheduleActivityCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                \u0026\u0026 this.activityIndex.equals(((ScheduleActivityCommand) other).activityIndex)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                \u0026\u0026 this.startTime.equals((((ScheduleActivityCommand) other).startTime))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                \u0026\u0026 this.endTime.equals(((ScheduleActivityCommand) other).endTime));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 15,
      "OneArmyj": 2,
      "KxxMxxx": 1,
      "-": 4,
      "oscarsu97": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Edits the details of an existing contacts in the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public abstract class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": activity needs to come after\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnscheduleActivityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ACTIVITY_NOT_PRESENT_IN_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DAYS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.day.ActivityWithTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * Unschedules an activity from the day by time."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class UnscheduleActivityCommand extends UnscheduleCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String SECOND_COMMAND_WORD \u003d \"activity\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + SECOND_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + \": Unschedules all instances of an activity on a certain day. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + PREFIX_DAY + \"DAY\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + \" \" + SECOND_COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + \" 2 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + PREFIX_DAY + \"3\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public static final String MESSAGE_UNSCHEDULE_TIME_SUCCESS \u003d \"Activity %d unscheduled from Day %d\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private final Index activityIndexToUnschedule;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private final Index dayIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @param activityIndex of the contacts in the filtered contacts list to edit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @param dayIndex      of the contacts in the filtered contacts list to edit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public UnscheduleActivityCommand(Index activityIndex, Index dayIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        requireAllNonNull(activityIndex, dayIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.activityIndexToUnschedule \u003d activityIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.dayIndex \u003d dayIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        List\u003cDay\u003e lastShownDays \u003d model.getFilteredItinerary();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        List\u003cActivity\u003e lastShownActivities \u003d model.getFilteredActivityList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (activityIndexToUnschedule.getZeroBased() \u003e\u003d lastShownActivities.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Activity activityToUnschedule \u003d lastShownActivities.get(activityIndexToUnschedule.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Day dayToEdit \u003d lastShownDays.get(dayIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Day editedDay \u003d createUnscheduledActivityDay(dayToEdit, activityToUnschedule);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        List\u003cDay\u003e editedDays \u003d new ArrayList\u003c\u003e(lastShownDays);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        editedDays.set(dayIndex.getZeroBased(), editedDay);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        model.setDays(editedDays);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        model.updateFilteredItinerary(PREDICATE_SHOW_ALL_DAYS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNSCHEDULE_TIME_SUCCESS, activityIndexToUnschedule.getOneBased(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                dayIndex.getOneBased()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                || (other instanceof UnscheduleActivityCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                \u0026\u0026 this.dayIndex.equals(((UnscheduleActivityCommand) other).dayIndex)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                \u0026\u0026 this.activityIndexToUnschedule.equals((("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                UnscheduleActivityCommand) other).activityIndexToUnschedule));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Creates a new day without the activity that is unscheduled."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @param dayToEdit            of the contacts in the filtered contacts list to edit"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @param activityToUnschedule of the contacts in the filtered contacts list to edit"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Day createUnscheduledActivityDay(Day dayToEdit, Activity activityToUnschedule) throws CommandException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        List\u003cActivityWithTime\u003e activitiesWithTime \u003d dayToEdit.getListOfActivityWithTime();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        List\u003cActivityWithTime\u003e copiedActivitiesWithTime \u003d new ArrayList\u003c\u003e(activitiesWithTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        boolean removedAtLeastOne \u003d false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        for (ActivityWithTime a: activitiesWithTime) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            if (a.getActivity().equals(activityToUnschedule)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                copiedActivitiesWithTime.remove(a);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                removedAtLeastOne \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (removedAtLeastOne) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return new Day(copiedActivitiesWithTime);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new CommandException(MESSAGE_ACTIVITY_NOT_PRESENT_IN_DAY);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 96,
      "OneArmyj": 2,
      "KxxMxxx": 1,
      "oscarsu97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnscheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * Represents UnscheduleActivityCommand and UnscheduleTimeCommand."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public abstract class UnscheduleCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unschedule\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a contacts to the address book. \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + \": an activity can be unscheduled from the day by either activity id or by time.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Activity unscheduled!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnscheduleTimeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ACTIVITY_NOT_PRESENT_IN_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DAYS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.day.ActivityWithTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * Unschedules an activity from the day by time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class UnscheduleTimeCommand extends UnscheduleCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String SECOND_COMMAND_WORD \u003d \"time\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + SECOND_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + \": Unschedules an activity by a time occupied by the activity on a certain day. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + \"Parameters: TIME (in 24-hour clock format) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + PREFIX_DAY + \"DAY\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + \" \" + SECOND_COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + \" 0900 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            + PREFIX_DAY + \"3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String MESSAGE_UNSCHEDULE_TIME_SUCCESS \u003d \"Activity unscheduled: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_DOES_NOT_EXIST \u003d \"Activity does not exist at given time.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private final Index dayIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private final LocalTime time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @param dayIndex of the contacts in the filtered contacts list to edit"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @param time details to edit the contacts with"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public UnscheduleTimeCommand(LocalTime time, Index dayIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        requireAllNonNull(dayIndex, time);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.dayIndex \u003d dayIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        List\u003cDay\u003e lastShownDays \u003d model.getFilteredItinerary();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (dayIndex.getZeroBased() \u003e\u003d lastShownDays.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DAY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Day dayToEdit \u003d lastShownDays.get(dayIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Day editedDay \u003d createUnscheduledActivityDay(dayToEdit, this.time);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        List\u003cDay\u003e editedDays \u003d new ArrayList\u003c\u003e(lastShownDays);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        editedDays.set(dayIndex.getZeroBased(), editedDay);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        model.setDays(editedDays);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        model.updateFilteredItinerary(PREDICATE_SHOW_ALL_DAYS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNSCHEDULE_TIME_SUCCESS, editedDay));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                || (other instanceof UnscheduleTimeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                \u0026\u0026 this.dayIndex.equals(((UnscheduleTimeCommand) other).dayIndex)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                \u0026\u0026 this.time.equals(((UnscheduleTimeCommand) other).time));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Creates a new day without the activity that is unscheduled."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @param dayToEdit of the contacts in the filtered contacts list to edit"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @param time of the contacts in the filtered contacts list to edit"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Day createUnscheduledActivityDay(Day dayToEdit, LocalTime time) throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        List\u003cActivityWithTime\u003e activitiesWithTime \u003d dayToEdit.getListOfActivityWithTime();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Optional\u003cActivityWithTime\u003e activityAtTime \u003d dayToEdit.getActivityWithTime(time);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (activityAtTime.isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            ActivityWithTime activityToRemove \u003d activityAtTime.get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            if (!activitiesWithTime.contains(activityToRemove)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                throw new CommandException(MESSAGE_ACTIVITY_NOT_PRESENT_IN_DAY);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            activitiesWithTime.remove(activityToRemove);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return new Day(activitiesWithTime);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new CommandException(MESSAGE_ACTIVITY_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 98,
      "OneArmyj": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.AddAccommodationCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.AddActivityCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.AddDayCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private static final Pattern ADD_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ctype\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        final Matcher matcher \u003d ADD_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        final String type \u003d matcher.group(\"type\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        switch(type) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        case AddAccommodationCommand.SECOND_COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return parseAccommodation(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        case AddActivityCommand.SECOND_COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return parseActivity(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        case AddContactCommand.SECOND_COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return parseContact(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        case AddDayCommand.SECOND_COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return parseDay(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAccommodationCommand for an Accommodation"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * and returns an AddAccommodationCommand object for execution."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private AddAccommodationCommand parseAccommodation(String args) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                PREFIX_TAG);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    AddAccommodationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            Contact contact \u003d new Contact(name, phone, null, null, new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            Accommodation accommodation \u003d new Accommodation(name, address, contact, tagList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return new AddAccommodationCommand(accommodation);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            Accommodation accommodation \u003d new Accommodation(name, address, null, tagList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return new AddAccommodationCommand(accommodation);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddActivityCommand for an Activity"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * and returns an AddActivityCommand object for execution."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private AddActivityCommand parseActivity(String args) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                PREFIX_TAG);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddActivityCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            Contact contact \u003d new Contact(name, phone, null, null, new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            Activity activity \u003d new Activity(name, address, contact, tagList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return new AddActivityCommand(activity);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            Activity activity \u003d new Activity(name, address, null, tagList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return new AddActivityCommand(activity);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand for a Contact and returns an"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * AddContactCommand object for execution."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private AddContactCommand parseContact(String args) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return new AddContactCommand(new Contact(name, phone, email, address, tagList));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return new AddContactCommand(new Contact(name, phone, email, null, tagList));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return new AddContactCommand(new Contact(name, phone, null, address, tagList));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return new AddContactCommand(new Contact(name, phone, null, null, tagList));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddDayCommand for a Day and returns an"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * AddDayCommand object for execution."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private AddDayCommand parseDay(String args) throws ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DAY);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DAY)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        int numDays \u003d ParserUtil.parseDays(argMultimap.getValue(PREFIX_DAY).get());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new AddDayCommand(numDays);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 5,
      "KxxMxxx": 126,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final Prefix PREFIX_DAY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 3,
      "KxxMxxx": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.DeleteAccommodationCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.DeleteActivityCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.DeleteContactCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.DeleteDayCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private static final Pattern DELETE_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ctype\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        final Matcher matcher \u003d DELETE_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        final String type \u003d matcher.group(\"type\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(arguments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            switch(type) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            case DeleteAccommodationCommand.SECOND_COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return new DeleteAccommodationCommand(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            case DeleteActivityCommand.SECOND_COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return new DeleteActivityCommand(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            case DeleteContactCommand.SECOND_COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return new DeleteContactCommand(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            case DeleteDayCommand.SECOND_COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return new DeleteDayCommand(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 33,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.EditAccommodationCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.EditAccommodationCommand.EditAccommodationDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.EditActivityCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.EditActivityCommand.EditActivityDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand.EditContactDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Parses input arguments and creates a new EditContactCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private static final Pattern EDIT_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ctype\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditActivityCommand or EditContactCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        final Matcher matcher \u003d EDIT_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        final String type \u003d matcher.group(\"type\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        switch(type) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        case EditActivityCommand.SECOND_COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return parseActivityForEdit(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        case EditAccommodationCommand.SECOND_COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return parseAccommodationForEdit(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        case EditContactCommand.SECOND_COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return parseContactForEdit(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditAccommodationCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * and returns an EditAccommodationCommand object for execution."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public EditAccommodationCommand parseAccommodationForEdit(String args) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_TAG);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    EditAccommodationCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditAccommodationDescriptor editAccommodationDescriptor \u003d new EditAccommodationDescriptor();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            editAccommodationDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            editAccommodationDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            editAccommodationDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editAccommodationDescriptor::setTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!editAccommodationDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new ParseException(EditAccommodationCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new EditAccommodationCommand(index, editAccommodationDescriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditActivityCommand"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * and returns an EditActivityCommand object for execution."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public EditActivityCommand parseActivityForEdit(String args) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_TAG);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditActivityCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditActivityDescriptor editActivityDescriptor \u003d new EditActivityDescriptor();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            editActivityDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            editActivityDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            editActivityDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editActivityDescriptor::setTags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!editActivityDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new ParseException(EditActivityCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new EditActivityCommand(index, editActivityDescriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditContactCommand"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * and returns an EditContactCommand object for execution."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public EditContactCommand parseContactForEdit(String args) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditContactCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactDescriptor editContactDescriptor \u003d new EditContactDescriptor();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            editContactDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            editContactDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            editContactDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            editContactDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editContactDescriptor::setTags);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!editContactDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new ParseException(EditContactCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new EditContactCommand(index, editContactDescriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 108,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InitCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.commands.InitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class InitCommandParser implements Parser\u003cInitCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public InitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_DATE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_START_DATE)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, InitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        LocalDate startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return new InitCommand(name, startDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.ListActivityCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.ListContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.ListDayCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private static final Pattern LIST_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ctype\u003e\\\\S+).*\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * and returns a ListCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        final Matcher matcher \u003d LIST_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        final String type \u003d matcher.group(\"type\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        case ListActivityCommand.SECOND_COMMAND_WORD:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return new ListActivityCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        case ListContactCommand.SECOND_COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return new ListContactCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        case ListDayCommand.SECOND_COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return new ListDayCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private static final String DATE_FORMAT_1 \u003d \"d-M-yyyy\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private static final String DATE_FORMAT_2 \u003d \"d-M-yy\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private static final String TIME_FORMAT \u003d \"HHmm\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMATTER_1 \u003d DateTimeFormatter.ofPattern(DATE_FORMAT_1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMATTER_2 \u003d DateTimeFormatter.ofPattern(DATE_FORMAT_2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(TIME_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Parses a {@code String days} into an {@code Integer}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static int parseDays(String days) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(days);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String trimmedDays \u003d days.trim();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!Day.isValidDayNumber(trimmedDays)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new ParseException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return Integer.parseInt(days);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Parses a {@code String time} into an {@code LocalTime}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static LocalTime parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        LocalTime parsedTime \u003d null;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            parsedTime \u003d LocalTime.parse(trimmedTime, TIME_FORMATTER);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new ParseException(\"Time format is: \" + TIME_FORMAT);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return parsedTime;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return parseByDateFormats(trimmedDate, DATE_FORMATTER_1, DATE_FORMATTER_2);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Tries to parse {@code trimmedDate} with the provided {@code dateFormats}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private static LocalDate parseByDateFormats(String trimmedDate, DateTimeFormatter ...dateFormats)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        LocalDate parsedDate \u003d null;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        for (DateTimeFormatter format : dateFormats) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                parsedDate \u003d LocalDate.parse(trimmedDate, format);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                parsedDate \u003d null;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (parsedDate !\u003d null) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return parsedDate;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new ParseException(acceptableDateFormats());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Creates a message of possible date formats with the provided {@code dateFormats}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private static String acceptableDateFormats() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        sb.append(\"Date needs to be in either of the following formats: \")"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            .append(DATE_FORMAT_1)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            .append(\", \")"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            .append(DATE_FORMAT_2);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 74,
      "OneArmyj": 3,
      "KxxMxxx": 19,
      "-": 120,
      "oscarsu97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PlannerParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.commands.InitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.ListContactCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.commands.UnscheduleCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class PlannerParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        case ListContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return new ScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        case UnscheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return new UnscheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        case InitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return new InitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 11,
      "OneArmyj": 1,
      "KxxMxxx": 3,
      "-": 72,
      "oscarsu97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ScheduleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import seedu.address.logic.commands.ScheduleActivityCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Parses input arguments and creates a new ScheduleCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class ScheduleCommandParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private static final Pattern SCHEDULE_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ctype\u003eactivity)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ScheduleActivityCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * and returns a ScheduleCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public ScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        final Matcher matcher \u003d SCHEDULE_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        final String type \u003d matcher.group(\"type\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (type.equals(ScheduleActivityCommand.SECOND_COMMAND_WORD)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            return parseActivity(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddActivityCommand for a Activity"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * and returns an AddActivityCommand object for execution."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private ScheduleActivityCommand parseActivity(String args) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                PREFIX_END_TIME, PREFIX_DAY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Index activityIndex;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            activityIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    ScheduleActivityCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_DAY)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                    ScheduleActivityCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        LocalTime startTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        LocalTime endTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_END_TIME).get());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (startTime.compareTo(endTime) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                    ScheduleActivityCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        Index dayIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_DAY).get());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return new ScheduleActivityCommand(activityIndex, startTime, endTime, dayIndex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 15,
      "-": 10,
      "oscarsu97": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnscheduleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.commands.UnscheduleActivityCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.commands.UnscheduleCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.commands.UnscheduleTimeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class UnscheduleCommandParser implements Parser\u003cUnscheduleCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private static final Pattern UNSCHEDULE_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ctype\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public UnscheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        final Matcher matcher \u003d UNSCHEDULE_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        final String type \u003d matcher.group(\"type\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        switch(type) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        case UnscheduleTimeCommand.SECOND_COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return parseUnscheduleTime(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        case UnscheduleActivityCommand.SECOND_COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return parseUnscheduleActivity(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddActivityCommand for a Activity"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * and returns an AddActivityCommand object for execution."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private UnscheduleTimeCommand parseUnscheduleTime(String args) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DAY);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        LocalTime time;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            time \u003d ParserUtil.parseTime(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                    UnscheduleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DAY)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnscheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Index dayIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_DAY).get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return new UnscheduleTimeCommand(time, dayIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddActivityCommand for a Activity"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * and returns an AddActivityCommand object for execution."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private UnscheduleActivityCommand parseUnscheduleActivity(String args) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DAY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        Index activityIndex;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            activityIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                    UnscheduleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DAY)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnscheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Index dayIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_DAY).get());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return new UnscheduleActivityCommand(activityIndex, dayIndex);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 91,
      "oscarsu97": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AccommodationManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.UniqueAccommodationList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Duplicates are not allowed (by .isSameContact comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class AccommodationManager implements ReadOnlyAccommodation {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final UniqueAccommodationList accommodations;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        accommodations \u003d new UniqueAccommodationList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public AccommodationManager() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Creates an AccommodationManager using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public AccommodationManager(ReadOnlyAccommodation toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        resetDataAccommodation(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //// For ACCOMMODATION list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Resets the existing data of this {@code AccommodationManager} with {@code newData}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void resetDataAccommodation(ReadOnlyAccommodation newData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        setAccommodations(newData.getAccommodationList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces the contents of the contacts list with {@code persons}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setAccommodations(List\u003cAccommodation\u003e accommodations) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.accommodations.setAccommodations(accommodations);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //// accommodation-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns true if a contacts with the same identity as {@code contacts} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean hasAccommodation(Accommodation accommodation) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(accommodation);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return accommodations.contains(accommodation);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Adds a contacts to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The contacts must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void addAccommodation(Accommodation a) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        accommodations.add(a);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces the given contacts {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The contacts identity of {@code editedPerson} must not be the same as another existing contacts in the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setAccommodation(Accommodation target, Accommodation editedAccommodation) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(editedAccommodation);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        accommodations.setAccommodation(target, editedAccommodation);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Removes {@code key} from this {@code AccommodationManager}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void removeAccommodation(Accommodation key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        accommodations.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return accommodations.asUnmodifiableObservableList().size() + \" accommodations,\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ObservableList\u003cAccommodation\u003e getAccommodationList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return accommodations.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                || (other instanceof AccommodationManager // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 accommodations.equals(((AccommodationManager) other).accommodations));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return accommodations.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ActivityManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.itineraryitem.activity.UniqueActivityList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Duplicates are not allowed (by .isSameContact comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class ActivityManager implements ReadOnlyActivity {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final UniqueActivityList activities;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        activities \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ActivityManager() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Creates an ActivityManager using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ActivityManager(ReadOnlyActivity toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        resetDataActivity(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //// For ACTIVITY list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Resets the existing data of this {@code ActivityManager} with {@code newData}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void resetDataActivity(ReadOnlyActivity newData) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        setActivities(newData.getActivityList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces the contents of the contacts list with {@code persons}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setActivities(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.activities.setActivities(activities);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //// activity-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns true if a contacts with the same identity as {@code contacts} exists in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return activities.contains(activity);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Adds a contacts to the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The contacts must not already exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void addActivity(Activity a) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        activities.add(a);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces the given contacts {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The contacts identity of {@code editedPerson} must not be the same as another existing contacts in the address"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(editedActivity);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        activities.setActivity(target, editedActivity);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Removes {@code key} from this {@code ActivityManager}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void removeActivity(Activity key) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        activities.remove(key);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return activities.asUnmodifiableObservableList().size() + \" activities,\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ObservableList\u003cActivity\u003e getActivityList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return activities.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                || (other instanceof ActivityManager // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 activities.equals(((ActivityManager) other).activities));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return activities.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ContactManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.UniqueContactList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Duplicates are not allowed (by .isSameContact comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class ContactManager implements ReadOnlyContact {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final UniqueContactList contacts;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        contacts \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ContactManager() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Creates an ContactManager using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ContactManager(ReadOnlyContact toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        resetDataContact(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //// For CONTACT list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Resets the existing data of this {@code ContactManager} with {@code newData}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void resetDataContact(ReadOnlyContact newData) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        setContacts(newData.getContactList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces the contents of the contacts list with {@code contacts}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code contacts} must not contain duplicate contacts."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContacts(List\u003cContact\u003e contacts) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.contacts.setContacts(contacts);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //// contacts-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns true if a contacts with the same identity as {@code contacts} exists in the contact list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean hasContact(Contact contact) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(contact);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return contacts.contains(contact);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns true if a contact with the same phone as {@code phone} exists in the contact list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean hasPhone(Phone phone) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return contacts.containsPhone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Adds a contacts to the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The contacts must not already exist in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void addContact(Contact c) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        contacts.add(c);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces the given contacts {@code target} in the list with {@code editedContact}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The contacts identity of {@code editedContact} must not be the same as another existing contacts in the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContact(Contact target, Contact editedContact) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(editedContact);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        contacts.setContact(target, editedContact);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns an Optional Contact by searching the contact list for a contact with the same phone as {@code phone}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cContact\u003e getContactWithPhone(Phone toGet) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(toGet);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return contacts.getWithPhone(toGet);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Removes {@code key} from this {@code ContactManager}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void removeContact(Contact key) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        contacts.remove(key);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return contacts.asUnmodifiableObservableList().size() + \" contacts,\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ObservableList\u003cContact\u003e getContactList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return contacts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                || (other instanceof ContactManager // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 contacts.equals(((ContactManager) other).contacts));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return contacts.hashCode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Itinerary.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.day.UniqueDayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Duplicates are not allowed (by .isSameContact comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class Itinerary implements ReadOnlyItinerary {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final UniqueDayList days;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        days \u003d new UniqueDayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Itinerary() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.name \u003d new Name(\"Untitled\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.startDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Creates an Itinerary using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Itinerary(ReadOnlyItinerary toBeCopied) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        resetDataItinerary(toBeCopied);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return this.startDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setStartDate(LocalDate date) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.startDate \u003d date;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //// For DAY list overwrite"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns true if a contacts with the same identity as {@code contacts} exists in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean hasDay(Day day) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return days.contains(day);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces the contents of the contacts list with {@code persons}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setDays(List\u003cDay\u003e itinerary) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.days.setDays(itinerary);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Adds a day to the itinerary"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void addDay(Day d) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.days.add(d);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Adds a contacts to the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The contacts must not already exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void addDays(int n) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.days.adds(n);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Removes {@code key} from this {@code Itinerary}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void removeDay(Day target) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.days.remove(target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Resets the existing Day data of this {@code Itinerary} with {@code newData}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void resetDataItinerary(ReadOnlyItinerary newData) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        setDays(newData.getItinerary());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return days.asUnmodifiableObservableList().size() + \" days,\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ObservableList\u003cDay\u003e getItinerary() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return days.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                || (other instanceof Itinerary // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 days.equals(((Itinerary) other).days));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return days.hashCode();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Predicate\u003cAccommodation\u003e PREDICATE_SHOW_ALL_ACCOMMODATIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Predicate\u003cActivity\u003e PREDICATE_SHOW_ALL_ACTIVITIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Predicate\u003cContact\u003e PREDICATE_SHOW_ALL_CONTACTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    Predicate\u003cDay\u003e PREDICATE_SHOW_ALL_DAYS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the user prefs\u0027 accommodation file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getAccommodationFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Sets the user prefs\u0027 accommodation file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void setAccommodationFilePath(Path accommodationFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the user prefs\u0027 activity file path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getActivityFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Sets the user prefs\u0027 activity file path."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void setActivityFilePath(Path activtyFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the user prefs\u0027 contact file path."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getContactFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Sets the user prefs\u0027 contact file path."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void setContactFilePath(Path contactFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the user prefs\u0027 itinerary file path."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getItineraryFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Sets the user prefs\u0027 itinerary file path."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void setItineraryFilePath(Path itineraryFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AccommodationManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces current AccommodationManager data with the data in {@code accommodations}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void setAccommodations(ReadOnlyAccommodation accommodations);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the AccommodationManager"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ReadOnlyAccommodation getAccommodations();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns true if an accommodation with the same identity as {@code accommodation} exists in the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * AccommodationManager."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    boolean hasAccommodation(Accommodation accommodation);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Deletes the given accommodation."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The accommodation must exist in the AccommodationManager."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void deleteAccommodation(Accommodation target);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Adds the given accommodation."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code contacts} must not already exist in the AccommodationManager."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void addAccommodation(Accommodation accommodation);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces the given accommodation {@code target} with {@code editedAccommodation}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code target} must exist in the AccommodationManager."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The accommodation identity of {@code editedAccommodatino} must not be the same as another existing"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * accommodations in the AccommodationManager."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void setAccommodation(Accommodation target, Accommodation editedAccommodation);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns an unmodifiable view of the filtered Accommodation list"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ObservableList\u003cAccommodation\u003e getFilteredAccommodationList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Updates the filter of the filtered Accommodation list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void updateFilteredAccommodationList(Predicate\u003cAccommodation\u003e predicate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ActivityManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces current ActivityManager data with the data in {@code activities}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void setActivities(ReadOnlyActivity activities);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the ActivityManager"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ReadOnlyActivity getActivities();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns true if a activity with the same identity as {@code activity} exists in the ActivityManager."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    boolean hasActivity(Activity activity);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Deletes the given activity."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The activity must exist in the ActivityManager."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void deleteActivity(Activity target);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Adds the given activity."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code activity} must not already exist in the ActivityManager."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void addActivity(Activity activity);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces the given activity {@code target} with {@code editedActivity}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code target} must exist in the ActivityManager."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The activity identity of {@code editedActivity} must not be the same as another existing activities in the"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * ActivityManager."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void setActivity(Activity target, Activity editedActivity);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns an unmodifiable view of the filtered activities list"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ObservableList\u003cActivity\u003e getFilteredActivityList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Updates the filter of the filtered activity list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ContactManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces current ContactManager data with the data in {@code contacts}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void setContacts(ReadOnlyContact contacts);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the ContactManager"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ReadOnlyContact getContacts();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns true if a contacts with the same identity as {@code contacts} exists in the contact list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    boolean hasContact(Contact contact);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns true if a contact with the same phone as {@code phone} exists in the contact list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    boolean hasPhone(Phone phone);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Deletes the given contacts."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * The contacts must exist in the contact list."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void deleteContact(Contact target);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Adds the given contacts."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * {@code contacts} must not already exist in the contact list."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void addContact(Contact contact);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces the given contacts {@code target} with {@code editedContact}."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The contacts identity of {@code editedContact} must not be the same as another existing contacts in the"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * contact list."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void setContact(Contact target, Contact editedContact);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns an Optional Contact by searching the contact list for a contact with the same phone as {@code phone}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    Optional\u003cContact\u003e getContactByPhone(Phone toGet);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Returns an unmodifiable view of the filtered contacts list"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ObservableList\u003cContact\u003e getFilteredContactList();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Updates the filter of the filtered contacts list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void updateFilteredContactList(Predicate\u003cContact\u003e predicate);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Itinerary \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Retrieves the Name of the Itinerary"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @return Name of itinerary"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Name getName();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Sets a new Name for the Itinerary"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @param name new name to be set"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void setItineraryName(Name name);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Retrieves the start date of the Itinerary"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @return start date of Itinerary"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    LocalDate getStartDate();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Sets a new StartDate for the Itinerary"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @param date new start date to be set"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void setItineraryStartDate(LocalDate date);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces current Itinerary data with the data in {@code itinerary}."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void setItinerary(ReadOnlyItinerary itinerary);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the Itinerary"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ReadOnlyItinerary getItinerary();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns true if a day with the same identity as {@code day} exists in the itinerary."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    boolean hasDay(Day day);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void deleteDay(Day target);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void addDays(int n);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void setDays(List\u003cDay\u003e itinerary);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns an unmodifiable view of the filtered itinerary"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ObservableList\u003cDay\u003e getFilteredItinerary();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Updates the filter of the filtered itinerary to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void updateFilteredItinerary(Predicate\u003cDay\u003e predicate);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 7,
      "OneArmyj": 175,
      "KxxMxxx": 20,
      "-": 87,
      "oscarsu97": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final AccommodationManager accommodations;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final ActivityManager activities;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final ContactManager contacts;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final Itinerary itinerary;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final FilteredList\u003cAccommodation\u003e filteredAccommodations;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final FilteredList\u003cActivity\u003e filteredActivities;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final FilteredList\u003cContact\u003e filteredContacts;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final FilteredList\u003cDay\u003e filteredItinerary;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Initializes a ModelManager with the given address and userPrefs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ModelManager(ReadOnlyAccommodation accommodations, ReadOnlyActivity activities,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                        ReadOnlyContact contacts, ReadOnlyItinerary itinerary, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireAllNonNull(accommodations, activities, contacts, itinerary, userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        logger.fine(\"Initializing with the following: \" + accommodations + activities + contacts + itinerary"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.accommodations \u003d new AccommodationManager(accommodations);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.activities \u003d new ActivityManager(activities);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.contacts \u003d new ContactManager(contacts);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.itinerary \u003d new Itinerary(itinerary);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        filteredAccommodations \u003d new FilteredList\u003c\u003e(this.accommodations.getAccommodationList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        filteredActivities \u003d new FilteredList\u003c\u003e(this.activities.getActivityList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        filteredContacts \u003d new FilteredList\u003c\u003e(this.contacts.getContactList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        filteredItinerary \u003d new FilteredList\u003c\u003e(this.itinerary.getItinerary());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this(new AccommodationManager(), new ActivityManager(), new ContactManager(), new Itinerary(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getAccommodationFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return userPrefs.getAccommodationFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setAccommodationFilePath(Path accommodationFilePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(accommodationFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        userPrefs.setAccommodationFilePath(accommodationFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getActivityFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return userPrefs.getActivityFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setActivityFilePath(Path activityFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(activityFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        userPrefs.setActivityFilePath(activityFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getContactFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return userPrefs.getContactFilePath();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContactFilePath(Path contactFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(contactFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        userPrefs.setContactFilePath(contactFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getItineraryFilePath() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return userPrefs.getItineraryFilePath();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setItineraryFilePath(Path itineraryFilePath) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(itineraryFilePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        userPrefs.setItineraryFilePath(itineraryFilePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AccommodationManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setAccommodations(ReadOnlyAccommodation accommodations) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.accommodations.resetDataAccommodation(accommodations);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ReadOnlyAccommodation getAccommodations() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return accommodations;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean hasAccommodation(Accommodation accommodation) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(accommodation);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return accommodations.hasAccommodation(accommodation);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void deleteAccommodation(Accommodation target) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        accommodations.removeAccommodation(target);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void addAccommodation(Accommodation accommodation) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        accommodations.addAccommodation(accommodation);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        updateFilteredAccommodationList(PREDICATE_SHOW_ALL_ACCOMMODATIONS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setAccommodation(Accommodation target, Accommodation editedAccommodation) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireAllNonNull(target, editedAccommodation);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        accommodations.setAccommodation(target, editedAccommodation);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ActivityManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setActivities(ReadOnlyActivity activities) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.activities.resetDataActivity(activities);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ReadOnlyActivity getActivities() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return activities;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return activities.hasActivity(activity);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void deleteActivity(Activity target) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        activities.removeActivity(target);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        activities.addActivity(activity);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireAllNonNull(target, editedActivity);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        activities.setActivity(target, editedActivity);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ContactManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContacts(ReadOnlyContact contacts) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.contacts.resetDataContact(contacts);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ReadOnlyContact getContacts() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return contacts;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean hasContact(Contact contact) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(contact);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return contacts.hasContact(contact);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean hasPhone(Phone phone) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return contacts.hasPhone(phone);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void deleteContact(Contact target) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        contacts.removeContact(target);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void addContact(Contact contact) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        contacts.addContact(contact);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        updateFilteredContactList(PREDICATE_SHOW_ALL_CONTACTS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContact(Contact target, Contact editedContact) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireAllNonNull(target, editedContact);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        contacts.setContact(target, editedContact);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cContact\u003e getContactByPhone(Phone toGet) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(toGet);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return contacts.getContactWithPhone(toGet);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Itinerary \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return this.itinerary.getName();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setItineraryName(Name name) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.itinerary.setName(name);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return this.itinerary.getStartDate();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setItineraryStartDate(LocalDate date) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.itinerary.setStartDate(date);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setItinerary(ReadOnlyItinerary itinerary) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.itinerary.resetDataItinerary(itinerary);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ReadOnlyItinerary getItinerary() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return itinerary;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void deleteDay(Day target) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        itinerary.removeDay(target);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void addDays(int n) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        itinerary.addDays(n);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setDays(List\u003cDay\u003e itinerary) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.itinerary.setDays(itinerary);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean hasDay(Day day) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return itinerary.hasDay(day);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    // ACCOMMODATION FilteredList"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Contact} backed by the internal list of"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ObservableList\u003cAccommodation\u003e getFilteredAccommodationList() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return filteredAccommodations;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void updateFilteredAccommodationList(Predicate\u003cAccommodation\u003e predicate) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        filteredAccommodations.setPredicate(predicate);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    // ACTIVITY FilteredList"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Contact} backed by the internal list of"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return filteredActivities;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        filteredActivities.setPredicate(predicate);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    // CONTACT FilteredList"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Contact} backed by the internal list of"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ObservableList\u003cContact\u003e getFilteredContactList() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return filteredContacts;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void updateFilteredContactList(Predicate\u003cContact\u003e predicate) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        filteredContacts.setPredicate(predicate);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    // FilteredItinerary"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Contact} backed by the internal list of"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ObservableList\u003cDay\u003e getFilteredItinerary() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return filteredItinerary;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void updateFilteredItinerary(Predicate\u003cDay\u003e predicate) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        filteredItinerary.setPredicate(predicate);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return accommodations.equals(other.accommodations)"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 activities.equals(other.activities)"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 contacts.equals(other.contacts)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 itinerary.equals(other.itinerary)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 filteredAccommodations.equals(other.filteredAccommodations)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 filteredActivities.equals(other.filteredActivities)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 filteredContacts.equals(other.filteredContacts)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 filteredItinerary.equals(other.filteredItinerary);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 5,
      "OneArmyj": 229,
      "KxxMxxx": 15,
      "-": 145,
      "oscarsu97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAccommodation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Unmodifiable view of an Accommodation List"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public interface ReadOnlyAccommodation {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns an unmodifiable view of the accommodation list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * This list will not contain any duplicate accommodations."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ObservableList\u003cAccommodation\u003e getAccommodationList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyActivity.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Unmodifiable view of an Activity List"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public interface ReadOnlyActivity {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns an unmodifiable view of the activities list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * This list will not contain any duplicate activities."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ObservableList\u003cActivity\u003e getActivityList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyContact.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Unmodifiable view of an Contact List"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public interface ReadOnlyContact {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns an unmodifiable view of the contact list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * This list will not contain any duplicate contacts."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ObservableList\u003cContact\u003e getContactList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyItinerary.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Unmodifiable view of an Itinerary"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public interface ReadOnlyItinerary {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns an unmodifiable view of the itinerary."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * This list will not contain any duplicate days."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    ObservableList\u003cDay\u003e getItinerary();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the name of the planner."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Name getName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the start date of the planner."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    LocalDate getStartDate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getAccommodationFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getActivityFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getContactFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getItineraryFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 6,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private Path accommodationFilePath \u003d Paths.get(\"data\" , \"accommodation.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private Path activityFilePath \u003d Paths.get(\"data\" , \"activity.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private Path contactFilePath \u003d Paths.get(\"data\" , \"contact.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private Path itineraryFilePath \u003d Paths.get(\"data\" , \"itinerary.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        setAccommodationFilePath(newUserPrefs.getAccommodationFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getAccommodationFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return accommodationFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setAccommodationFilePath(Path accommodationFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(accommodationFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.accommodationFilePath \u003d accommodationFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getActivityFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return activityFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setActivityFilePath(Path activityFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(activityFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.activityFilePath \u003d activityFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getContactFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return contactFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContactFilePath(Path contactFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(contactFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.contactFilePath \u003d contactFilePath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getItineraryFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return itineraryFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setItineraryFilePath(Path itineraryFilePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(itineraryFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.itineraryFilePath \u003d itineraryFilePath;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 accommodationFilePath.equals(o.accommodationFilePath)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 activityFilePath.equals(o.activityFilePath)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 contactFilePath.equals(o.contactFilePath)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 itineraryFilePath.equals(o.itineraryFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return Objects.hash(guiSettings, accommodationFilePath, activityFilePath, contactFilePath, itineraryFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        sb.append(\"\\nLocal Accommodation data file location : \" + accommodationFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        sb.append(\"\\nLocal Activity data file location : \" + activityFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        sb.append(\"\\nLocal Contact data file location : \" + contactFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        sb.append(\"\\nLocal Itinerary data file location : \" + itineraryFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 46,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/Contact.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Represents a Contact in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class Contact {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Contact(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireAllNonNull(name, phone, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean isSameContact(Contact otherContact) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (otherContact \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return otherContact !\u003d null"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 otherContact.getName().equals(getName())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 (otherContact.getPhone().equals(getPhone()) || otherContact.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!(other instanceof Contact)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact otherContact \u003d (Contact) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return otherContact.getName().equals(getName())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 otherContact.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 otherContact.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 otherContact.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 otherContact.getTags().equals(getTags());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                .append(getEmail().isPresent() ? getEmail().get().value : \"\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                .append(getAddress().isPresent() ? getAddress().get().value : \"\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 25,
      "KxxMxxx": 1,
      "-": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Represents a Contact\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String EMPTY_EMAIL \u003d \"No email recorded.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        checkArgument(isValidEmail(email) | isEmptyEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns if a given string is an empty email."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static boolean isEmptyEmail(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return test.matches(EMPTY_EMAIL);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 11,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Represents a Contact\u0027s phone number in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/UniqueContactList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.exceptions.ContactNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.exceptions.DuplicateContactException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * A contacts is considered unique by comparing using {@code Contact#isSameContact(Contact)}. As such, adding and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * updating of persons uses Contact#isSameContact(Contact) for equality so as to ensure that the contacts being"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueContactList. However, the removal of a"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * contacts uses Contact#equals(Object) so as to ensure that the contacts with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * @see Contact#isSameContact(Contact)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class UniqueContactList implements Iterable\u003cContact\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final ObservableList\u003cContact\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final ObservableList\u003cContact\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns true if the list contains an equivalent contacts as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean contains(Contact toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameContact);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns true if the list contains a contact with the same number as the given argument."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean containsPhone(Phone toCheck) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return internalList.stream().anyMatch(x -\u003e x.getPhone().equals(toCheck));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns an Optional Contact if the list contains a contact with the same number as the given argument."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public Optional\u003cContact\u003e getWithPhone(Phone toGet) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(toGet);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return internalList.stream().filter(x -\u003e x.getPhone().equals(toGet)).findFirst();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Adds a contacts to the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The contacts must not already exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void add(Contact toAdd) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new DuplicateContactException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces the contacts {@code target} in the list with {@code editedContact}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The contacts identity of {@code editedContact} must not be the same as another existing contacts in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContact(Contact target, Contact editedContact) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireAllNonNull(target, editedContact);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new ContactNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!target.isSameContact(editedContact) \u0026\u0026 contains(editedContact)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new DuplicateContactException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        internalList.set(index, editedContact);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Removes the equivalent contacts from the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The contacts must exist in the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void remove(Contact toRemove) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new ContactNotFoundException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContacts(UniqueContactList replacement) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces the contents of this list with {@code contacts}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code contacts} must not contain duplicate contacts."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContacts(List\u003cContact\u003e contacts) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireAllNonNull(contacts);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!contactsAreUnique(contacts)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new DuplicateContactException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        internalList.setAll(contacts);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ObservableList\u003cContact\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Iterator\u003cContact\u003e iterator() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                || (other instanceof UniqueContactList // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueContactList) other).internalList));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns true if {@code contacts} contains only unique contacts."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private boolean contactsAreUnique(List\u003cContact\u003e contacts) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        for (int i \u003d 0; i \u003c contacts.size() - 1; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            for (int j \u003d i + 1; j \u003c contacts.size(); j++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                if (contacts.get(i).isSameContact(contacts.get(j))) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 138,
      "KxxMxxx": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/exceptions/ContactNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model.contact.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Signals that the operation is unable to find the specified contacts."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class ContactNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/contact/exceptions/DuplicateContactException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model.contact.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class DuplicateContactException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public DuplicateContactException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        super(\"Operation would result in duplicate contacts\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 4,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/ActivityWithTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * Wraps the Activity in an object with time and duration fields."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class ActivityWithTime implements Comparable\u003cActivityWithTime\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private final Activity activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private final LocalTime startTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private final LocalTime endTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public ActivityWithTime(Activity activity, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        requireAllNonNull(activity, startTime, endTime);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public Activity getActivity() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return activity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this.endTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (!(other instanceof ActivityWithTime)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        ActivityWithTime otherActivity \u003d (ActivityWithTime) other;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this.activity.equals(otherActivity.activity)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                \u0026\u0026 this.startTime.equals(otherActivity.startTime)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                \u0026\u0026 this.endTime.equals(otherActivity.endTime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public int compareTo(ActivityWithTime other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this.startTime.compareTo(other.startTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 56,
      "KxxMxxx": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Day.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Represents a Day in the travel planner\u0027s planner."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * Guarantees: timetable is present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class Day {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Number of days should be an integer greater than 0.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[1-9]\\\\d*$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private final Timetable timetable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public Day() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public Day(List\u003cActivityWithTime\u003e activitiesForDay) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.timetable \u003d new Timetable(activitiesForDay);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns true if both days contain the same activities."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean isSameDay(Day otherDay) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (otherDay \u003d\u003d this) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this.timetable.equals(otherDay.timetable);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Gets all the activities present in {@code Day} and wraps them in ActivityWithTime."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * @return list of {@code ActivityWithTime} present in {@code Day}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public List\u003cActivityWithTime\u003e getListOfActivityWithTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this.timetable.getActivitiesWithTime();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public Optional\u003cActivityWithTime\u003e getActivityWithTime(LocalTime time) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this.timetable.getActivityWithTimeAtTime(time);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns true if a given string is a valid integer."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static boolean isValidDayNumber(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!(other instanceof Day)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Day otherDay \u003d (Day) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return otherDay.timetable.equals(this.timetable);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 37,
      "OneArmyj": 15,
      "KxxMxxx": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Timetable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * Represents the timetable of a {@code Day}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * Guarantees: {@code Timetable} is filled with {@code HalfHour}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class Timetable {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private static final String MESSAGE_ACTIVITY_TIME_CONFLICT \u003d \"There is a conflict in time between activities!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private TreeSet\u003cActivityWithTime\u003e timetable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public Timetable() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        timetable \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public Timetable(List\u003cActivityWithTime\u003e activities) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.timetable \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (activities.size() \u003e 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            Iterator\u003cActivityWithTime\u003e activitiesIterator \u003d activities.iterator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            this.timetable.add(activitiesIterator.next());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            while (activitiesIterator.hasNext()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                ActivityWithTime toAdd \u003d activitiesIterator.next();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                ActivityWithTime floorActivity \u003d this.timetable.floor(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                ActivityWithTime ceilingActivity \u003d this.timetable.ceiling(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                if (floorActivity \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                    // check if toAdd\u0027s endTime does not overlap with ceilingActivity\u0027s startTime"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                    if (toAdd.getEndTime().compareTo(ceilingActivity.getStartTime()) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                        this.timetable.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                        throw new CommandException(MESSAGE_ACTIVITY_TIME_CONFLICT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                } else if (ceilingActivity \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                    // check if toAdd\u0027s startTime does not overlap with ceilingActivity\u0027s endTime"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                    if (toAdd.getStartTime().compareTo(floorActivity.getEndTime()) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                        this.timetable.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                        throw new CommandException(MESSAGE_ACTIVITY_TIME_CONFLICT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                    if (toAdd.getStartTime().compareTo(floorActivity.getEndTime()) \u003e\u003d 0"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                        \u0026\u0026 toAdd.getEndTime().compareTo(ceilingActivity.getStartTime()) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                        this.timetable.add(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                        throw new CommandException(MESSAGE_ACTIVITY_TIME_CONFLICT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public Optional\u003cActivityWithTime\u003e getActivityWithTimeAtTime(LocalTime time) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        ActivityWithTime timeToSearch \u003d new ActivityWithTime(createEmptyActivity(), time, time);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        ActivityWithTime floorActivity \u003d this.timetable.floor(timeToSearch);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (floorActivity \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } else if (floorActivity.getEndTime().compareTo(time) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return Optional.of(floorActivity);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public List\u003cActivityWithTime\u003e getActivitiesWithTime() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return new ArrayList\u003c\u003e(this.timetable);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Activity createEmptyActivity() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return new Activity(new Name(\"activityStub\"), new Address(\"addressStub\"), null, new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (!(other instanceof Timetable)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        List\u003cActivityWithTime\u003e otherActivities \u003d ((Timetable) other).getActivitiesWithTime();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        List\u003cActivityWithTime\u003e thisActivities \u003d this.getActivitiesWithTime();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return checkIfTwoListAreEqual(thisActivities, otherActivities);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Compares the order and elements of two lists to determine if they are equal."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private boolean checkIfTwoListAreEqual(List\u003cActivityWithTime\u003e list1, List\u003cActivityWithTime\u003e list2) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (list1.size() !\u003d list2.size()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Iterator\u003cActivityWithTime\u003e list1Iterator \u003d list1.listIterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Iterator\u003cActivityWithTime\u003e list2Iterator \u003d list2.listIterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        while (list1Iterator.hasNext()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            ActivityWithTime list1Next \u003d list1Iterator.next();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            ActivityWithTime list2Next \u003d list2Iterator.next();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            if (!list1Next.equals(list2Next)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 119,
      "KxxMxxx": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/UniqueDayList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.day.exceptions.DayNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.day.exceptions.DuplicateDayException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Itinerary class helps to manage the list of days in an Planner."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class UniqueDayList implements Iterable\u003cDay\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final ObservableList\u003cDay\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final ObservableList\u003cDay\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns true if the list contains an equivalent contacts as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean contains(Day toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDay);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Adds a day to the planner"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void add(Day d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(d);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!contains(d)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            internalList.add(d);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Adds a number of days to the planner."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void adds(int numDays) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(numDays);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        for (int i \u003d 0; i \u003c numDays; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            Day toAdd \u003d new Day();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setDays(UniqueDayList replacement) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Replaces the contents of this list with {@code days}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * {@code days} must not contain duplicate day."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void setDays(List\u003cDay\u003e days) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireAllNonNull(days);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!daysAreUnique(days)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new DuplicateDayException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        internalList.setAll(days);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Replaces the days {@code target} in the list with {@code editedDay}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * {@code target} must exist in the planner."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * The contacts identity of {@code editedDay} must not be the same as another existing days in the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * planner."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void setDay(Day target,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                       Day editedDay) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireAllNonNull(target, editedDay);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new DayNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!target.isSameDay(editedDay) \u0026\u0026 contains(editedDay)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new DuplicateDayException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        internalList.set(index, editedDay);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Removes the equivalent days from the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * The days must exist in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void remove(Day toRemove) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new DayNotFoundException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public ObservableList\u003cDay\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public Iterator\u003cDay\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                || (other instanceof UniqueDayList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDayList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns true if {@code activities} contains only unique activities."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private boolean daysAreUnique(List\u003cDay\u003e days) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        for (int i \u003d 0; i \u003c days.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            for (int j \u003d i + 1; j \u003c days.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                if (days.get(i).isSameDay(days.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 1,
      "OneArmyj": 61,
      "KxxMxxx": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/exceptions/DayNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.model.day.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Signals that the operation is unable to find the specified days."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class DayNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/exceptions/DuplicateDayException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.model.day.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Signals that the operation will result in duplicate Days (Days are considered if they have the same activities)."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class DuplicateDayException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public DuplicateDayException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        super(\"Operation would result in duplicate days\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/field/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Represents a Contact\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/field/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Represents the name of an Activity, Accommodation or Contact in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 2,
      "-": 52,
      "oscarsu97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/field/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Tests that a {@code Contact}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cContact\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean test(Contact contact) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(contact.getName().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 6,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itineraryitem/ItineraryItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.model.itineraryitem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Represents an Itinerary Item in the trip planner."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public abstract class ItineraryItem {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    //Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final Contact contact;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public ItineraryItem(Name name, Address address, Contact contact, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireAllNonNull(name, address, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cContact\u003e getContact() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return Optional.ofNullable(contact);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Returns true if both activities have the same identity and data fields."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * This defines a stronger notion of equality between two activities."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!(other instanceof ItineraryItem)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        ItineraryItem otherItem \u003d (ItineraryItem) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return otherItem.getName().equals(getName())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 otherItem.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 otherItem.getTags().equals(getTags())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 otherItem.getContact().equals(getContact());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return Objects.hash(name, address, tags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                .append(\" Contact: \")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                .append(getContact().isPresent()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        ? getContact().get()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        : \"\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                //note that Contact.toString also has tags"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 16,
      "KxxMxxx": 16,
      "oscarsu97": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itineraryitem/accommodation/Accommodation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.model.itineraryitem.accommodation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.ItineraryItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Represents an Accommodation in the trip planner."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class Accommodation extends ItineraryItem {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public Accommodation(Name name, Address address, Contact contact, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        super(name, address, contact, tags);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean isSameAccommodation(Accommodation otherAccommodation) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (otherAccommodation \u003d\u003d this) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return otherAccommodation !\u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 otherAccommodation.getName().equals(getName())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 (otherAccommodation.getAddress().equals(getAddress()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns true if both activities have the same identity and data fields."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * This defines a stronger notion of equality between two activities."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!(other instanceof Accommodation)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Accommodation otherAccommodation \u003d (Accommodation) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return otherAccommodation.getName().equals(getName())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 otherAccommodation.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 otherAccommodation.getTags().equals(getTags())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 otherAccommodation.getContact().equals(getContact());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itineraryitem/accommodation/UniqueAccommodationList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.model.itineraryitem.accommodation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.exceptions.AccommodationNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.exceptions.DuplicateAccommodationException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * A contacts is considered unique by comparing using {@code Accommodation#isSamePerson(Accommodation)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * adding and updating of persons uses Accommodation#isSamePerson(Accommodation) for equality so as to ensure that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * the contacts being added or updated is unique in terms of identity in the UniqueAccommodationList. However, the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * removal of a contacts usesvAccommodation#equals(Object) so as to ensure that the contacts with exactly the same"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * @see Accommodation#isSameAccommodation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * (Accommodation)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class UniqueAccommodationList implements Iterable\u003cAccommodation\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final ObservableList\u003cAccommodation\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final ObservableList\u003cAccommodation\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns true if the list contains an equivalent contacts as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean contains(Accommodation toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAccommodation);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Adds a contacts to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The contacts must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void add(Accommodation toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new DuplicateAccommodationException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setAccommodations(UniqueAccommodationList replacement) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void setAccommodations(List\u003cAccommodation\u003e accommodations) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireAllNonNull(accommodations);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!accommodationsAreUnique(accommodations)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new DuplicateAccommodationException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        internalList.setAll(accommodations);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces the contacts {@code target} in the list with {@code editedAccommodation}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The contacts identity of {@code editedAccommodation} must not be the same as another existing contacts in the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void setAccommodation(Accommodation target, Accommodation editedAccommodation) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireAllNonNull(target, editedAccommodation);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AccommodationNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!target.isSameAccommodation(editedAccommodation) \u0026\u0026 contains(editedAccommodation)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new DuplicateAccommodationException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        internalList.set(index, editedAccommodation);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Removes the equivalent contacts from the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The contacts must exist in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void remove(Accommodation toRemove) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AccommodationNotFoundException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public ObservableList\u003cAccommodation\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public Iterator\u003cAccommodation\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                || (other instanceof UniqueAccommodationList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueAccommodationList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns true if {@code activities} contains only unique activities."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private boolean accommodationsAreUnique(List\u003cAccommodation\u003e accommodations) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        for (int i \u003d 0; i \u003c accommodations.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            for (int j \u003d i + 1; j \u003c accommodations.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                if (accommodations.get(i).isSameAccommodation(accommodations.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 127,
      "KxxMxxx": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itineraryitem/accommodation/exceptions/AccommodationNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.model.itineraryitem.accommodation.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Signals that the operation is unable to find the specified contacts."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class AccommodationNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 5,
      "KxxMxxx": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itineraryitem/accommodation/exceptions/DuplicateAccommodationException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.model.itineraryitem.accommodation.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Signals that the operation will result in duplicate Activities (Activities are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class DuplicateAccommodationException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public DuplicateAccommodationException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        super(\"Operation would result in duplicate accommodations\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 10,
      "KxxMxxx": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itineraryitem/activity/Activity.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.model.itineraryitem.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.ItineraryItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an Activity in the trip planner."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class Activity extends ItineraryItem {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public Activity(Name name, Address address, Contact contact, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        super(name, address, contact, tags);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean isSameActivity(Activity otherActivity) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (otherActivity \u003d\u003d this) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return otherActivity !\u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 otherActivity.getName().equals(getName())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 (otherActivity.getAddress().equals(getAddress()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns true if both activities have the same identity and data fields."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * This defines a stronger notion of equality between two activities."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (!(other instanceof Activity)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Activity otherActivity \u003d (Activity) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return otherActivity.getName().equals(getName())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 otherActivity.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 otherActivity.getTags().equals(getTags())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u0026\u0026 otherActivity.getContact().equals(getContact());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 56,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itineraryitem/activity/UniqueActivityList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.model.itineraryitem.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.activity.exceptions.ActivityNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.activity.exceptions.DuplicateActivityException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * A contacts is considered unique by comparing using {@code Accommodation#isSamePerson(Accommodation)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * adding and updating of persons uses Accommodation#isSamePerson(Accommodation) for equality so as to ensure"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * that the contacts being added or updated is unique in terms of identity in the UniqueAccommodationList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * However, the removal of a contacts uses Accommodation#equals(Object) so as to ensure that the contacts with"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * @see Activity#isSameActivity(Activity)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class UniqueActivityList implements Iterable\u003cActivity\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final ObservableList\u003cActivity\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private final ObservableList\u003cActivity\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns true if the list contains an equivalent contacts as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean contains(Activity toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameActivity);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Adds a contacts to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The contacts must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void add(Activity toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void setActivities(UniqueActivityList replacement) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void setActivities(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireAllNonNull(activities);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!activitiesAreUnique(activities)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        internalList.setAll(activities);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Replaces the contacts {@code target} in the list with {@code editedAccommodation}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The contacts identity of {@code editedAccommodation} must not be the same as another existing contacts in the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireAllNonNull(target, editedActivity);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new ActivityNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!target.isSameActivity(editedActivity) \u0026\u0026 contains(editedActivity)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        internalList.set(index, editedActivity);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Removes the equivalent contacts from the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * The contacts must exist in the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void remove(Activity toRemove) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new ActivityNotFoundException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public ObservableList\u003cActivity\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public Iterator\u003cActivity\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                || (other instanceof UniqueActivityList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueActivityList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns true if {@code activities} contains only unique activities."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private boolean activitiesAreUnique(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        for (int i \u003d 0; i \u003c activities.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            for (int j \u003d i + 1; j \u003c activities.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                if (activities.get(i).isSameActivity(activities.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 121,
      "KxxMxxx": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itineraryitem/activity/exceptions/ActivityNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.model.itineraryitem.activity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Signals that the operation is unable to find the specified contacts."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class ActivityNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 5,
      "KxxMxxx": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itineraryitem/activity/exceptions/DuplicateActivityException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.model.itineraryitem.activity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Signals that the operation will result in duplicate Activities (Activities are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class DuplicateActivityException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public DuplicateActivityException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        super(\"Operation would result in duplicate activities\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 10,
      "KxxMxxx": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.AccommodationManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ActivityManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ContactManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.Itinerary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyAccommodation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyActivity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyContact;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyItinerary;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.day.ActivityWithTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Contains utility methods for populating {@code Planner} with sample data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static Accommodation[] getSampleAccommodations() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return new Accommodation[]{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Accommodation(new Name(\"Alex Yeoh\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    null, getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Accommodation(new Name(\"Bernice Yu\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    null, getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Accommodation(new Name(\"Charlotte Oliveiro\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    null, getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Accommodation(new Name(\"David Li\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    null, getTagSet(\"family\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Accommodation(new Name(\"Irfan Ibrahim\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    null, getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Accommodation(new Name(\"Roy Balakrishnan\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    null, getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static ReadOnlyAccommodation getSampleAccommodationManager() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        AccommodationManager sampleAm \u003d new AccommodationManager();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        for (Accommodation sampleAccommodation : getSampleAccommodations()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            sampleAm.addAccommodation(sampleAccommodation);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return sampleAm;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static Activity[] getSampleActivities() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return new Activity[]{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Activity(new Name(\"Alex Yeoh\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    null, getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Activity(new Name(\"Bernice Yu\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    null, getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Activity(new Name(\"Charlotte Oliveiro\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    null, getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Activity(new Name(\"David Li\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    null, getTagSet(\"family\")),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Activity(new Name(\"Irfan Ibrahim\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    null, getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Activity(new Name(\"Roy Balakrishnan\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                    null, getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        };"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static ReadOnlyActivity getSampleActivityManager() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ActivityManager sampleAm \u003d new ActivityManager();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        for (Activity sampleActivity : getSampleActivities()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            sampleAm.addActivity(sampleActivity);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return sampleAm;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static Contact[] getSampleContacts() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return new Contact[]{"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Contact(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Contact(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Contact(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Contact(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"family\")),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Contact(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Contact(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static ReadOnlyContact getSampleContactManager() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ContactManager sampleCm \u003d new ContactManager();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        for (Contact sampleContact : getSampleContacts()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            sampleCm.addContact(sampleContact);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return sampleCm;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    // Need to add more samples"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static Day[] getSampleDays() throws CommandException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ArrayList\u003cActivityWithTime\u003e sampleActivities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Activity a \u003d new Activity(new Name(\"Go Ocean Park\"), new Address(\"Tokyo\"), null, getTagSet(\"epic\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        sampleActivities.add(new ActivityWithTime(a, LocalTime.of(10, 30), LocalTime.of(12, 30)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return new Day[]{"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            new Day(sampleActivities)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        };"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static ReadOnlyItinerary getSampleItinerary() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            Itinerary sampleItinerary \u003d new Itinerary();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            sampleItinerary.setDays(Arrays.asList(getSampleDays()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            return sampleItinerary;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            return new Itinerary();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 103,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyAccommodation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyActivity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyContact;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyItinerary;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.accommodation.AccommodationStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.activity.ActivityStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.contact.ContactStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.day.ItineraryStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public interface Storage extends AccommodationStorage, ActivityStorage, ContactStorage, ItineraryStorage,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        UserPrefsStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AccommodationStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getAccommodationFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Optional\u003cReadOnlyAccommodation\u003e readAccommodation() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void saveAccommodation(ReadOnlyAccommodation accommodation) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ActivityStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getActivityFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Optional\u003cReadOnlyActivity\u003e readActivity() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void saveActivity(ReadOnlyActivity activity) throws IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ContactStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getContactFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Optional\u003cReadOnlyContact\u003e readContact() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void saveContact(ReadOnlyContact contact) throws IOException;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ItineraryStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getItineraryFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Optional\u003cReadOnlyItinerary\u003e readItinerary() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void saveItinerary(ReadOnlyItinerary itinerary) throws IOException;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 50,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyAccommodation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyActivity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyContact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyItinerary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.accommodation.AccommodationStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.activity.ActivityStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.contact.ContactStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.day.ItineraryStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Manages storage of Planner data in local storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private AccommodationStorage accommodationStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private ActivityStorage activityStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private ContactStorage contactStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private ItineraryStorage itineraryStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public StorageManager(AccommodationStorage accommodationStorage, ActivityStorage activityStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                          ContactStorage contactStorage, ItineraryStorage itineraryStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.accommodationStorage \u003d accommodationStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.activityStorage \u003d activityStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.contactStorage \u003d contactStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.itineraryStorage \u003d itineraryStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AccommodationStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getAccommodationFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return accommodationStorage.getAccommodationFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cReadOnlyAccommodation\u003e readAccommodation() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return readAccommodation(accommodationStorage.getAccommodationFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cReadOnlyAccommodation\u003e readAccommodation(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return accommodationStorage.readAccommodation(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void saveAccommodation(ReadOnlyAccommodation accommodation) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        saveAccommodation(accommodation, accommodationStorage.getAccommodationFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void saveAccommodation(ReadOnlyAccommodation accommodation, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        accommodationStorage.saveAccommodation(accommodation, filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ActivityStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getActivityFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return activityStorage.getActivityFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cReadOnlyActivity\u003e readActivity() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return readActivity(activityStorage.getActivityFilePath());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cReadOnlyActivity\u003e readActivity(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return activityStorage.readActivity(filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void saveActivity(ReadOnlyActivity activity) throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        saveActivity(activity, activityStorage.getActivityFilePath());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void saveActivity(ReadOnlyActivity activity, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        activityStorage.saveActivity(activity, filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ContactStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getContactFilePath() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return contactStorage.getContactFilePath();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cReadOnlyContact\u003e readContact() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return readContact(contactStorage.getContactFilePath());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cReadOnlyContact\u003e readContact(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return contactStorage.readContact(filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void saveContact(ReadOnlyContact contact) throws IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        saveContact(contact, contactStorage.getContactFilePath());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void saveContact(ReadOnlyContact contact, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        contactStorage.saveContact(contact, filePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ItineraryStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getItineraryFilePath() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return itineraryStorage.getItineraryFilePath();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cReadOnlyItinerary\u003e readItinerary() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return readItinerary(itineraryStorage.getItineraryFilePath());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cReadOnlyItinerary\u003e readItinerary(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return itineraryStorage.readItinerary(filePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void saveItinerary(ReadOnlyItinerary itinerary) throws IOException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        saveItinerary(itinerary, itineraryStorage.getItineraryFilePath());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void saveItinerary(ReadOnlyItinerary itinerary, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        itineraryStorage.saveItinerary(itinerary, filePath);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 122,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/accommodation/AccommodationStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.storage.accommodation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyAccommodation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Represents a storage for {@link Accommodation}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public interface AccommodationStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getAccommodationFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns Accommodation data as a {@link ReadOnlyAccommodation}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Optional\u003cReadOnlyAccommodation\u003e readAccommodation() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @see #getAccommodationFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Optional\u003cReadOnlyAccommodation\u003e readAccommodation(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Saves the given {@link ReadOnlyAccommodation} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @param accommodationManager cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void saveAccommodation(ReadOnlyAccommodation accommodationManager) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @see #saveAccommodation(ReadOnlyAccommodation)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void saveAccommodation(ReadOnlyAccommodation address, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/accommodation/JsonAccommodationStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.storage.accommodation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyAccommodation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * A class to access Accommodation data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class JsonAccommodationStorage implements AccommodationStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAccommodationStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonAccommodationStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getAccommodationFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cReadOnlyAccommodation\u003e readAccommodation() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return readAccommodation(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Similar to {@link #readAccommodation}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cReadOnlyAccommodation\u003e readAccommodation(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Optional\u003cJsonSerializableAccommodation\u003e jsonAccommodation \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                filePath, JsonSerializableAccommodation.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!jsonAccommodation.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            return Optional.of(jsonAccommodation.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void saveAccommodation(ReadOnlyAccommodation accommodation) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        saveAccommodation(accommodation, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Similar to {@link #saveAccommodation(ReadOnlyAccommodation)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void saveAccommodation(ReadOnlyAccommodation accommodation, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(accommodation);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAccommodation(accommodation), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/accommodation/JsonAdaptedAccommodation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.storage.accommodation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.contact.JsonAdaptedContact;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Jackson-friendly version of {@link Contact}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class JsonAdaptedAccommodation {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Accommodation\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final JsonAdaptedContact contact;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Constructs a {@code JsonAdaptedAccommodation} with the given accommodations details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonAdaptedAccommodation(@JsonProperty(\"name\") String name, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            @JsonProperty(\"contact\") JsonAdaptedContact contact, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Converts a given {@code Accommodation} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonAdaptedAccommodation(Accommodation source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        address \u003d source.getAddress().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        contact \u003d source.getContact().isPresent() ? new JsonAdaptedContact(source.getContact().get()) : null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Converts this Jackson-friendly adapted contacts object into the model\u0027s {@code Accommodation} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted contacts."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Accommodation toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        final List\u003cTag\u003e accommodationTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            accommodationTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (address !\u003d null \u0026\u0026 !Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        final Address modelAddress \u003d address !\u003d null ? new Address(address) : null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        final Contact modelContact \u003d (contact \u003d\u003d null) ? null : contact.toModelType();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(accommodationTags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return new Accommodation(modelName, modelAddress, modelContact, modelTags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/accommodation/JsonSerializableAccommodation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.storage.accommodation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.AccommodationManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyAccommodation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * An Immutable Accommodation that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "@JsonRootName(value \u003d \"accommodationManager\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class JsonSerializableAccommodation {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOMMODATION \u003d \"Accommodations list contains duplicate \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            + \"accommodations(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final List\u003cJsonAdaptedAccommodation\u003e accommodations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Constructs a {@code JsonSerializableAccommodation} with the given accommodations."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonSerializableAccommodation("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @JsonProperty(\"accommodations\") List\u003cJsonAdaptedAccommodation\u003e accommodations) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.accommodations.addAll(accommodations);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Converts a given {@code ReadOnlyAccommodation} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAccommodation}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonSerializableAccommodation(ReadOnlyAccommodation source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        accommodations.addAll(source.getAccommodationList().stream().map(JsonAdaptedAccommodation::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Converts these accommodation data into the model\u0027s {@code AccommodationManager} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public AccommodationManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        AccommodationManager accommodation \u003d new AccommodationManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        for (JsonAdaptedAccommodation jsonAdaptedAccommodation : accommodations) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            Accommodation accom \u003d jsonAdaptedAccommodation.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            if (accommodation.hasAccommodation(accom)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ACCOMMODATION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            accommodation.addAccommodation(accom);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return accommodation;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/activity/ActivityStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.storage.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyActivity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Represents a storage for {@link Activity}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public interface ActivityStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getActivityFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns Activity data as a {@link ReadOnlyActivity}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Optional\u003cReadOnlyActivity\u003e readActivity() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @see #getActivityFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Optional\u003cReadOnlyActivity\u003e readActivity(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Saves the given {@link ReadOnlyActivity} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @param activity cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void saveActivity(ReadOnlyActivity activity) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @see #saveActivity(ReadOnlyActivity)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void saveActivity(ReadOnlyActivity activity, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/activity/JsonActivityStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.storage.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyActivity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * A class to access Activity data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class JsonActivityStorage implements ActivityStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonActivityStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonActivityStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getActivityFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cReadOnlyActivity\u003e readActivity() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return readActivity(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Similar to {@link #readActivity}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cReadOnlyActivity\u003e readActivity(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Optional\u003cJsonSerializableActivity\u003e jsonActivity \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                filePath, JsonSerializableActivity.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!jsonActivity.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            return Optional.of(jsonActivity.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void saveActivity(ReadOnlyActivity activity) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        saveActivity(activity, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Similar to {@link #saveActivity(ReadOnlyActivity)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void saveActivity(ReadOnlyActivity activity, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableActivity(activity), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 21,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/activity/JsonAdaptedActivity.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.storage.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.contact.JsonAdaptedContact;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Jackson-friendly version of {@link Contact}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class JsonAdaptedActivity {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Activity\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final JsonAdaptedContact contact;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Constructs a {@code JsonAdaptedActivity} with the given activity details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonAdaptedActivity(@JsonProperty(\"name\") String name, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            @JsonProperty(\"contact\") JsonAdaptedContact contact, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Converts a given {@code Activity} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonAdaptedActivity(Activity source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        address \u003d source.getAddress().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        contact \u003d source.getContact().isPresent() ? new JsonAdaptedContact(source.getContact().get()) : null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Converts this Jackson-friendly adapted contacts object into the model\u0027s {@code Activity} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted contacts."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Activity toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        final List\u003cTag\u003e accommodationTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            accommodationTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (address !\u003d null \u0026\u0026 !Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        final Address modelAddress \u003d address !\u003d null ? new Address(address) : null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        final Contact modelContact \u003d (contact \u003d\u003d null) ? null : contact.toModelType();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(accommodationTags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return new Activity(modelName, modelAddress, modelContact, modelTags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/activity/JsonSerializableActivity.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.storage.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ActivityManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyActivity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * An Immutable Activity that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "@JsonRootName(value \u003d \"activityManager\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class JsonSerializableActivity {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACTIVITY \u003d \"Activities list contains one or more duplicate \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        + \"activity.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final List\u003cJsonAdaptedActivity\u003e activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Constructs a {@code JsonSerializableActivity} with the given activities."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonSerializableActivity("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @JsonProperty(\"activities\") List\u003cJsonAdaptedActivity\u003e activities) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.activities.addAll(activities);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Converts a given {@code ReadOnlyActivity} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableActivity}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonSerializableActivity(ReadOnlyActivity source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        activities.addAll(source.getActivityList().stream().map(JsonAdaptedActivity::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Converts these activity data into the model\u0027s {@code ActivityManager} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ActivityManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ActivityManager activity \u003d new ActivityManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        for (JsonAdaptedActivity jsonAdaptedActivity : activities) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            Activity activ \u003d jsonAdaptedActivity.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            if (activity.hasActivity(activ)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            activity.addActivity(activ);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return activity;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/contact/ContactStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.storage.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyContact;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Represents a storage for {@link Contact}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public interface ContactStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getContactFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns Contact data as a {@link ReadOnlyContact}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Optional\u003cReadOnlyContact\u003e readContact() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @see #getContactFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Optional\u003cReadOnlyContact\u003e readContact(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Saves the given {@link ReadOnlyContact} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @param contactManager cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void saveContact(ReadOnlyContact contactManager) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @see #saveContact(ReadOnlyContact)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void saveContact(ReadOnlyContact address, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/contact/JsonAdaptedContact.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.storage.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Jackson-friendly version of {@link Contact}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class JsonAdaptedContact {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Contact\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Constructs a {@code JsonAdaptedContact} with the given contacts details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonAdaptedContact(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Converts a given {@code Contact} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonAdaptedContact(Contact source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        email \u003d source.getEmail().isPresent() ? source.getEmail().get().value : null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        address \u003d source.getAddress().isPresent() ? source.getAddress().get().value : null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Converts this Jackson-friendly adapted contacts object into the model\u0027s {@code Contact} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted contacts."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Contact toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (email !\u003d null \u0026\u0026 !Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        final Email modelEmail \u003d email !\u003d null ? new Email(email) : null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (address !\u003d null \u0026\u0026 !Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        final Address modelAddress \u003d address !\u003d null ? new Address(address) : null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return new Contact(modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 19,
      "KxxMxxx": 6,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/contact/JsonContactStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.storage.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyContact;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * A class to access Contact data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class JsonContactStorage implements ContactStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonContactStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonContactStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getContactFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cReadOnlyContact\u003e readContact() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return readContact(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Similar to {@link #readContact}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cReadOnlyContact\u003e readContact(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Optional\u003cJsonSerializableContact\u003e jsonContact \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                filePath, JsonSerializableContact.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!jsonContact.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            return Optional.of(jsonContact.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void saveContact(ReadOnlyContact contact) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        saveContact(contact, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Similar to {@link #saveContact(ReadOnlyContact)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void saveContact(ReadOnlyContact contact, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(contact);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableContact(contact), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 21,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/contact/JsonSerializableContact.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.storage.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ContactManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyContact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * An Immutable Contact that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "@JsonRootName(value \u003d \"contactManager\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class JsonSerializableContact {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONTACT \u003d \"Contacts list contains duplicate contacts(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final List\u003cJsonAdaptedContact\u003e contacts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Constructs a {@code JsonSerializableContact} with the given contacts."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonSerializableContact(@JsonProperty(\"contacts\") List\u003cJsonAdaptedContact\u003e contacts) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.contacts.addAll(contacts);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Converts a given {@code ReadOnlyContact} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableContact}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonSerializableContact(ReadOnlyContact source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        contacts.addAll(source.getContactList().stream().map(JsonAdaptedContact::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Converts these contact data into the model\u0027s {@code ContactManager} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ContactManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ContactManager contact \u003d new ContactManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        for (JsonAdaptedContact jsonAdaptedContact : contacts) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            Contact con \u003d jsonAdaptedContact.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            if (contact.hasContact(con)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            contact.addContact(con);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return contact;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 25,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/day/ItineraryStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.storage.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.Itinerary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyItinerary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Represents a storage for {@link Itinerary}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public interface ItineraryStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Path getItineraryFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns Itinerary data as a {@link ReadOnlyItinerary}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Optional\u003cReadOnlyItinerary\u003e readItinerary() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @see #getItineraryFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    Optional\u003cReadOnlyItinerary\u003e readItinerary(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Saves the given {@link ReadOnlyItinerary} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @param itinerary cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void saveItinerary(ReadOnlyItinerary itinerary) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @see #saveItinerary(ReadOnlyItinerary)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    void saveItinerary(ReadOnlyItinerary address, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/day/JsonAdaptedActivityWithTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.storage.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.day.ActivityWithTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.activity.JsonAdaptedActivity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Jackson-friendly version of {@link Day}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class JsonAdaptedActivityWithTime {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final JsonAdaptedActivity activity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Constructs a {@code JsonAdaptedActivityWithTime} with the given days details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonAdaptedActivityWithTime(@JsonProperty(\"activity\") JsonAdaptedActivity activity,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                          @JsonProperty(\"startTime\") String startTime, @JsonProperty(\"endTime\") String endTime) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Converts a given {@code Day} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonAdaptedActivityWithTime(ActivityWithTime source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        activity \u003d new JsonAdaptedActivity(source.getActivity());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        startTime \u003d source.getStartTime().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        endTime \u003d source.getEndTime().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Converts various Jackson-friendly adapted class objects into the day\u0027s {@code ActivityWithTime} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ActivityWithTime toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        final Activity modelActivity \u003d activity.toModelType();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        String[] stArray \u003d startTime.split(\":\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        String[] etArray \u003d endTime.split(\":\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        int startHour \u003d Integer.parseInt(stArray[0]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        int startMin \u003d Integer.parseInt(stArray[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        int endHour \u003d Integer.parseInt(etArray[0]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        int endMin \u003d Integer.parseInt(etArray[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        LocalTime activityStartTime \u003d LocalTime.of(startHour, startMin);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        LocalTime activityEndTime \u003d LocalTime.of(endHour, endMin);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return new ActivityWithTime(modelActivity, activityStartTime, activityEndTime);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/day/JsonAdaptedDay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.storage.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.day.ActivityWithTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Jackson-friendly version of {@link Day}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class JsonAdaptedDay {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Day\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final List\u003cJsonAdaptedActivityWithTime\u003e activityWithTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Constructs a {@code JsonAdaptedDay} with the given days details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonAdaptedDay(@JsonProperty(\"activityWithTimes\") List\u003cJsonAdaptedActivityWithTime\u003e activityWithTimes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (activityWithTimes !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            this.activityWithTimes.addAll(activityWithTimes);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Converts a given {@code Day} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonAdaptedDay(Day source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        activityWithTimes.addAll(source.getListOfActivityWithTime().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                .map(JsonAdaptedActivityWithTime::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Converts this Jackson-friendly adapted activityWithTimes object into the model\u0027s {@code Day} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted contacts."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Day toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            final List\u003cActivityWithTime\u003e dayActivities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            for (JsonAdaptedActivityWithTime activities : activityWithTimes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                dayActivities.add(activities.toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            return new Day(dayActivities);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new IllegalValueException(ce.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/day/JsonItineraryStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.storage.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyItinerary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * A class to access Itinerary data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class JsonItineraryStorage implements ItineraryStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonItineraryStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonItineraryStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Path getItineraryFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cReadOnlyItinerary\u003e readItinerary() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return readItinerary(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Similar to {@link #readItinerary}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Optional\u003cReadOnlyItinerary\u003e readItinerary(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Optional\u003cJsonSerializableItinerary\u003e jsonItinerary \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                filePath, JsonSerializableItinerary.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (!jsonItinerary.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            return Optional.of(jsonItinerary.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void saveItinerary(ReadOnlyItinerary itinerary) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        saveItinerary(itinerary, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Similar to {@link #saveItinerary(ReadOnlyItinerary)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void saveItinerary(ReadOnlyItinerary itinerary, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        requireNonNull(itinerary);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableItinerary(itinerary), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 21,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/day/JsonSerializableItinerary.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.storage.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.Itinerary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyItinerary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * An Immutable Itinerary that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "@JsonRootName(value \u003d \"itinerary\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "class JsonSerializableItinerary {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DAY \u003d \"Days list contains duplicate days(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final List\u003cJsonAdaptedDay\u003e days \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private String startDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Constructs a {@code JsonSerializableItinerary} with the given days."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonSerializableItinerary(@JsonProperty(\"days\") List\u003cJsonAdaptedDay\u003e days,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                                     @JsonProperty(\"name\") String name, @JsonProperty(\"startDate\") String startDate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.days.addAll(days);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Converts a given {@code ReadOnlyItinerary} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableItinerary}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public JsonSerializableItinerary(ReadOnlyItinerary source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        days.addAll(source.getItinerary().stream().map(JsonAdaptedDay::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        startDate \u003d source.getStartDate().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Converts this address book into the model\u0027s {@code Itinerary} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Itinerary toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Itinerary itinerary \u003d new Itinerary();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        for (JsonAdaptedDay jsonAdaptedDay : days) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            Day day \u003d jsonAdaptedDay.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            if (itinerary.hasDay(day)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DAY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            itinerary.addDay(day);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        String[] sdArray \u003d startDate.split(\"-\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assert(sdArray.length \u003d\u003d 3);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        int sdYear \u003d Integer.parseInt(sdArray[0]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        int sdMonth \u003d Integer.parseInt(sdArray[1]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        int sdDay \u003d Integer.parseInt(sdArray[2]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        itinerary.setName(new Name(name));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        itinerary.setStartDate(LocalDate.of(sdYear, sdMonth, sdDay));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return itinerary;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AccommodationCardSmall.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " * An UI component that displays information of a {@code Accommodation}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "public class AccommodationCardSmall extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private static final String FXML \u003d \"AccommodationListCardSmall.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Planner level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public final Accommodation accommodation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public AccommodationCardSmall(Accommodation accommodation, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        this.accommodation \u003d accommodation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        name.setText(accommodation.getName().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        if (!(other instanceof AccommodationCardSmall)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        AccommodationCardSmall card \u003d (AccommodationCardSmall) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                \u0026\u0026 accommodation.getName().equals(card.accommodation.getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 56,
      "KxxMxxx": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AccommodationListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " * Panel containing the list of accommodations."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "public class AccommodationListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private static final String FXML \u003d \"AccommodationListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ActivityListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private ListView\u003cAccommodation\u003e accommodationListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public AccommodationListPanel(ObservableList\u003cAccommodation\u003e accommodationList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        accommodationListView.setItems(accommodationList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        accommodationListView.setCellFactory(listView -\u003e new AccommodationListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Accommodation} using a"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * {@code AccommodationCardSmall}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    class AccommodationListViewCell extends ListCell\u003cAccommodation\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        protected void updateItem(Accommodation accommodation, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            super.updateItem(accommodation, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            if (empty || accommodation \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                setGraphic(new AccommodationCardSmall(accommodation, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 46,
      "KxxMxxx": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ActivityCardSmall.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " * An UI component that displays information of a {@code Activity}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "public class ActivityCardSmall extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private static final String FXML \u003d \"ActivityListCardSmall.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Planner level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public final Activity activity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public ActivityCardSmall(Activity activity, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        name.setText(activity.getName().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        if (!(other instanceof ActivityCardSmall)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        ActivityCardSmall card \u003d (ActivityCardSmall) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                \u0026\u0026 activity.getName().equals(card.activity.getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 56,
      "KxxMxxx": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ActivityListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " * Panel containing the list of activities."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "public class ActivityListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private static final String FXML \u003d \"ActivityListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ActivityListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private ListView\u003cActivity\u003e activityListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public ActivityListPanel(ObservableList\u003cActivity\u003e activityList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        activityListView.setItems(activityList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        activityListView.setCellFactory(listView -\u003e new ActivityListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Activity} using a"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * {@code ActivityCardSmall}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    class ActivityListViewCell extends ListCell\u003cActivity\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        protected void updateItem(Activity activity, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            super.updateItem(activity, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            if (empty || activity \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                setGraphic(new ActivityCardSmall(activity, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 46,
      "KxxMxxx": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CentralDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.control.Accordion;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " * A ui for the split window that is displayed at the center of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "public class CentralDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private static final String FXML \u003d \"CentralDisplay.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private Accordion sideDisplay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private TabPane tabDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public CentralDisplay() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"errorCommandBox\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        // commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            setStyleToDefault();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 3,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ContactCardFull.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " * An UI component that displays information of a {@code Contact}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "public class ContactCardFull extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private static final String FXML \u003d \"ContactListCardFull.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Planner level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public final Contact contact;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public ContactCardFull(Contact contact, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        name.setText(contact.getName().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        phone.setText(contact.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        address.setText(contact.getAddress().isPresent() ? contact.getAddress().get().value : \"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        email.setText(contact.getEmail().isPresent() ? contact.getEmail().get().value : \"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        contact.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        if (!(other instanceof ContactCardFull)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        ContactCardFull card \u003d (ContactCardFull) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                \u0026\u0026 contact.equals(card.contact);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ContactCardSmall.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " * An UI component that displays information of a {@code Contact}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "public class ContactCardSmall extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private static final String FXML \u003d \"ContactListCardSmall.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Planner level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public final Contact contact;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public ContactCardSmall(Contact contact, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        name.setText(contact.getName().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        if (!(other instanceof ContactCardSmall)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        ContactCardSmall card \u003d (ContactCardSmall) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                \u0026\u0026 contact.getName().equals(card.contact.getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ContactListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " * Panel containing the list of contacts."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "public class ContactListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private static final String FXML \u003d \"ContactListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ContactListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private ListView\u003cContact\u003e contactListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public ContactListPanel(ObservableList\u003cContact\u003e contactList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        contactListView.setItems(contactList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        contactListView.setCellFactory(listView -\u003e new ContactListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Contact} using a"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * {@code ContactCardSmall}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    class ContactListViewCell extends ListCell\u003cContact\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        protected void updateItem(Contact contact, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            super.updateItem(contact, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            if (empty || contact \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                setGraphic(new ContactCardSmall(contact, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-t09-1.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InfoListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " * Panel containing the list of information."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "public class InfoListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private static final String FXML \u003d \"InfoListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(InfoListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private ListView\u003cContact\u003e infoListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public InfoListPanel(ObservableList\u003cContact\u003e contactList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        infoListView.setItems(contactList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        infoListView.setCellFactory(listView -\u003e new InfoListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Contact} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    class InfoListViewCell extends ListCell\u003cContact\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        protected void updateItem(Contact contact, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            super.updateItem(contact, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            if (empty || contact \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                setGraphic(new ContactCardFull(contact, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    // private SplitDisplay splitDisplay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private CentralDisplay centralDisplay;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private BorderPane centralDisplayPlaceholder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        primaryStage.initStyle(StageStyle.UNDECORATED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        /* splitDisplay \u003d new SplitDisplay(logic.getFilteredAccommodationList(), logic.getFilteredActivityList(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                logic.getFilteredContactList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        splitDisplayPanelPlaceholder.getChildren().add(splitDisplay.getRoot()); */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        centralDisplay \u003d new CentralDisplay();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        centralDisplayPlaceholder.getChildren().add(centralDisplay.getRoot());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        //StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPlannerFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        //statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private void handleExit() { // @ernest: now limited to exit command"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            resultDisplay.setErrorFeedbackToUser(e.getMessage()); // @ernest: may need to rework this part"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 2,
      "ernestyyh": 15,
      "-": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * An UI component that displays information of a {@code Contact}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Planner level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public final Contact contact;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public PersonCard(Contact contact, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        name.setText(contact.getName().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        phone.setText(contact.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        address.setText(contact.getAddress().isPresent() ? contact.getAddress().get().value : \"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        email.setText(contact.getEmail().isPresent() ? contact.getEmail().get().value : \"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        contact.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                \u0026\u0026 contact.equals(card.contact);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 12,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(InfoListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private ListView\u003cContact\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public PersonListPanel(ObservableList\u003cContact\u003e contactList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        personListView.setItems(contactList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Contact} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cContact\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        protected void updateItem(Contact contact, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            super.updateItem(contact, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            if (empty || contact \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                setGraphic(new PersonCard(contact, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 10,
      "ernestyyh": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"errorResultFeedback\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private TextField resultDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public void setErrorFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        if (!styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 17,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SplitDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "public class SplitDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private static final String FXML \u003d \"SplitDisplay.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SplitDisplay.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private Tab accommodationTab;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private Tab activityTab;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private Tab contactTab;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private Tab infoListTab;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private Tab itineraryTab;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private TabPane infoTabPane;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    private TabPane mainTabPane;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     * Split display containing the list of information."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    public SplitDisplay(ObservableList\u003cAccommodation\u003e accommodationList, ObservableList\u003cActivity\u003e activityList,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                        ObservableList\u003cContact\u003e contactList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        accommodationTab.setContent((new AccommodationListPanel(accommodationList)).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        activityTab.setContent((new ActivityListPanel(activityList)).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        contactTab.setContent((new ContactListPanel(contactList)).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        infoListTab.setContent((new InfoListPanel(contactList)).getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 54,
      "KxxMxxx": 2
    }
  },
  {
    "path": "src/main/resources/view/AccommodationListCardFull.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" nodeOrientation\u003d\"RIGHT_TO_LEFT\" scaleX\u003d\"0.75\" scaleY\u003d\"0.75\" translateX\u003d\"14.5\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                  \u003cLabel fx:id\u003d\"name1\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone1\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cLabel fx:id\u003d\"address1\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cLabel fx:id\u003d\"email1\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 54
    }
  },
  {
    "path": "src/main/resources/view/AccommodationListCardSmall.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 35
    }
  },
  {
    "path": "src/main/resources/view/AccommodationListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003cListView fx:id\u003d\"accommodationListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 8
    }
  },
  {
    "path": "src/main/resources/view/ActivityListCardFull.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" nodeOrientation\u003d\"RIGHT_TO_LEFT\" scaleX\u003d\"0.75\" scaleY\u003d\"0.75\" translateX\u003d\"14.5\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                  \u003cLabel fx:id\u003d\"name1\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone1\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cLabel fx:id\u003d\"address1\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cLabel fx:id\u003d\"email1\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 54
    }
  },
  {
    "path": "src/main/resources/view/ActivityListCardSmall.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 35
    }
  },
  {
    "path": "src/main/resources/view/ActivityListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003cListView fx:id\u003d\"activityListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 8
    }
  },
  {
    "path": "src/main/resources/view/CentralDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.Accordion?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003cBorderPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "   \u003cleft\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cAccordion BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cpanes\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003cTitledPane animated\u003d\"false\" text\u003d\"untitled 1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "              \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003cTitledPane animated\u003d\"false\" text\u003d\"untitled 2\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "              \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003cTitledPane animated\u003d\"false\" text\u003d\"untitled 3\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "              \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003c/panes\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/Accordion\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "   \u003c/left\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "   \u003cright\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cTabPane prefHeight\u003d\"400.0\" prefWidth\u003d\"437.0\" tabClosingPolicy\u003d\"UNAVAILABLE\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003ctabs\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003cTab text\u003d\"Untitled Tab 1\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "              \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003c/Tab\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003cTab text\u003d\"Untitled Tab 2\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "              \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003c/Tab\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003c/tabs\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "   \u003c/right\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 49
    }
  },
  {
    "path": "src/main/resources/view/ContactListCardFull.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 40
    }
  },
  {
    "path": "src/main/resources/view/ContactListCardSmall.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 35
    }
  },
  {
    "path": "src/main/resources/view/ContactListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003cListView fx:id\u003d\"contactListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ".pane-without-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ".border-pane {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "     -fx-border-color: rgba(255, 255, 255, 0.2) transparent transparent transparent;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    -fx-border-color: #ffffff;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    -fx-border-insets: 10 5 0 5;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    -fx-border-radius: 5 5 5 5;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "#filterField, #personWebpage {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 11,
      "-": 346
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ".errorCommandBox {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    -fx-border-color: #d06651 !important; /* The error class should always override the default border-color style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ".errorResultFeedback {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 5,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/InfoListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003cListView fx:id\u003d\"infoListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 8
    }
  },
  {
    "path": "src/main/resources/view/ItineraryBoxPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"itineraryBox\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 6
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "         maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003cImage url\u003d\"@/images/calendar.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003cImageView fitHeight\u003d\"15\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cImage url\u003d\"@/images/calendar.png\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003cLabel text\u003d\"PlanÂ²travel App\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-without-border\" \u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-without-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "                   maxHeight\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cInsets right\u003d\"15\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003c!--\u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003c/VBox\u003e--\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003c!--\u003cSplitPane fx:id\u003d\"splitDisplay\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003cStackPane fx:id\u003d\"splitDisplayPanelPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003c/SplitPane\u003e--\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003cBorderPane fx:id\u003d\"centralDisplayPlaceholder\" styleClass\u003d\"border-pane\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 28,
      "-": 41
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-without-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "  \u003cTextField fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cInsets top\u003d\"5\" bottom\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "  \u003c/TextField\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 8,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/SplitDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003cSplitPane dividerPositions\u003d\"0.25\" focusTraversable\u003d\"false\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "  \u003citems\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cTabPane fx:id\u003d\"infoTabPane\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003ctabs\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cTab text\u003d\"ACC\" fx:id\u003d\"accommodationTab\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cTab text\u003d\"ACT\" fx:id\u003d\"activityTab\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "            \u003cTab text\u003d\"CON\" fx:id\u003d\"contactTab\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003c/tabs\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003cTabPane fx:id\u003d\"mainTabPane\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003ctabs\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003cTab text\u003d\"Info List\" fx:id\u003d\"infoListTab\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "          \u003cTab text\u003d\"Itinerary\" fx:id\u003d\"itineraryTab\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "        \u003c/tabs\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "      \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "  \u003c/items\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ernestyyh"
        },
        "content": "\u003c/SplitPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ernestyyh": 23
    }
  },
  {
    "path": "src/test/data/JsonPlannerStorageTest/invalidAndValidContactPlanner.json",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "  \"contacts\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonPlannerStorageTest/invalidContactPlanner.json",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "  \"contacts\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializablePlannerTest/duplicateContactPlanner.json",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "  \"contacts\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "-": 13
    }
  },
  {
    "path": "src/test/data/JsonSerializablePlannerTest/invalidContactPlanner.json",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "  \"contacts\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializablePlannerTest/typicalContactsPlanner.json",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "  \"_comment\": \"Planner save file which contains the same Contact values as in TypicalContacts#getTypicalPlanner()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "  \"contacts\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 2,
      "-": 44
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "  \"plannerFilePath\" : \"planner.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "  \"plannerFilePath\" : \"planner.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        final Index fifthContactIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertTrue(fifthContactIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertTrue(fifthContactIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertTrue(fifthContactIndex.equals(fifthContactIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertFalse(fifthContactIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertFalse(fifthContactIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertFalse(fifthContactIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.DeleteContactCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.ListContactCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyPlanner;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.JsonPlannerStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        JsonPlannerStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                new JsonPlannerStorage(temporaryFolder.resolve(\"planner.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String deleteContactCommand \u003d \"delete \" + DeleteContactCommand.SECOND_COMMAND_WORD + \" 9\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertCommandException(deleteContactCommand, MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String listCommand \u003d ListContactCommand.COMMAND_WORD + \" \" + ListContactCommand.SECOND_COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertCommandSuccess(listCommand, ListContactCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        // Setup LogicManager with JsonPlannerIoExceptionThrowingStub"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        JsonPlannerStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                new JsonPlannerIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionPlanner.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String addContactCommand \u003d AddContactCommand.COMMAND_WORD + \" \" + AddContactCommand.SECOND_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact expectedContact \u003d new ContactBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        expectedModel.addContact(expectedContact);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertCommandFailure(addContactCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void getFilteredContactList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredContactList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private static class JsonPlannerIoExceptionThrowingStub extends JsonPlannerStorage {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        private JsonPlannerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void savePlanner(ReadOnlyPlanner addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 28,
      "KxxMxxx": 10,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddContactCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.getTypicalPlanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class AddContactCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        model \u003d new ModelManager(getTypicalPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void execute_newContact_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact validContact \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        expectedModel.addContact(validContact);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertCommandSuccess(new AddContactCommand(validContact), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                String.format(AddContactCommand.MESSAGE_SUCCESS, validContact), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void execute_duplicateContact_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact contactInList \u003d model.getPlanner().getContactList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertCommandFailure(new AddContactCommand(contactInList), model, AddContactCommand.MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 13,
      "KxxMxxx": 4,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddContactCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ContactManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyAccommodation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyActivity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyContact;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ReadOnlyItinerary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.itineraryitem.activity.Activity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class AddContactCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddContactCommand((Contact) null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void execute_contactAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ModelStubAcceptingContactAdded modelStub \u003d new ModelStubAcceptingContactAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact validContact \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        CommandResult commandResult \u003d new AddContactCommand(validContact).execute(modelStub);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertEquals(String.format(AddContactCommand.MESSAGE_SUCCESS, validContact), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertEquals(Arrays.asList(validContact), modelStub.contactsAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void execute_duplicateContact_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact validContact \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        AddCommand addContactCommand \u003d new AddContactCommand(validContact);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithContact(validContact);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                AddContactCommand.MESSAGE_DUPLICATE_CONTACT, () -\u003e addContactCommand.execute(modelStub));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact alice \u003d new ContactBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact bob \u003d new ContactBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        AddContactCommand addAliceCommand \u003d new AddContactCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        AddContactCommand addBobCommand \u003d new AddContactCommand(bob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        AddContactCommand addAliceCommandCopy \u003d new AddContactCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        // different contacts -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        // ACCOMMODATION METHODS"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public Path getAccommodationFilePath() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void setAccommodationFilePath(Path accommodationFilePath) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void addAccommodation(Accommodation accommodation) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public boolean hasAccommodation(Accommodation accommodation) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void deleteAccommodation(Accommodation target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void setAccommodation(Accommodation target, Accommodation editedAccommodation) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void setAccommodations(ReadOnlyAccommodation accommodations) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public ReadOnlyAccommodation getAccommodations() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        // ACTIVITY METHODS"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public Path getActivityFilePath() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void setActivityFilePath(Path activityFilePath) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void setActivities(ReadOnlyActivity activities) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public ReadOnlyActivity getActivities() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void deleteActivity(Activity target) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        // CONTACT METHODS"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public Path getContactFilePath() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void setContactFilePath(Path contactFilePath) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void setContacts(ReadOnlyContact contacts) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public ReadOnlyContact getContacts() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void addContact(Contact contact) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public boolean hasContact(Contact contact) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public boolean hasPhone(Phone phone) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void deleteContact(Contact target) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void setContact(Contact target, Contact editedContact) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public Optional\u003cContact\u003e getContactByPhone(Phone phone) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        // DAY METHODS"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public Path getItineraryFilePath() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void setItineraryFilePath(Path itineraryFilePath) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void setItinerary(ReadOnlyItinerary itinerary) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public ReadOnlyItinerary getItinerary() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public Name getName() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void setItineraryName(Name name) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void setItineraryStartDate(LocalDate date) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void addDays(int n) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        public void deleteDay(Day target) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void setDays(ReadOnlyItinerary itinerary) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void setDays(List\u003cDay\u003e days) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        public boolean hasDay(Day day) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public ObservableList\u003cDay\u003e getFilteredItinerary() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void updateFilteredItinerary(Predicate\u003cDay\u003e predicate) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        // FILTERED LIST METHODS"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public ObservableList\u003cAccommodation\u003e getFilteredAccommodationList() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void updateFilteredAccommodationList(Predicate\u003cAccommodation\u003e predicate) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public ObservableList\u003cContact\u003e getFilteredContactList() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void updateFilteredContactList(Predicate\u003cContact\u003e predicate) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * A Model stub that contains a single contacts."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private class ModelStubWithContact extends ModelStub {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        private final Contact contact;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ModelStubWithContact(Contact contact) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            requireNonNull(contact);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            this.contact \u003d contact;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public boolean hasContact(Contact contact) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            requireNonNull(contact);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            return this.contact.isSameContact(contact);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * A Model stub that always accept the contacts being added."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private class ModelStubAcceptingContactAdded extends ModelStub {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        final ArrayList\u003cContact\u003e contactsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public boolean hasContact(Contact contact) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            requireNonNull(contact);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            return contactsAdded.stream().anyMatch(contact::isSameContact);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public void addContact(Contact contact) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            requireNonNull(contact);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            contactsAdded.add(contact);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        public ReadOnlyContact getContacts() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            return new ContactManager();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 10,
      "OneArmyj": 196,
      "KxxMxxx": 33,
      "-": 140,
      "oscarsu97": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.getTypicalPlanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void execute_emptyPlanner_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void execute_nonEmptyPlanner_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        expectedModel.setPlanner(new Planner());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 9,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ContactManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.testutil.EditContactDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ACTIVITY_NAME_A \u003d \"Visit Temple\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ACTIVITY_NAME_B \u003d \"Sushi class\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ACTIVITY_ADDRESS_A \u003d \"Kyoto\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ACTIVITY_ADDRESS_B \u003d \"Tokyo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_SIGHTSEEING \u003d \"sightseeing\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_LESSON \u003d \"lesson\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final EditContactCommand.EditContactDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static final EditContactCommand.EditContactDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        DESC_AMY \u003d new EditContactDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        DESC_BOB \u003d new EditContactDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * - the address book, filtered contacts list and selected contacts in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ContactManager expectedContactManager \u003d new ContactManager(actualModel.getContacts());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        List\u003cContact\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredContactList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertEquals(expectedContactManager, actualModel.getContacts());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredContactList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the contacts at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static void showContactAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredContactList().size());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact contact \u003d model.getFilteredContactList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        final String[] splitName \u003d contact.getName().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        model.updateFilteredContactList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertEquals(1, model.getFilteredContactList().size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 18,
      "KxxMxxx": 2,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteContactCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showContactAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.getTypicalPlanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CONTACT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CONTACT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class DeleteContactCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact contactToDelete \u003d model.getFilteredContactList().get(INDEX_FIRST_CONTACT.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteContactCommand(INDEX_FIRST_CONTACT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_CONTACT_SUCCESS, contactToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        expectedModel.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredContactList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteContactCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        showContactAtIndex(model, INDEX_FIRST_CONTACT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact contactToDelete \u003d model.getFilteredContactList().get(INDEX_FIRST_CONTACT.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(INDEX_FIRST_CONTACT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_CONTACT_SUCCESS, contactToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        expectedModel.deleteContact(contactToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        showNoContact(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertCommandSuccess(deleteContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        showContactAtIndex(model, INDEX_FIRST_CONTACT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CONTACT;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPlanner().getContactList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteContactCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        DeleteContactCommand deleteFirstCommand \u003d new DeleteContactCommand(INDEX_FIRST_CONTACT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        DeleteContactCommand deleteSecondCommand \u003d new DeleteContactCommand(INDEX_SECOND_CONTACT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        DeleteContactCommand deleteFirstContactCommandCopy \u003d new DeleteContactCommand(INDEX_FIRST_CONTACT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstContactCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        // different contacts -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private void showNoContact(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        model.updateFilteredContactList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertTrue(model.getFilteredContactList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 30,
      "KxxMxxx": 12,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditContactCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showContactAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.getTypicalPlanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CONTACT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CONTACT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand.EditContactDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.testutil.EditContactDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * EditContactCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class EditContactCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Contact editedContact \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder(editedContact).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_CONTACT, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_CONTACT_SUCCESS, editedContact);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Planner(model.getPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        expectedModel.setContact(model.getFilteredContactList().get(0), editedContact);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Index indexLastContact \u003d Index.fromOneBased(model.getFilteredContactList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact lastContact \u003d model.getFilteredContactList().get(indexLastContact.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ContactBuilder contactInList \u003d new ContactBuilder(lastContact);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact editedContact \u003d contactInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(indexLastContact, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_CONTACT_SUCCESS, editedContact);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Planner(model.getPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        expectedModel.setContact(lastContact, editedContact);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_CONTACT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                new EditContactDescriptor());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact editedContact \u003d model.getFilteredContactList().get(INDEX_FIRST_CONTACT.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_CONTACT_SUCCESS, editedContact);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Planner(model.getPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        showContactAtIndex(model, INDEX_FIRST_CONTACT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact contactInFilteredList \u003d model.getFilteredContactList().get(INDEX_FIRST_CONTACT.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact editedContact \u003d new ContactBuilder(contactInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_CONTACT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                new EditContactDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_CONTACT_SUCCESS, editedContact);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Planner(model.getPlanner()), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        expectedModel.setContact(model.getFilteredContactList().get(0), editedContact);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void execute_duplicateContactUnfilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact firstContact \u003d model.getFilteredContactList().get(INDEX_FIRST_CONTACT.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder(firstContact).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditCommand editCommand \u003d new EditContactCommand(INDEX_SECOND_CONTACT, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertCommandFailure(editCommand, model, EditContactCommand.MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void execute_duplicateContactFilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        showContactAtIndex(model, INDEX_FIRST_CONTACT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        // edit contacts in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact contactInList \u003d model.getPlanner().getContactList().get(INDEX_SECOND_CONTACT.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_CONTACT,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                new EditContactDescriptorBuilder(contactInList).build());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertCommandFailure(editContactCommand, model, EditContactCommand.MESSAGE_DUPLICATE_CONTACT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void execute_invalidContactIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredContactList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactCommand.EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertCommandFailure(editContactCommand, model, Messages.MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void execute_invalidContactIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        showContactAtIndex(model, INDEX_FIRST_CONTACT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CONTACT;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPlanner().getContactList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                new EditContactDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertCommandFailure(editContactCommand, model, Messages.MESSAGE_INVALID_CONTACT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        final EditContactCommand standardCommand \u003d new EditContactCommand(INDEX_FIRST_CONTACT, DESC_AMY);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        EditContactDescriptor copyDescriptor \u003d new EditContactDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactCommand commandWithSameValues \u003d new EditContactCommand(INDEX_FIRST_CONTACT, copyDescriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertFalse(standardCommand.equals(new EditContactCommand(INDEX_SECOND_CONTACT, DESC_AMY)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertFalse(standardCommand.equals(new EditContactCommand(INDEX_FIRST_CONTACT, DESC_BOB)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 47,
      "KxxMxxx": 33,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditContactDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand.EditContactDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.testutil.EditContactDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class EditContactDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        EditContactDescriptor descriptorWithSameValues \u003d new EditContactDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        EditContactDescriptor editedAmy \u003d new EditContactDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        editedAmy \u003d new EditContactDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        editedAmy \u003d new EditContactDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        editedAmy \u003d new EditContactDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        editedAmy \u003d new EditContactDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 8,
      "KxxMxxx": 1,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONTACTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.getTypicalPlanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        // different contacts -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void execute_zeroKeywords_noContactFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CONTACTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        expectedModel.updateFilteredContactList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredContactList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void execute_multipleKeywords_multipleContactsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CONTACTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        expectedModel.updateFilteredContactList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredContactList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 21,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListContactCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showContactAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.getTypicalPlanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CONTACT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListContactCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class ListContactCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        model \u003d new ModelManager(getTypicalPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertCommandSuccess(new ListContactCommand(), model, ListContactCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        showContactAtIndex(model, INDEX_FIRST_CONTACT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertCommandSuccess(new ListContactCommand(), model, ListContactCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 11,
      "KxxMxxx": 4,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddContactCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class AddContactCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Contact expectedContact \u003d new ContactBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + \" \" + AddContactCommand.SECOND_COMMAND_WORD"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                new AddContactCommand(expectedContact));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseSuccess(parser, \" \" + AddContactCommand.SECOND_COMMAND_WORD + NAME_DESC_AMY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                new AddContactCommand(expectedContact));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseSuccess(parser, \" \" + AddContactCommand.SECOND_COMMAND_WORD + NAME_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                new AddContactCommand(expectedContact));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseSuccess(parser, \" \" + AddContactCommand.SECOND_COMMAND_WORD + NAME_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                new AddContactCommand(expectedContact));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseSuccess(parser, \" \" + AddContactCommand.SECOND_COMMAND_WORD + NAME_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                new AddContactCommand(expectedContact));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Contact expectedContactMultipleTags \u003d new ContactBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseSuccess(parser, \" \" + AddContactCommand.SECOND_COMMAND_WORD + NAME_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                new AddContactCommand(expectedContactMultipleTags));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Contact expectedContact \u003d new ContactBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseSuccess(parser, \" \" + AddContactCommand.SECOND_COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY, new AddContactCommand(expectedContact));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, AddContactCommand.SECOND_COMMAND_WORD + \" \" + VALID_NAME_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, AddContactCommand.SECOND_COMMAND_WORD + NAME_DESC_BOB + VALID_PHONE_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, AddContactCommand.SECOND_COMMAND_WORD + \" \" + VALID_NAME_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, AddContactCommand.SECOND_COMMAND_WORD + \" \" + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, AddContactCommand.SECOND_COMMAND_WORD + NAME_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, AddContactCommand.SECOND_COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, AddContactCommand.SECOND_COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, AddContactCommand.SECOND_COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, AddContactCommand.SECOND_COMMAND_WORD + \" \" + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, AddContactCommand.SECOND_COMMAND_WORD + \" \" + PREAMBLE_NON_EMPTY"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CONTACT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.DeleteContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void parse_validArgs_returnsDeleteContactCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseSuccess(parser, DeleteContactCommand.SECOND_COMMAND_WORD + \" \" + \"1\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                new DeleteContactCommand(INDEX_FIRST_CONTACT));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, DeleteContactCommand.SECOND_COMMAND_WORD + \" \" + \"a\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "KxxMxxx": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditContactCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CONTACT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CONTACT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CONTACT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand.EditContactDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.testutil.EditContactDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class EditContactCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditContactCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, EditContactCommand.SECOND_COMMAND_WORD + \" \" + VALID_NAME_AMY,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, EditContactCommand.SECOND_COMMAND_WORD + \" \" + \"1\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                EditContactCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, EditContactCommand.SECOND_COMMAND_WORD + \" \" + \"\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, EditContactCommand.SECOND_COMMAND_WORD + \" -5\" + NAME_DESC_AMY,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, EditContactCommand.SECOND_COMMAND_WORD + \" 0\" + NAME_DESC_AMY,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, EditContactCommand.SECOND_COMMAND_WORD + \" 1 some random string\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, EditContactCommand.SECOND_COMMAND_WORD + \" 1 i/ string\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, EditContactCommand.SECOND_COMMAND_WORD + \" 1\" + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, EditContactCommand.SECOND_COMMAND_WORD + \" 1\" + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, EditContactCommand.SECOND_COMMAND_WORD + \" 1\" + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, EditContactCommand.SECOND_COMMAND_WORD + \" 1\" + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, EditContactCommand.SECOND_COMMAND_WORD + \" 1\" + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, EditContactCommand.SECOND_COMMAND_WORD + \" 1\" + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, EditContactCommand.SECOND_COMMAND_WORD + \" 1\" + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Contact} being edited,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, EditContactCommand.SECOND_COMMAND_WORD + \" 1\" + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, EditContactCommand.SECOND_COMMAND_WORD + \" 1\" + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, EditContactCommand.SECOND_COMMAND_WORD + \" 1\" + TAG_EMPTY"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertParseFailure(parser, EditContactCommand.SECOND_COMMAND_WORD + \" 1\" + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_CONTACT;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String userInput \u003d EditContactCommand.SECOND_COMMAND_WORD + \" \" + targetIndex.getOneBased() + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CONTACT;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String userInput \u003d EditContactCommand.SECOND_COMMAND_WORD + \" \" + targetIndex.getOneBased() + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CONTACT;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String userInput \u003d EditContactCommand.SECOND_COMMAND_WORD + \" \" + targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        userInput \u003d EditContactCommand.SECOND_COMMAND_WORD + \" \" + targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        descriptor \u003d new EditContactDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        userInput \u003d EditContactCommand.SECOND_COMMAND_WORD + \" \" + targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        descriptor \u003d new EditContactDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        userInput \u003d EditContactCommand.SECOND_COMMAND_WORD + \" \" + targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        descriptor \u003d new EditContactDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        userInput \u003d EditContactCommand.SECOND_COMMAND_WORD + \" \" + targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        descriptor \u003d new EditContactDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CONTACT;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String userInput \u003d EditContactCommand.SECOND_COMMAND_WORD + \" \" + targetIndex.getOneBased() + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + EMAIL_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CONTACT;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String userInput \u003d EditContactCommand.SECOND_COMMAND_WORD + \" \" + targetIndex.getOneBased()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        userInput \u003d EditContactCommand.SECOND_COMMAND_WORD + \" \" + targetIndex.getOneBased() + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + INVALID_PHONE_DESC + ADDRESS_DESC_BOB + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        descriptor \u003d new EditContactDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CONTACT;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String userInput \u003d EditContactCommand.SECOND_COMMAND_WORD + \" \" + targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 23,
      "KxxMxxx": 72,
      "-": 136
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CONTACT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertEquals(INDEX_FIRST_CONTACT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertEquals(INDEX_FIRST_CONTACT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 7,
      "-": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PlannerParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CONTACT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.DeleteContactCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand.EditContactDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.ListContactCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.testutil.ContactUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.testutil.EditContactDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class PlannerParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final PlannerParser parser \u003d new PlannerParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact contact \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        AddContactCommand command \u003d (AddContactCommand) parser.parseCommand(ContactUtil.getAddCommand(contact));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertEquals(new AddContactCommand(contact), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        DeleteContactCommand command \u003d (DeleteContactCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                DeleteContactCommand.COMMAND_WORD + \" \" + DeleteContactCommand.SECOND_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        + INDEX_FIRST_CONTACT.getOneBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertEquals(new DeleteContactCommand(INDEX_FIRST_CONTACT), command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact contact \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        EditContactDescriptor descriptor \u003d new EditContactDescriptorBuilder(contact).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        EditContactCommand command \u003d (EditContactCommand) parser.parseCommand(EditContactCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + EditContactCommand.SECOND_COMMAND_WORD + \" \" + INDEX_FIRST_CONTACT.getOneBased() + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + ContactUtil.getEditContactDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertEquals(new EditContactCommand(INDEX_FIRST_CONTACT, descriptor), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertTrue(parser.parseCommand(ListContactCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + ListContactCommand.SECOND_COMMAND_WORD) instanceof ListContactCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertTrue(parser.parseCommand(ListContactCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + ListContactCommand.SECOND_COMMAND_WORD + \" 3\") instanceof ListContactCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 11,
      "KxxMxxx": 19,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.testutil.PlannerBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertEquals(new Planner(), new Planner(modelManager.getPlanner()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        userPrefs.setPlannerFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        userPrefs.setPlannerFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setPlannerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPlanner(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setPlannerFilePath_validPath_setsPlannerFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        modelManager.setPlannerFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertEquals(path, modelManager.getPlannerFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void hasContact_nullContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasContact(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void hasContact_contactNotInPlanner_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertFalse(modelManager.hasContact(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void hasContact_contactInPlanner_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        modelManager.addContact(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertTrue(modelManager.hasContact(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void getFilteredContactList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredContactList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Planner planner \u003d new PlannerBuilder().withContact(ALICE).withContact(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Planner differentPlanner \u003d new Planner();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        modelManager \u003d new ModelManager(planner, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(planner, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        // different planner -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentPlanner, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        String[] keywords \u003d ALICE.getName().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        modelManager.updateFilteredContactList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(planner, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        modelManager.updateFilteredContactList(Model.PREDICATE_SHOW_ALL_CONTACTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        differentUserPrefs.setPlannerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(planner, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 36,
      "-": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setPlannerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPlannerFilePath(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 5,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/contact/ContactTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class ContactTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact contact \u003d new ContactBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e contact.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void isSameContact() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertTrue(ALICE.isSameContact(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertFalse(ALICE.isSameContact(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact editedAlice \u003d new ContactBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertFalse(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        editedAlice \u003d new ContactBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertFalse(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        editedAlice \u003d new ContactBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertTrue(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        editedAlice \u003d new ContactBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertTrue(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        editedAlice \u003d new ContactBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertTrue(ALICE.isSameContact(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact aliceCopy \u003d new ContactBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        // different contacts -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact editedAlice \u003d new ContactBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        editedAlice \u003d new ContactBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        editedAlice \u003d new ContactBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        editedAlice \u003d new ContactBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        editedAlice \u003d new ContactBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 27,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/contact/EmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/contact/PhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/contact/UniqueContactListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.exceptions.ContactNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.exceptions.DuplicateContactException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class UniqueContactListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private final UniqueContactList uniqueContactList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void contains_nullContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueContactList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void contains_contactNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertFalse(uniqueContactList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void contains_contactInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertTrue(uniqueContactList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void contains_contactWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact editedAlice \u003d new ContactBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertTrue(uniqueContactList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void add_nullContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueContactList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void add_duplicateContact_throwsDuplicateContactException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(DuplicateContactException.class, () -\u003e uniqueContactList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContact_nullTargetContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueContactList.setContact(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContact_nullEditedContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003euniqueContactList.setContact(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContact_targetContactNotInList_throwsContactNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(ContactNotFoundException.class, () -\u003e uniqueContactList.setContact(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContact_editedContactIsSameContact_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        uniqueContactList.setContact(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        UniqueContactList expectedUniqueContactList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        expectedUniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertEquals(expectedUniqueContactList, uniqueContactList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContact_editedContactHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Contact editedAlice \u003d new ContactBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        uniqueContactList.setContact(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        UniqueContactList expectedUniqueContactList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        expectedUniqueContactList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertEquals(expectedUniqueContactList, uniqueContactList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContact_editedContactHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        uniqueContactList.setContact(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        UniqueContactList expectedUniqueContactList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        expectedUniqueContactList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertEquals(expectedUniqueContactList, uniqueContactList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContact_editedContactHasNonUniqueIdentity_throwsDuplicateContactException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        uniqueContactList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(DuplicateContactException.class, () -\u003e uniqueContactList.setContact(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void remove_nullContact_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueContactList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void remove_contactDoesNotExist_throwsContactNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(ContactNotFoundException.class, () -\u003e uniqueContactList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void remove_existingContact_removesContact() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        uniqueContactList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        UniqueContactList expectedUniqueContactList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertEquals(expectedUniqueContactList, uniqueContactList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContacts_nullUniqueContactList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003euniqueContactList.setContacts((UniqueContactList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContacts_uniqueContactList_replacesOwnListWithProvidedUniqueContactList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        UniqueContactList expectedUniqueContactList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        expectedUniqueContactList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        uniqueContactList.setContacts(expectedUniqueContactList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertEquals(expectedUniqueContactList, uniqueContactList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContacts_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueContactList.setContacts((List\u003cContact\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContacts_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        uniqueContactList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        List\u003cContact\u003e contactList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        uniqueContactList.setContacts(contactList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        UniqueContactList expectedUniqueContactList \u003d new UniqueContactList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        expectedUniqueContactList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertEquals(expectedUniqueContactList, uniqueContactList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void setContacts_listWithDuplicateContacts_throwsDuplicateContactException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        List\u003cContact\u003e listWithDuplicateContacts \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(DuplicateContactException.class, () -\u003e uniqueContactList.setContacts(listWithDuplicateContacts));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            -\u003e uniqueContactList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/field/AddressTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/field/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        // different contacts -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertTrue(predicate.test(new ContactBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertTrue(predicate.test(new ContactBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertTrue(predicate.test(new ContactBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertTrue(predicate.test(new ContactBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertFalse(predicate.test(new ContactBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertFalse(predicate.test(new ContactBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertFalse(predicate.test(new ContactBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 10,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/field/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.model.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        userPrefs.setPlannerFilePath(Paths.get(\"planner.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 5,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.accommodation.JsonAccommodationStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.activity.JsonActivityStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.contact.JsonContactStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.day.JsonItineraryStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        JsonAccommodationStorage accommodationStorage \u003d new JsonAccommodationStorage(getTempFilePath(\"acc\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        JsonActivityStorage activityStorage \u003d new JsonActivityStorage(getTempFilePath(\"act\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        JsonContactStorage contactStorage \u003d new JsonContactStorage(getTempFilePath(\"con\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        JsonItineraryStorage itineraryStorage \u003d new JsonItineraryStorage(getTempFilePath(\"iti\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        storageManager \u003d new StorageManager(accommodationStorage, activityStorage, contactStorage, itineraryStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                userPrefsStorage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void contactReadSave() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "         * {@link JsonPlannerStorage} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPlannerStorageTest} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "         *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ContactManager original \u003d getTypicalPlanner();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        storageManager.saveContact(original);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ReadOnlyContact retrieved \u003d storageManager.readContact().get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertEquals(original, new ContactManager(retrieved));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void getAccommodationFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertNotNull(storageManager.getAccommodationFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 22,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/contact/JsonAdaptedContactTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.storage.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.storage.contact.JsonAdaptedContact.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import static seedu.address.testutil.TypicalContacts.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class JsonAdaptedContactTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().get().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().get().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public void toModelType_validContactDetails_returnsContact() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        JsonAdaptedContact contact \u003d new JsonAdaptedContact(BENSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertEquals(BENSON, contact.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        JsonAdaptedContact contact \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                new JsonAdaptedContact(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, contact::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        JsonAdaptedContact contact \u003d new JsonAdaptedContact(null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, contact::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        JsonAdaptedContact contact \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                new JsonAdaptedContact(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, contact::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        JsonAdaptedContact contact \u003d new JsonAdaptedContact(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, contact::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        JsonAdaptedContact contact \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                new JsonAdaptedContact(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, contact::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        JsonAdaptedContact contact \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                new JsonAdaptedContact(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, contact::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        JsonAdaptedContact contact \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "                new JsonAdaptedContact(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        assertThrows(IllegalValueException.class, contact::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 35,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ContactBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * A utility class to help with building Contact objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class ContactBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ContactBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Initializes the ContactBuilder with the data of {@code contactToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ContactBuilder(Contact contactToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        name \u003d contactToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        phone \u003d contactToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        email \u003d contactToCopy.getEmail().orElse(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        address \u003d contactToCopy.getAddress().orElse(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(contactToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Sets the {@code Name} of the {@code Contact} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ContactBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Contact} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ContactBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Sets the {@code Address} of the {@code Contact} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ContactBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Sets the {@code Phone} of the {@code Contact} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ContactBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Sets the {@code Email} of the {@code Contact} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public ContactBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Contact build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return new Contact(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 27,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ContactUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand.EditContactDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * A utility class for Contact."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class ContactUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns an add command string for adding the {@code contacts}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static String getAddCommand(Contact contact) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return AddContactCommand.COMMAND_WORD + \" \" + AddContactCommand.SECOND_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + getContactDetails(contact);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the part of command string for the given {@code contacts}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static String getContactDetails(Contact contact) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        sb.append(PREFIX_NAME + contact.getName().toString() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        sb.append(PREFIX_PHONE + contact.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (contact.getEmail().isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            sb.append(PREFIX_EMAIL + contact.getEmail().get().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            sb.append(PREFIX_EMAIL + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        if (contact.getAddress().isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            sb.append(PREFIX_ADDRESS + contact.getAddress().get().value + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            sb.append(PREFIX_ADDRESS + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        contact.getTags().stream().forEach("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static String getEditContactDescriptorDetails(EditContactDescriptor descriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.toString()).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 25,
      "KxxMxxx": 4,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditContactDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand.EditContactDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * A utility class to help with building EditContactDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class EditContactDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private EditContactDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public EditContactDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        descriptor \u003d new EditContactDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public EditContactDescriptorBuilder(EditContactDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.descriptor \u003d new EditContactDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns an {@code EditContactDescriptor} with fields containing {@code contacts}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public EditContactDescriptorBuilder(Contact contact) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        descriptor \u003d new EditContactDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        descriptor.setName(contact.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        descriptor.setPhone(contact.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        descriptor.setEmail(contact.getEmail().orElse(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        descriptor.setAddress(contact.getAddress().orElse(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        descriptor.setTags(contact.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Sets the {@code Name} of the {@code EditContactDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public EditContactDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditContactDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public EditContactDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Sets the {@code Email} of the {@code EditContactDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public EditContactDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Sets the {@code Address} of the {@code EditContactDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public EditContactDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditContactDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public EditContactDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public EditContactDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 86,
      "KxxMxxx": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PlannerBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.Planner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " *     {@code Planner ab \u003d new PlannerBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class PlannerBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private Planner planner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public PlannerBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        planner \u003d new Planner();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public PlannerBuilder(Planner planner) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        this.planner \u003d planner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Adds a new {@code Contact} to the {@code Planner} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public PlannerBuilder withContact(Contact contact) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        planner.addContact(contact);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public Planner build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return planner;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " */"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the middle index of the contacts in the {@code model}\u0027s contacts list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return Index.fromOneBased(model.getFilteredContactList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the last index of the contacts in the {@code model}\u0027s contacts list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return Index.fromOneBased(model.getFilteredContactList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns the contacts in the {@code model}\u0027s contacts list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static Contact getContact(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return model.getFilteredContactList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalContacts.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.ContactManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": " * A utility class containing a list of {@code Contact} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "public class TypicalContacts {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final Contact ALICE \u003d new ContactBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final Contact BENSON \u003d new ContactBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final Contact CARL \u003d new ContactBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final Contact DANIEL \u003d new ContactBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final Contact ELLE \u003d new ContactBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final Contact FIONA \u003d new ContactBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final Contact GEORGE \u003d new ContactBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final Contact HOON \u003d new ContactBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final Contact IDA \u003d new ContactBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    // Manually added - Contact\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final Contact AMY \u003d new ContactBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final Contact BOB \u003d new ContactBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    private TypicalContacts() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "     * Returns an {@code Planner} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static ContactManager getTypicalPlanner() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        ContactManager cm \u003d new ContactManager();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        for (Contact contact : getTypicalContacts()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "            cm.addContact(contact);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "        return cm;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static List\u003cContact\u003e getTypicalContacts() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 24,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final Index INDEX_FIRST_CONTACT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final Index INDEX_SECOND_CONTACT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OneArmyj"
        },
        "content": "    public static final Index INDEX_THIRD_CONTACT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OneArmyj": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/accommodation/AccommodationBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package seedu.address.testutil.accommodation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.contact.Contact;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.testutil.ContactBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * A utility class to help with building Accommodation objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class AccommodationBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline Home\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String DEFAULT_ACCOMMODATION_NAME \u003d \"Sam Smith\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String DEFAULT_ACCOMMODATION_PHONE \u003d \"91170081\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String DEFAULT_ACCOMMODATION_EMAIL \u003d \"sam1987@gmail.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String DEFAULT_ACCOMMODATION_ADDRESS \u003d \"456, Bukit Batok st 53, #03-21\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String[] DEFAULT_ACCOMMODATION_TAGS \u003d {\"Jurong\", \"Cool\", \"Cheap\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Contact contact;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public AccommodationBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        contact \u003d new ContactBuilder().withName(DEFAULT_ACCOMMODATION_NAME).withPhone(DEFAULT_ACCOMMODATION_PHONE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                .withEmail(DEFAULT_ACCOMMODATION_EMAIL).withAddress(DEFAULT_ACCOMMODATION_ADDRESS).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        tags \u003d SampleDataUtil.getTagSet(DEFAULT_ACCOMMODATION_TAGS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Initializes the AccommodationBuilder with the data of {@code contactToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public AccommodationBuilder(Accommodation accommodationToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        name \u003d accommodationToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        address \u003d accommodationToCopy.getAddress();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        contact \u003d accommodationToCopy.getContact().orElse(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(accommodationToCopy.getTags());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Sets the {@code Name} of the {@code Contact} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public AccommodationBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Sets the {@code Address} of the {@code Contact} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public AccommodationBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Sets the {@code Phone} of the {@code Contact} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public AccommodationBuilder withContact(String name, String phone, String email, String address, String... tags) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.contact \u003d new ContactBuilder().withName(name).withEmail(email)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                .withPhone(phone).withAddress(address).withTags(tags).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Sets the {@code Phone} of the {@code Contact} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public AccommodationBuilder withContact(Contact contact) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Contact} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public AccommodationBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public Accommodation build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return new Accommodation(name, address, contact, tags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/accommodation/AccommodationUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package seedu.address.testutil.accommodation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.commands.AddAccommodationCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.commands.EditAccommodationCommand.EditAccommodationDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * A utility class for Accommodation."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class AccommodationUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Returns an add command string for adding the {@code contacts}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static String getAddAccommodationCommand(Accommodation accommodation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return AddAccommodationCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                + AddAccommodationCommand.SECOND_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                + getAccommodationDetails(accommodation);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Returns the part of command string for the given {@code accommodation}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static String getAccommodationDetails(Accommodation accommodation) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        sb.append(PREFIX_NAME + accommodation.getName().toString() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        sb.append(PREFIX_ADDRESS + accommodation.getAddress().toString() + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        accommodation.getContact().ifPresent("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            contact -\u003e sb.append(PREFIX_PHONE + contact.getPhone().toString() + \" \")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        accommodation.getTags().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Returns the part of command string for the given {@code EditAccommodationDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static String getEditAccommodationDescriptorDetails(EditAccommodationDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.toString()).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/accommodation/EditAccommodationDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package seedu.address.testutil.accommodation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.logic.commands.EditAccommodationCommand.EditAccommodationDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.contact.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.field.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.field.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * A utility class to help with building EditContactDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class EditAccommodationDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private EditAccommodationDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public EditAccommodationDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        descriptor \u003d new EditAccommodationDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public EditAccommodationDescriptorBuilder(EditAccommodationDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        this.descriptor \u003d new EditAccommodationDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Returns an {@code EditContactDescriptor} with fields containing {@code contacts}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public EditAccommodationDescriptorBuilder(Accommodation accommodation) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        descriptor \u003d new EditAccommodationDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        descriptor.setName(accommodation.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        accommodation.getContact().ifPresent(contact -\u003e descriptor.setPhone(contact.getPhone()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        descriptor.setAddress(accommodation.getAddress());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        descriptor.setTags(accommodation.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Sets the {@code Name} of the {@code EditContactDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public EditAccommodationDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditContactDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public EditAccommodationDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Sets the {@code Address} of the {@code EditContactDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public EditAccommodationDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditContactDescriptor}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public EditAccommodationDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public EditAccommodationDescriptor build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/accommodation/TypicalAccommodations.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "package seedu.address.testutil.accommodation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.model.itineraryitem.accommodation.Accommodation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "import seedu.address.testutil.TypicalContacts;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " * A utility class containing a list of {@code Contact} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "public class TypicalAccommodations {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final Accommodation ALICE \u003d new AccommodationBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withContact(TypicalContacts.ALICE)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            .withTags(\"Jurong\", \"Cool\", \"Cheap\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final Accommodation BENSON \u003d new AccommodationBuilder().withName(\"Benson Meier Home\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            .withContact(TypicalContacts.BENSON).withTags(\"Near Mrt\", \"Cozy\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final Accommodation CARL \u003d new AccommodationBuilder().withName(\"Carl Kurz Home\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            .withContact(TypicalContacts.CARL).withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final Accommodation DANIEL \u003d new AccommodationBuilder().withName(\"Daniel Meier Home\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            .withContact(TypicalContacts.DANIEL).withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final Accommodation ELLE \u003d new AccommodationBuilder().withName(\"Elle Meyer Home\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            .withContact(TypicalContacts.ELLE).withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final Accommodation FIONA \u003d new AccommodationBuilder().withName(\"Fiona Kunz Home\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            .withContact(TypicalContacts.FIONA).withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final Accommodation GEORGE \u003d new AccommodationBuilder().withName(\"George Best Home\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            .withContact(TypicalContacts.GEORGE).withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final Accommodation HOON \u003d new AccommodationBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            .withContact(TypicalContacts.HOON).withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final Accommodation IDA \u003d new AccommodationBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            .withContact(TypicalContacts.IDA).withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    // Manually added - Contact\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final Accommodation AMY \u003d new AccommodationBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final Accommodation BOB \u003d new AccommodationBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    private TypicalAccommodations() {} // prevents instantiation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     * Returns an {@code Model} with all the typical accommodations."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static Model getTypicalAccommodations() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        Model ab \u003d new ModelManager();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        for (Accommodation accommodation : getTypicalContacts()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "            ab.addAccommodation(accommodation);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    public static List\u003cAccommodation\u003e getTypicalContacts() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1nefootstep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1nefootstep": 71
    }
  }
]
